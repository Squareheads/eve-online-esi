"use strict";
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.4.4.dev4
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request");
const Promise = require("bluebird");
let defaultBasePath = 'https://esi.tech.ccp.is/latest';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
/**
* Forbidden
*/
class DeleteCharactersCharacterIdContactsForbidden {
}
exports.DeleteCharactersCharacterIdContactsForbidden = DeleteCharactersCharacterIdContactsForbidden;
/**
* Internal server error
*/
class DeleteCharactersCharacterIdContactsInternalServerError {
}
exports.DeleteCharactersCharacterIdContactsInternalServerError = DeleteCharactersCharacterIdContactsInternalServerError;
/**
* Forbidden
*/
class DeleteCharactersCharacterIdFittingsFittingIdForbidden {
}
exports.DeleteCharactersCharacterIdFittingsFittingIdForbidden = DeleteCharactersCharacterIdFittingsFittingIdForbidden;
/**
* Internal server error
*/
class DeleteCharactersCharacterIdFittingsFittingIdInternalServerError {
}
exports.DeleteCharactersCharacterIdFittingsFittingIdInternalServerError = DeleteCharactersCharacterIdFittingsFittingIdInternalServerError;
/**
* Forbidden
*/
class DeleteCharactersCharacterIdMailLabelsLabelIdForbidden {
}
exports.DeleteCharactersCharacterIdMailLabelsLabelIdForbidden = DeleteCharactersCharacterIdMailLabelsLabelIdForbidden;
/**
* Internal server error
*/
class DeleteCharactersCharacterIdMailLabelsLabelIdInternalServerError {
}
exports.DeleteCharactersCharacterIdMailLabelsLabelIdInternalServerError = DeleteCharactersCharacterIdMailLabelsLabelIdInternalServerError;
/**
* Unprocessable entity
*/
class DeleteCharactersCharacterIdMailLabelsLabelIdUnprocessableEntity {
}
exports.DeleteCharactersCharacterIdMailLabelsLabelIdUnprocessableEntity = DeleteCharactersCharacterIdMailLabelsLabelIdUnprocessableEntity;
/**
* Forbidden
*/
class DeleteCharactersCharacterIdMailMailIdForbidden {
}
exports.DeleteCharactersCharacterIdMailMailIdForbidden = DeleteCharactersCharacterIdMailMailIdForbidden;
/**
* Internal server error
*/
class DeleteCharactersCharacterIdMailMailIdInternalServerError {
}
exports.DeleteCharactersCharacterIdMailMailIdInternalServerError = DeleteCharactersCharacterIdMailMailIdInternalServerError;
/**
* Forbidden
*/
class DeleteFleetsFleetIdMembersMemberIdForbidden {
}
exports.DeleteFleetsFleetIdMembersMemberIdForbidden = DeleteFleetsFleetIdMembersMemberIdForbidden;
/**
* Internal server error
*/
class DeleteFleetsFleetIdMembersMemberIdInternalServerError {
}
exports.DeleteFleetsFleetIdMembersMemberIdInternalServerError = DeleteFleetsFleetIdMembersMemberIdInternalServerError;
/**
* Not found
*/
class DeleteFleetsFleetIdMembersMemberIdNotFound {
}
exports.DeleteFleetsFleetIdMembersMemberIdNotFound = DeleteFleetsFleetIdMembersMemberIdNotFound;
/**
* Forbidden
*/
class DeleteFleetsFleetIdSquadsSquadIdForbidden {
}
exports.DeleteFleetsFleetIdSquadsSquadIdForbidden = DeleteFleetsFleetIdSquadsSquadIdForbidden;
/**
* Internal server error
*/
class DeleteFleetsFleetIdSquadsSquadIdInternalServerError {
}
exports.DeleteFleetsFleetIdSquadsSquadIdInternalServerError = DeleteFleetsFleetIdSquadsSquadIdInternalServerError;
/**
* Not found
*/
class DeleteFleetsFleetIdSquadsSquadIdNotFound {
}
exports.DeleteFleetsFleetIdSquadsSquadIdNotFound = DeleteFleetsFleetIdSquadsSquadIdNotFound;
/**
* Forbidden
*/
class DeleteFleetsFleetIdWingsWingIdForbidden {
}
exports.DeleteFleetsFleetIdWingsWingIdForbidden = DeleteFleetsFleetIdWingsWingIdForbidden;
/**
* Internal server error
*/
class DeleteFleetsFleetIdWingsWingIdInternalServerError {
}
exports.DeleteFleetsFleetIdWingsWingIdInternalServerError = DeleteFleetsFleetIdWingsWingIdInternalServerError;
/**
* Not found
*/
class DeleteFleetsFleetIdWingsWingIdNotFound {
}
exports.DeleteFleetsFleetIdWingsWingIdNotFound = DeleteFleetsFleetIdWingsWingIdNotFound;
/**
* Internal server error
*/
class GetAlliancesAllianceIdCorporationsInternalServerError {
}
exports.GetAlliancesAllianceIdCorporationsInternalServerError = GetAlliancesAllianceIdCorporationsInternalServerError;
/**
* Internal server error
*/
class GetAlliancesAllianceIdIconsInternalServerError {
}
exports.GetAlliancesAllianceIdIconsInternalServerError = GetAlliancesAllianceIdIconsInternalServerError;
/**
* No image server for this datasource
*/
class GetAlliancesAllianceIdIconsNotFound {
}
exports.GetAlliancesAllianceIdIconsNotFound = GetAlliancesAllianceIdIconsNotFound;
/**
* 200 ok object
*/
class GetAlliancesAllianceIdIconsOk {
}
exports.GetAlliancesAllianceIdIconsOk = GetAlliancesAllianceIdIconsOk;
/**
* Internal server error
*/
class GetAlliancesAllianceIdInternalServerError {
}
exports.GetAlliancesAllianceIdInternalServerError = GetAlliancesAllianceIdInternalServerError;
/**
* Alliance not found
*/
class GetAlliancesAllianceIdNotFound {
}
exports.GetAlliancesAllianceIdNotFound = GetAlliancesAllianceIdNotFound;
/**
* 200 ok object
*/
class GetAlliancesAllianceIdOk {
}
exports.GetAlliancesAllianceIdOk = GetAlliancesAllianceIdOk;
/**
* Internal server error
*/
class GetAlliancesInternalServerError {
}
exports.GetAlliancesInternalServerError = GetAlliancesInternalServerError;
/**
* 200 ok object
*/
class GetAlliancesNames200Ok {
}
exports.GetAlliancesNames200Ok = GetAlliancesNames200Ok;
/**
* Internal server error
*/
class GetAlliancesNamesInternalServerError {
}
exports.GetAlliancesNamesInternalServerError = GetAlliancesNamesInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdAgentsResearch200Ok {
}
exports.GetCharactersCharacterIdAgentsResearch200Ok = GetCharactersCharacterIdAgentsResearch200Ok;
/**
* Forbidden
*/
class GetCharactersCharacterIdAgentsResearchForbidden {
}
exports.GetCharactersCharacterIdAgentsResearchForbidden = GetCharactersCharacterIdAgentsResearchForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdAgentsResearchInternalServerError {
}
exports.GetCharactersCharacterIdAgentsResearchInternalServerError = GetCharactersCharacterIdAgentsResearchInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdAssets200Ok {
}
exports.GetCharactersCharacterIdAssets200Ok = GetCharactersCharacterIdAssets200Ok;
(function (GetCharactersCharacterIdAssets200Ok) {
    var LocationFlagEnum;
    (function (LocationFlagEnum) {
        LocationFlagEnum[LocationFlagEnum["AutoFit"] = 'AutoFit'] = "AutoFit";
        LocationFlagEnum[LocationFlagEnum["Cargo"] = 'Cargo'] = "Cargo";
        LocationFlagEnum[LocationFlagEnum["CorpseBay"] = 'CorpseBay'] = "CorpseBay";
        LocationFlagEnum[LocationFlagEnum["DroneBay"] = 'DroneBay'] = "DroneBay";
        LocationFlagEnum[LocationFlagEnum["FleetHangar"] = 'FleetHangar'] = "FleetHangar";
        LocationFlagEnum[LocationFlagEnum["Deliveries"] = 'Deliveries'] = "Deliveries";
        LocationFlagEnum[LocationFlagEnum["HiddenModifiers"] = 'HiddenModifiers'] = "HiddenModifiers";
        LocationFlagEnum[LocationFlagEnum["Hangar"] = 'Hangar'] = "Hangar";
        LocationFlagEnum[LocationFlagEnum["HangarAll"] = 'HangarAll'] = "HangarAll";
        LocationFlagEnum[LocationFlagEnum["LoSlot0"] = 'LoSlot0'] = "LoSlot0";
        LocationFlagEnum[LocationFlagEnum["LoSlot1"] = 'LoSlot1'] = "LoSlot1";
        LocationFlagEnum[LocationFlagEnum["LoSlot2"] = 'LoSlot2'] = "LoSlot2";
        LocationFlagEnum[LocationFlagEnum["LoSlot3"] = 'LoSlot3'] = "LoSlot3";
        LocationFlagEnum[LocationFlagEnum["LoSlot4"] = 'LoSlot4'] = "LoSlot4";
        LocationFlagEnum[LocationFlagEnum["LoSlot5"] = 'LoSlot5'] = "LoSlot5";
        LocationFlagEnum[LocationFlagEnum["LoSlot6"] = 'LoSlot6'] = "LoSlot6";
        LocationFlagEnum[LocationFlagEnum["LoSlot7"] = 'LoSlot7'] = "LoSlot7";
        LocationFlagEnum[LocationFlagEnum["MedSlot0"] = 'MedSlot0'] = "MedSlot0";
        LocationFlagEnum[LocationFlagEnum["MedSlot1"] = 'MedSlot1'] = "MedSlot1";
        LocationFlagEnum[LocationFlagEnum["MedSlot2"] = 'MedSlot2'] = "MedSlot2";
        LocationFlagEnum[LocationFlagEnum["MedSlot3"] = 'MedSlot3'] = "MedSlot3";
        LocationFlagEnum[LocationFlagEnum["MedSlot4"] = 'MedSlot4'] = "MedSlot4";
        LocationFlagEnum[LocationFlagEnum["MedSlot5"] = 'MedSlot5'] = "MedSlot5";
        LocationFlagEnum[LocationFlagEnum["MedSlot6"] = 'MedSlot6'] = "MedSlot6";
        LocationFlagEnum[LocationFlagEnum["MedSlot7"] = 'MedSlot7'] = "MedSlot7";
        LocationFlagEnum[LocationFlagEnum["HiSlot0"] = 'HiSlot0'] = "HiSlot0";
        LocationFlagEnum[LocationFlagEnum["HiSlot1"] = 'HiSlot1'] = "HiSlot1";
        LocationFlagEnum[LocationFlagEnum["HiSlot2"] = 'HiSlot2'] = "HiSlot2";
        LocationFlagEnum[LocationFlagEnum["HiSlot3"] = 'HiSlot3'] = "HiSlot3";
        LocationFlagEnum[LocationFlagEnum["HiSlot4"] = 'HiSlot4'] = "HiSlot4";
        LocationFlagEnum[LocationFlagEnum["HiSlot5"] = 'HiSlot5'] = "HiSlot5";
        LocationFlagEnum[LocationFlagEnum["HiSlot6"] = 'HiSlot6'] = "HiSlot6";
        LocationFlagEnum[LocationFlagEnum["HiSlot7"] = 'HiSlot7'] = "HiSlot7";
        LocationFlagEnum[LocationFlagEnum["AssetSafety"] = 'AssetSafety'] = "AssetSafety";
        LocationFlagEnum[LocationFlagEnum["Locked"] = 'Locked'] = "Locked";
        LocationFlagEnum[LocationFlagEnum["Unlocked"] = 'Unlocked'] = "Unlocked";
        LocationFlagEnum[LocationFlagEnum["Implant"] = 'Implant'] = "Implant";
        LocationFlagEnum[LocationFlagEnum["QuafeBay"] = 'QuafeBay'] = "QuafeBay";
        LocationFlagEnum[LocationFlagEnum["RigSlot0"] = 'RigSlot0'] = "RigSlot0";
        LocationFlagEnum[LocationFlagEnum["RigSlot1"] = 'RigSlot1'] = "RigSlot1";
        LocationFlagEnum[LocationFlagEnum["RigSlot2"] = 'RigSlot2'] = "RigSlot2";
        LocationFlagEnum[LocationFlagEnum["RigSlot3"] = 'RigSlot3'] = "RigSlot3";
        LocationFlagEnum[LocationFlagEnum["RigSlot4"] = 'RigSlot4'] = "RigSlot4";
        LocationFlagEnum[LocationFlagEnum["RigSlot5"] = 'RigSlot5'] = "RigSlot5";
        LocationFlagEnum[LocationFlagEnum["RigSlot6"] = 'RigSlot6'] = "RigSlot6";
        LocationFlagEnum[LocationFlagEnum["RigSlot7"] = 'RigSlot7'] = "RigSlot7";
        LocationFlagEnum[LocationFlagEnum["ShipHangar"] = 'ShipHangar'] = "ShipHangar";
        LocationFlagEnum[LocationFlagEnum["SpecializedFuelBay"] = 'SpecializedFuelBay'] = "SpecializedFuelBay";
        LocationFlagEnum[LocationFlagEnum["SpecializedOreHold"] = 'SpecializedOreHold'] = "SpecializedOreHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedGasHold"] = 'SpecializedGasHold'] = "SpecializedGasHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMineralHold"] = 'SpecializedMineralHold'] = "SpecializedMineralHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedSalvageHold"] = 'SpecializedSalvageHold'] = "SpecializedSalvageHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedShipHold"] = 'SpecializedShipHold'] = "SpecializedShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedSmallShipHold"] = 'SpecializedSmallShipHold'] = "SpecializedSmallShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMediumShipHold"] = 'SpecializedMediumShipHold'] = "SpecializedMediumShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedLargeShipHold"] = 'SpecializedLargeShipHold'] = "SpecializedLargeShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedIndustrialShipHold"] = 'SpecializedIndustrialShipHold'] = "SpecializedIndustrialShipHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedAmmoHold"] = 'SpecializedAmmoHold'] = "SpecializedAmmoHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedCommandCenterHold"] = 'SpecializedCommandCenterHold'] = "SpecializedCommandCenterHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedPlanetaryCommoditiesHold"] = 'SpecializedPlanetaryCommoditiesHold'] = "SpecializedPlanetaryCommoditiesHold";
        LocationFlagEnum[LocationFlagEnum["SpecializedMaterialBay"] = 'SpecializedMaterialBay'] = "SpecializedMaterialBay";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot0"] = 'SubSystemSlot0'] = "SubSystemSlot0";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot1"] = 'SubSystemSlot1'] = "SubSystemSlot1";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot2"] = 'SubSystemSlot2'] = "SubSystemSlot2";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot3"] = 'SubSystemSlot3'] = "SubSystemSlot3";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot4"] = 'SubSystemSlot4'] = "SubSystemSlot4";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot5"] = 'SubSystemSlot5'] = "SubSystemSlot5";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot6"] = 'SubSystemSlot6'] = "SubSystemSlot6";
        LocationFlagEnum[LocationFlagEnum["SubSystemSlot7"] = 'SubSystemSlot7'] = "SubSystemSlot7";
        LocationFlagEnum[LocationFlagEnum["FighterBay"] = 'FighterBay'] = "FighterBay";
        LocationFlagEnum[LocationFlagEnum["FighterTube0"] = 'FighterTube0'] = "FighterTube0";
        LocationFlagEnum[LocationFlagEnum["FighterTube1"] = 'FighterTube1'] = "FighterTube1";
        LocationFlagEnum[LocationFlagEnum["FighterTube2"] = 'FighterTube2'] = "FighterTube2";
        LocationFlagEnum[LocationFlagEnum["FighterTube3"] = 'FighterTube3'] = "FighterTube3";
        LocationFlagEnum[LocationFlagEnum["FighterTube4"] = 'FighterTube4'] = "FighterTube4";
        LocationFlagEnum[LocationFlagEnum["Module"] = 'Module'] = "Module";
        LocationFlagEnum[LocationFlagEnum["Wardrobe"] = 'Wardrobe'] = "Wardrobe";
    })(LocationFlagEnum = GetCharactersCharacterIdAssets200Ok.LocationFlagEnum || (GetCharactersCharacterIdAssets200Ok.LocationFlagEnum = {}));
    var LocationTypeEnum;
    (function (LocationTypeEnum) {
        LocationTypeEnum[LocationTypeEnum["Station"] = 'station'] = "Station";
        LocationTypeEnum[LocationTypeEnum["SolarSystem"] = 'solar_system'] = "SolarSystem";
        LocationTypeEnum[LocationTypeEnum["Other"] = 'other'] = "Other";
    })(LocationTypeEnum = GetCharactersCharacterIdAssets200Ok.LocationTypeEnum || (GetCharactersCharacterIdAssets200Ok.LocationTypeEnum = {}));
})(GetCharactersCharacterIdAssets200Ok = exports.GetCharactersCharacterIdAssets200Ok || (exports.GetCharactersCharacterIdAssets200Ok = {}));
/**
* Forbidden
*/
class GetCharactersCharacterIdAssetsForbidden {
}
exports.GetCharactersCharacterIdAssetsForbidden = GetCharactersCharacterIdAssetsForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdAssetsInternalServerError {
}
exports.GetCharactersCharacterIdAssetsInternalServerError = GetCharactersCharacterIdAssetsInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdBookmarks200Ok {
}
exports.GetCharactersCharacterIdBookmarks200Ok = GetCharactersCharacterIdBookmarks200Ok;
/**
* coordinates object
*/
class GetCharactersCharacterIdBookmarksCoordinates {
}
exports.GetCharactersCharacterIdBookmarksCoordinates = GetCharactersCharacterIdBookmarksCoordinates;
/**
* 200 ok object
*/
class GetCharactersCharacterIdBookmarksFolders200Ok {
}
exports.GetCharactersCharacterIdBookmarksFolders200Ok = GetCharactersCharacterIdBookmarksFolders200Ok;
/**
* Forbidden
*/
class GetCharactersCharacterIdBookmarksFoldersForbidden {
}
exports.GetCharactersCharacterIdBookmarksFoldersForbidden = GetCharactersCharacterIdBookmarksFoldersForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdBookmarksFoldersInternalServerError {
}
exports.GetCharactersCharacterIdBookmarksFoldersInternalServerError = GetCharactersCharacterIdBookmarksFoldersInternalServerError;
/**
* Forbidden
*/
class GetCharactersCharacterIdBookmarksForbidden {
}
exports.GetCharactersCharacterIdBookmarksForbidden = GetCharactersCharacterIdBookmarksForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdBookmarksInternalServerError {
}
exports.GetCharactersCharacterIdBookmarksInternalServerError = GetCharactersCharacterIdBookmarksInternalServerError;
/**
* item object
*/
class GetCharactersCharacterIdBookmarksItem {
}
exports.GetCharactersCharacterIdBookmarksItem = GetCharactersCharacterIdBookmarksItem;
/**
* target object
*/
class GetCharactersCharacterIdBookmarksTarget {
}
exports.GetCharactersCharacterIdBookmarksTarget = GetCharactersCharacterIdBookmarksTarget;
/**
* event
*/
class GetCharactersCharacterIdCalendar200Ok {
}
exports.GetCharactersCharacterIdCalendar200Ok = GetCharactersCharacterIdCalendar200Ok;
(function (GetCharactersCharacterIdCalendar200Ok) {
    var EventResponseEnum;
    (function (EventResponseEnum) {
        EventResponseEnum[EventResponseEnum["Declined"] = 'declined'] = "Declined";
        EventResponseEnum[EventResponseEnum["NotResponded"] = 'not_responded'] = "NotResponded";
        EventResponseEnum[EventResponseEnum["Accepted"] = 'accepted'] = "Accepted";
        EventResponseEnum[EventResponseEnum["Tentative"] = 'tentative'] = "Tentative";
    })(EventResponseEnum = GetCharactersCharacterIdCalendar200Ok.EventResponseEnum || (GetCharactersCharacterIdCalendar200Ok.EventResponseEnum = {}));
})(GetCharactersCharacterIdCalendar200Ok = exports.GetCharactersCharacterIdCalendar200Ok || (exports.GetCharactersCharacterIdCalendar200Ok = {}));
/**
* Forbidden
*/
class GetCharactersCharacterIdCalendarEventIdForbidden {
}
exports.GetCharactersCharacterIdCalendarEventIdForbidden = GetCharactersCharacterIdCalendarEventIdForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdCalendarEventIdInternalServerError {
}
exports.GetCharactersCharacterIdCalendarEventIdInternalServerError = GetCharactersCharacterIdCalendarEventIdInternalServerError;
/**
* Full details of a specific event
*/
class GetCharactersCharacterIdCalendarEventIdOk {
}
exports.GetCharactersCharacterIdCalendarEventIdOk = GetCharactersCharacterIdCalendarEventIdOk;
(function (GetCharactersCharacterIdCalendarEventIdOk) {
    var OwnerTypeEnum;
    (function (OwnerTypeEnum) {
        OwnerTypeEnum[OwnerTypeEnum["EveServer"] = 'eve_server'] = "EveServer";
        OwnerTypeEnum[OwnerTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        OwnerTypeEnum[OwnerTypeEnum["Faction"] = 'faction'] = "Faction";
        OwnerTypeEnum[OwnerTypeEnum["Character"] = 'character'] = "Character";
        OwnerTypeEnum[OwnerTypeEnum["Alliance"] = 'alliance'] = "Alliance";
    })(OwnerTypeEnum = GetCharactersCharacterIdCalendarEventIdOk.OwnerTypeEnum || (GetCharactersCharacterIdCalendarEventIdOk.OwnerTypeEnum = {}));
})(GetCharactersCharacterIdCalendarEventIdOk = exports.GetCharactersCharacterIdCalendarEventIdOk || (exports.GetCharactersCharacterIdCalendarEventIdOk = {}));
/**
* Forbidden
*/
class GetCharactersCharacterIdCalendarForbidden {
}
exports.GetCharactersCharacterIdCalendarForbidden = GetCharactersCharacterIdCalendarForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdCalendarInternalServerError {
}
exports.GetCharactersCharacterIdCalendarInternalServerError = GetCharactersCharacterIdCalendarInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdChatChannels200Ok {
}
exports.GetCharactersCharacterIdChatChannels200Ok = GetCharactersCharacterIdChatChannels200Ok;
/**
* allowed object
*/
class GetCharactersCharacterIdChatChannelsAllowed {
}
exports.GetCharactersCharacterIdChatChannelsAllowed = GetCharactersCharacterIdChatChannelsAllowed;
(function (GetCharactersCharacterIdChatChannelsAllowed) {
    var AccessorTypeEnum;
    (function (AccessorTypeEnum) {
        AccessorTypeEnum[AccessorTypeEnum["Character"] = 'character'] = "Character";
        AccessorTypeEnum[AccessorTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        AccessorTypeEnum[AccessorTypeEnum["Alliance"] = 'alliance'] = "Alliance";
    })(AccessorTypeEnum = GetCharactersCharacterIdChatChannelsAllowed.AccessorTypeEnum || (GetCharactersCharacterIdChatChannelsAllowed.AccessorTypeEnum = {}));
})(GetCharactersCharacterIdChatChannelsAllowed = exports.GetCharactersCharacterIdChatChannelsAllowed || (exports.GetCharactersCharacterIdChatChannelsAllowed = {}));
/**
* blocked object
*/
class GetCharactersCharacterIdChatChannelsBlocked {
}
exports.GetCharactersCharacterIdChatChannelsBlocked = GetCharactersCharacterIdChatChannelsBlocked;
(function (GetCharactersCharacterIdChatChannelsBlocked) {
    var AccessorTypeEnum;
    (function (AccessorTypeEnum) {
        AccessorTypeEnum[AccessorTypeEnum["Character"] = 'character'] = "Character";
        AccessorTypeEnum[AccessorTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        AccessorTypeEnum[AccessorTypeEnum["Alliance"] = 'alliance'] = "Alliance";
    })(AccessorTypeEnum = GetCharactersCharacterIdChatChannelsBlocked.AccessorTypeEnum || (GetCharactersCharacterIdChatChannelsBlocked.AccessorTypeEnum = {}));
})(GetCharactersCharacterIdChatChannelsBlocked = exports.GetCharactersCharacterIdChatChannelsBlocked || (exports.GetCharactersCharacterIdChatChannelsBlocked = {}));
/**
* Forbidden
*/
class GetCharactersCharacterIdChatChannelsForbidden {
}
exports.GetCharactersCharacterIdChatChannelsForbidden = GetCharactersCharacterIdChatChannelsForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdChatChannelsInternalServerError {
}
exports.GetCharactersCharacterIdChatChannelsInternalServerError = GetCharactersCharacterIdChatChannelsInternalServerError;
/**
* muted object
*/
class GetCharactersCharacterIdChatChannelsMuted {
}
exports.GetCharactersCharacterIdChatChannelsMuted = GetCharactersCharacterIdChatChannelsMuted;
(function (GetCharactersCharacterIdChatChannelsMuted) {
    var AccessorTypeEnum;
    (function (AccessorTypeEnum) {
        AccessorTypeEnum[AccessorTypeEnum["Character"] = 'character'] = "Character";
        AccessorTypeEnum[AccessorTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        AccessorTypeEnum[AccessorTypeEnum["Alliance"] = 'alliance'] = "Alliance";
    })(AccessorTypeEnum = GetCharactersCharacterIdChatChannelsMuted.AccessorTypeEnum || (GetCharactersCharacterIdChatChannelsMuted.AccessorTypeEnum = {}));
})(GetCharactersCharacterIdChatChannelsMuted = exports.GetCharactersCharacterIdChatChannelsMuted || (exports.GetCharactersCharacterIdChatChannelsMuted = {}));
/**
* operator object
*/
class GetCharactersCharacterIdChatChannelsOperator {
}
exports.GetCharactersCharacterIdChatChannelsOperator = GetCharactersCharacterIdChatChannelsOperator;
(function (GetCharactersCharacterIdChatChannelsOperator) {
    var AccessorTypeEnum;
    (function (AccessorTypeEnum) {
        AccessorTypeEnum[AccessorTypeEnum["Character"] = 'character'] = "Character";
        AccessorTypeEnum[AccessorTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        AccessorTypeEnum[AccessorTypeEnum["Alliance"] = 'alliance'] = "Alliance";
    })(AccessorTypeEnum = GetCharactersCharacterIdChatChannelsOperator.AccessorTypeEnum || (GetCharactersCharacterIdChatChannelsOperator.AccessorTypeEnum = {}));
})(GetCharactersCharacterIdChatChannelsOperator = exports.GetCharactersCharacterIdChatChannelsOperator || (exports.GetCharactersCharacterIdChatChannelsOperator = {}));
/**
* Forbidden
*/
class GetCharactersCharacterIdClonesForbidden {
}
exports.GetCharactersCharacterIdClonesForbidden = GetCharactersCharacterIdClonesForbidden;
/**
* home_location object
*/
class GetCharactersCharacterIdClonesHomeLocation {
}
exports.GetCharactersCharacterIdClonesHomeLocation = GetCharactersCharacterIdClonesHomeLocation;
(function (GetCharactersCharacterIdClonesHomeLocation) {
    var LocationTypeEnum;
    (function (LocationTypeEnum) {
        LocationTypeEnum[LocationTypeEnum["Station"] = 'station'] = "Station";
        LocationTypeEnum[LocationTypeEnum["Structure"] = 'structure'] = "Structure";
    })(LocationTypeEnum = GetCharactersCharacterIdClonesHomeLocation.LocationTypeEnum || (GetCharactersCharacterIdClonesHomeLocation.LocationTypeEnum = {}));
})(GetCharactersCharacterIdClonesHomeLocation = exports.GetCharactersCharacterIdClonesHomeLocation || (exports.GetCharactersCharacterIdClonesHomeLocation = {}));
/**
* Internal server error
*/
class GetCharactersCharacterIdClonesInternalServerError {
}
exports.GetCharactersCharacterIdClonesInternalServerError = GetCharactersCharacterIdClonesInternalServerError;
/**
* jump_clone object
*/
class GetCharactersCharacterIdClonesJumpClone {
}
exports.GetCharactersCharacterIdClonesJumpClone = GetCharactersCharacterIdClonesJumpClone;
(function (GetCharactersCharacterIdClonesJumpClone) {
    var LocationTypeEnum;
    (function (LocationTypeEnum) {
        LocationTypeEnum[LocationTypeEnum["Station"] = 'station'] = "Station";
        LocationTypeEnum[LocationTypeEnum["Structure"] = 'structure'] = "Structure";
    })(LocationTypeEnum = GetCharactersCharacterIdClonesJumpClone.LocationTypeEnum || (GetCharactersCharacterIdClonesJumpClone.LocationTypeEnum = {}));
})(GetCharactersCharacterIdClonesJumpClone = exports.GetCharactersCharacterIdClonesJumpClone || (exports.GetCharactersCharacterIdClonesJumpClone = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdClonesOk {
}
exports.GetCharactersCharacterIdClonesOk = GetCharactersCharacterIdClonesOk;
/**
* 200 ok object
*/
class GetCharactersCharacterIdContacts200Ok {
}
exports.GetCharactersCharacterIdContacts200Ok = GetCharactersCharacterIdContacts200Ok;
(function (GetCharactersCharacterIdContacts200Ok) {
    var ContactTypeEnum;
    (function (ContactTypeEnum) {
        ContactTypeEnum[ContactTypeEnum["Character"] = 'character'] = "Character";
        ContactTypeEnum[ContactTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        ContactTypeEnum[ContactTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        ContactTypeEnum[ContactTypeEnum["Faction"] = 'faction'] = "Faction";
    })(ContactTypeEnum = GetCharactersCharacterIdContacts200Ok.ContactTypeEnum || (GetCharactersCharacterIdContacts200Ok.ContactTypeEnum = {}));
})(GetCharactersCharacterIdContacts200Ok = exports.GetCharactersCharacterIdContacts200Ok || (exports.GetCharactersCharacterIdContacts200Ok = {}));
/**
* Forbidden
*/
class GetCharactersCharacterIdContactsForbidden {
}
exports.GetCharactersCharacterIdContactsForbidden = GetCharactersCharacterIdContactsForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdContactsInternalServerError {
}
exports.GetCharactersCharacterIdContactsInternalServerError = GetCharactersCharacterIdContactsInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdContactsLabels200Ok {
}
exports.GetCharactersCharacterIdContactsLabels200Ok = GetCharactersCharacterIdContactsLabels200Ok;
/**
* Forbidden
*/
class GetCharactersCharacterIdContactsLabelsForbidden {
}
exports.GetCharactersCharacterIdContactsLabelsForbidden = GetCharactersCharacterIdContactsLabelsForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdContactsLabelsInternalServerError {
}
exports.GetCharactersCharacterIdContactsLabelsInternalServerError = GetCharactersCharacterIdContactsLabelsInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdCorporationhistory200Ok {
}
exports.GetCharactersCharacterIdCorporationhistory200Ok = GetCharactersCharacterIdCorporationhistory200Ok;
/**
* Internal server error
*/
class GetCharactersCharacterIdCorporationhistoryInternalServerError {
}
exports.GetCharactersCharacterIdCorporationhistoryInternalServerError = GetCharactersCharacterIdCorporationhistoryInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdFittings200Ok {
}
exports.GetCharactersCharacterIdFittings200Ok = GetCharactersCharacterIdFittings200Ok;
/**
* Forbidden
*/
class GetCharactersCharacterIdFittingsForbidden {
}
exports.GetCharactersCharacterIdFittingsForbidden = GetCharactersCharacterIdFittingsForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdFittingsInternalServerError {
}
exports.GetCharactersCharacterIdFittingsInternalServerError = GetCharactersCharacterIdFittingsInternalServerError;
/**
* item object
*/
class GetCharactersCharacterIdFittingsItem {
}
exports.GetCharactersCharacterIdFittingsItem = GetCharactersCharacterIdFittingsItem;
/**
* Internal server error
*/
class GetCharactersCharacterIdInternalServerError {
}
exports.GetCharactersCharacterIdInternalServerError = GetCharactersCharacterIdInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdKillmailsRecent200Ok {
}
exports.GetCharactersCharacterIdKillmailsRecent200Ok = GetCharactersCharacterIdKillmailsRecent200Ok;
/**
* Forbidden
*/
class GetCharactersCharacterIdKillmailsRecentForbidden {
}
exports.GetCharactersCharacterIdKillmailsRecentForbidden = GetCharactersCharacterIdKillmailsRecentForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdKillmailsRecentInternalServerError {
}
exports.GetCharactersCharacterIdKillmailsRecentInternalServerError = GetCharactersCharacterIdKillmailsRecentInternalServerError;
/**
* Forbidden
*/
class GetCharactersCharacterIdLocationForbidden {
}
exports.GetCharactersCharacterIdLocationForbidden = GetCharactersCharacterIdLocationForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdLocationInternalServerError {
}
exports.GetCharactersCharacterIdLocationInternalServerError = GetCharactersCharacterIdLocationInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdLocationOk {
}
exports.GetCharactersCharacterIdLocationOk = GetCharactersCharacterIdLocationOk;
/**
* 200 ok object
*/
class GetCharactersCharacterIdLoyaltyPoints200Ok {
}
exports.GetCharactersCharacterIdLoyaltyPoints200Ok = GetCharactersCharacterIdLoyaltyPoints200Ok;
/**
* Forbidden
*/
class GetCharactersCharacterIdLoyaltyPointsForbidden {
}
exports.GetCharactersCharacterIdLoyaltyPointsForbidden = GetCharactersCharacterIdLoyaltyPointsForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdLoyaltyPointsInternalServerError {
}
exports.GetCharactersCharacterIdLoyaltyPointsInternalServerError = GetCharactersCharacterIdLoyaltyPointsInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdMail200Ok {
}
exports.GetCharactersCharacterIdMail200Ok = GetCharactersCharacterIdMail200Ok;
/**
* Forbidden
*/
class GetCharactersCharacterIdMailForbidden {
}
exports.GetCharactersCharacterIdMailForbidden = GetCharactersCharacterIdMailForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdMailInternalServerError {
}
exports.GetCharactersCharacterIdMailInternalServerError = GetCharactersCharacterIdMailInternalServerError;
/**
* Forbidden
*/
class GetCharactersCharacterIdMailLabelsForbidden {
}
exports.GetCharactersCharacterIdMailLabelsForbidden = GetCharactersCharacterIdMailLabelsForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdMailLabelsInternalServerError {
}
exports.GetCharactersCharacterIdMailLabelsInternalServerError = GetCharactersCharacterIdMailLabelsInternalServerError;
/**
* label object
*/
class GetCharactersCharacterIdMailLabelsLabel {
}
exports.GetCharactersCharacterIdMailLabelsLabel = GetCharactersCharacterIdMailLabelsLabel;
(function (GetCharactersCharacterIdMailLabelsLabel) {
    var ColorEnum;
    (function (ColorEnum) {
        ColorEnum[ColorEnum["Ffffff"] = '#ffffff'] = "Ffffff";
        ColorEnum[ColorEnum["Ffff01"] = '#ffff01'] = "Ffff01";
        ColorEnum[ColorEnum["Ff6600"] = '#ff6600'] = "Ff6600";
        ColorEnum[ColorEnum["Fe0000"] = '#fe0000'] = "Fe0000";
        ColorEnum[ColorEnum["_9a0000"] = '#9a0000'] = "_9a0000";
        ColorEnum[ColorEnum["_660066"] = '#660066'] = "_660066";
        ColorEnum[ColorEnum["_0000fe"] = '#0000fe'] = "_0000fe";
        ColorEnum[ColorEnum["_0099ff"] = '#0099ff'] = "_0099ff";
        ColorEnum[ColorEnum["_01ffff"] = '#01ffff'] = "_01ffff";
        ColorEnum[ColorEnum["_00ff33"] = '#00ff33'] = "_00ff33";
        ColorEnum[ColorEnum["_349800"] = '#349800'] = "_349800";
        ColorEnum[ColorEnum["_006634"] = '#006634'] = "_006634";
        ColorEnum[ColorEnum["_666666"] = '#666666'] = "_666666";
        ColorEnum[ColorEnum["_999999"] = '#999999'] = "_999999";
        ColorEnum[ColorEnum["E6e6e6"] = '#e6e6e6'] = "E6e6e6";
        ColorEnum[ColorEnum["Ffffcd"] = '#ffffcd'] = "Ffffcd";
        ColorEnum[ColorEnum["_99ffff"] = '#99ffff'] = "_99ffff";
        ColorEnum[ColorEnum["Ccff9a"] = '#ccff9a'] = "Ccff9a";
    })(ColorEnum = GetCharactersCharacterIdMailLabelsLabel.ColorEnum || (GetCharactersCharacterIdMailLabelsLabel.ColorEnum = {}));
})(GetCharactersCharacterIdMailLabelsLabel = exports.GetCharactersCharacterIdMailLabelsLabel || (exports.GetCharactersCharacterIdMailLabelsLabel = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdMailLabelsOk {
}
exports.GetCharactersCharacterIdMailLabelsOk = GetCharactersCharacterIdMailLabelsOk;
/**
* 200 ok object
*/
class GetCharactersCharacterIdMailLists200Ok {
}
exports.GetCharactersCharacterIdMailLists200Ok = GetCharactersCharacterIdMailLists200Ok;
/**
* Forbidden
*/
class GetCharactersCharacterIdMailListsForbidden {
}
exports.GetCharactersCharacterIdMailListsForbidden = GetCharactersCharacterIdMailListsForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdMailListsInternalServerError {
}
exports.GetCharactersCharacterIdMailListsInternalServerError = GetCharactersCharacterIdMailListsInternalServerError;
/**
* Forbidden
*/
class GetCharactersCharacterIdMailMailIdForbidden {
}
exports.GetCharactersCharacterIdMailMailIdForbidden = GetCharactersCharacterIdMailMailIdForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdMailMailIdInternalServerError {
}
exports.GetCharactersCharacterIdMailMailIdInternalServerError = GetCharactersCharacterIdMailMailIdInternalServerError;
/**
* Not found
*/
class GetCharactersCharacterIdMailMailIdNotFound {
}
exports.GetCharactersCharacterIdMailMailIdNotFound = GetCharactersCharacterIdMailMailIdNotFound;
/**
* 200 ok object
*/
class GetCharactersCharacterIdMailMailIdOk {
}
exports.GetCharactersCharacterIdMailMailIdOk = GetCharactersCharacterIdMailMailIdOk;
/**
* recipient object
*/
class GetCharactersCharacterIdMailMailIdRecipient {
}
exports.GetCharactersCharacterIdMailMailIdRecipient = GetCharactersCharacterIdMailMailIdRecipient;
(function (GetCharactersCharacterIdMailMailIdRecipient) {
    var RecipientTypeEnum;
    (function (RecipientTypeEnum) {
        RecipientTypeEnum[RecipientTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        RecipientTypeEnum[RecipientTypeEnum["Character"] = 'character'] = "Character";
        RecipientTypeEnum[RecipientTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        RecipientTypeEnum[RecipientTypeEnum["MailingList"] = 'mailing_list'] = "MailingList";
    })(RecipientTypeEnum = GetCharactersCharacterIdMailMailIdRecipient.RecipientTypeEnum || (GetCharactersCharacterIdMailMailIdRecipient.RecipientTypeEnum = {}));
})(GetCharactersCharacterIdMailMailIdRecipient = exports.GetCharactersCharacterIdMailMailIdRecipient || (exports.GetCharactersCharacterIdMailMailIdRecipient = {}));
/**
* recipient object
*/
class GetCharactersCharacterIdMailRecipient {
}
exports.GetCharactersCharacterIdMailRecipient = GetCharactersCharacterIdMailRecipient;
(function (GetCharactersCharacterIdMailRecipient) {
    var RecipientTypeEnum;
    (function (RecipientTypeEnum) {
        RecipientTypeEnum[RecipientTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        RecipientTypeEnum[RecipientTypeEnum["Character"] = 'character'] = "Character";
        RecipientTypeEnum[RecipientTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        RecipientTypeEnum[RecipientTypeEnum["MailingList"] = 'mailing_list'] = "MailingList";
    })(RecipientTypeEnum = GetCharactersCharacterIdMailRecipient.RecipientTypeEnum || (GetCharactersCharacterIdMailRecipient.RecipientTypeEnum = {}));
})(GetCharactersCharacterIdMailRecipient = exports.GetCharactersCharacterIdMailRecipient || (exports.GetCharactersCharacterIdMailRecipient = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdMedals200Ok {
}
exports.GetCharactersCharacterIdMedals200Ok = GetCharactersCharacterIdMedals200Ok;
(function (GetCharactersCharacterIdMedals200Ok) {
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Public"] = 'public'] = "Public";
        StatusEnum[StatusEnum["Private"] = 'private'] = "Private";
    })(StatusEnum = GetCharactersCharacterIdMedals200Ok.StatusEnum || (GetCharactersCharacterIdMedals200Ok.StatusEnum = {}));
})(GetCharactersCharacterIdMedals200Ok = exports.GetCharactersCharacterIdMedals200Ok || (exports.GetCharactersCharacterIdMedals200Ok = {}));
/**
* Forbidden
*/
class GetCharactersCharacterIdMedalsForbidden {
}
exports.GetCharactersCharacterIdMedalsForbidden = GetCharactersCharacterIdMedalsForbidden;
/**
* graphic object
*/
class GetCharactersCharacterIdMedalsGraphic {
}
exports.GetCharactersCharacterIdMedalsGraphic = GetCharactersCharacterIdMedalsGraphic;
/**
* Internal server error
*/
class GetCharactersCharacterIdMedalsInternalServerError {
}
exports.GetCharactersCharacterIdMedalsInternalServerError = GetCharactersCharacterIdMedalsInternalServerError;
/**
* Not found
*/
class GetCharactersCharacterIdNotFound {
}
exports.GetCharactersCharacterIdNotFound = GetCharactersCharacterIdNotFound;
/**
* 200 ok object
*/
class GetCharactersCharacterIdOk {
}
exports.GetCharactersCharacterIdOk = GetCharactersCharacterIdOk;
(function (GetCharactersCharacterIdOk) {
    var GenderEnum;
    (function (GenderEnum) {
        GenderEnum[GenderEnum["Female"] = 'female'] = "Female";
        GenderEnum[GenderEnum["Male"] = 'male'] = "Male";
    })(GenderEnum = GetCharactersCharacterIdOk.GenderEnum || (GetCharactersCharacterIdOk.GenderEnum = {}));
})(GetCharactersCharacterIdOk = exports.GetCharactersCharacterIdOk || (exports.GetCharactersCharacterIdOk = {}));
/**
* 200 ok object
*/
class GetCharactersCharacterIdOpportunities200Ok {
}
exports.GetCharactersCharacterIdOpportunities200Ok = GetCharactersCharacterIdOpportunities200Ok;
/**
* Forbidden
*/
class GetCharactersCharacterIdOpportunitiesForbidden {
}
exports.GetCharactersCharacterIdOpportunitiesForbidden = GetCharactersCharacterIdOpportunitiesForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdOpportunitiesInternalServerError {
}
exports.GetCharactersCharacterIdOpportunitiesInternalServerError = GetCharactersCharacterIdOpportunitiesInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdPlanets200Ok {
}
exports.GetCharactersCharacterIdPlanets200Ok = GetCharactersCharacterIdPlanets200Ok;
(function (GetCharactersCharacterIdPlanets200Ok) {
    var PlanetTypeEnum;
    (function (PlanetTypeEnum) {
        PlanetTypeEnum[PlanetTypeEnum["Temperate"] = 'temperate'] = "Temperate";
        PlanetTypeEnum[PlanetTypeEnum["Barren"] = 'barren'] = "Barren";
        PlanetTypeEnum[PlanetTypeEnum["Oceanic"] = 'oceanic'] = "Oceanic";
        PlanetTypeEnum[PlanetTypeEnum["Ice"] = 'ice'] = "Ice";
        PlanetTypeEnum[PlanetTypeEnum["Gas"] = 'gas'] = "Gas";
        PlanetTypeEnum[PlanetTypeEnum["Lava"] = 'lava'] = "Lava";
        PlanetTypeEnum[PlanetTypeEnum["Storm"] = 'storm'] = "Storm";
        PlanetTypeEnum[PlanetTypeEnum["Plasma"] = 'plasma'] = "Plasma";
    })(PlanetTypeEnum = GetCharactersCharacterIdPlanets200Ok.PlanetTypeEnum || (GetCharactersCharacterIdPlanets200Ok.PlanetTypeEnum = {}));
})(GetCharactersCharacterIdPlanets200Ok = exports.GetCharactersCharacterIdPlanets200Ok || (exports.GetCharactersCharacterIdPlanets200Ok = {}));
/**
* Forbidden
*/
class GetCharactersCharacterIdPlanetsForbidden {
}
exports.GetCharactersCharacterIdPlanetsForbidden = GetCharactersCharacterIdPlanetsForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdPlanetsInternalServerError {
}
exports.GetCharactersCharacterIdPlanetsInternalServerError = GetCharactersCharacterIdPlanetsInternalServerError;
/**
* extractor_details object
*/
class GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails = GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails;
/**
* factory_details object
*/
class GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails = GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails;
/**
* Forbidden
*/
class GetCharactersCharacterIdPlanetsPlanetIdForbidden {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdForbidden = GetCharactersCharacterIdPlanetsPlanetIdForbidden;
/**
* head object
*/
class GetCharactersCharacterIdPlanetsPlanetIdHead {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdHead = GetCharactersCharacterIdPlanetsPlanetIdHead;
/**
* Internal server error
*/
class GetCharactersCharacterIdPlanetsPlanetIdInternalServerError {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdInternalServerError = GetCharactersCharacterIdPlanetsPlanetIdInternalServerError;
/**
* link object
*/
class GetCharactersCharacterIdPlanetsPlanetIdLink {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdLink = GetCharactersCharacterIdPlanetsPlanetIdLink;
/**
* Colony not found
*/
class GetCharactersCharacterIdPlanetsPlanetIdNotFound {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdNotFound = GetCharactersCharacterIdPlanetsPlanetIdNotFound;
/**
* 200 ok object
*/
class GetCharactersCharacterIdPlanetsPlanetIdOk {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdOk = GetCharactersCharacterIdPlanetsPlanetIdOk;
/**
* pin object
*/
class GetCharactersCharacterIdPlanetsPlanetIdPin {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdPin = GetCharactersCharacterIdPlanetsPlanetIdPin;
/**
* route object
*/
class GetCharactersCharacterIdPlanetsPlanetIdRoute {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdRoute = GetCharactersCharacterIdPlanetsPlanetIdRoute;
/**
* waypoint object
*/
class GetCharactersCharacterIdPlanetsPlanetIdWaypoint {
}
exports.GetCharactersCharacterIdPlanetsPlanetIdWaypoint = GetCharactersCharacterIdPlanetsPlanetIdWaypoint;
/**
* Internal server error
*/
class GetCharactersCharacterIdPortraitInternalServerError {
}
exports.GetCharactersCharacterIdPortraitInternalServerError = GetCharactersCharacterIdPortraitInternalServerError;
/**
* No image server for this datasource
*/
class GetCharactersCharacterIdPortraitNotFound {
}
exports.GetCharactersCharacterIdPortraitNotFound = GetCharactersCharacterIdPortraitNotFound;
/**
* 200 ok object
*/
class GetCharactersCharacterIdPortraitOk {
}
exports.GetCharactersCharacterIdPortraitOk = GetCharactersCharacterIdPortraitOk;
/**
* Forbidden
*/
class GetCharactersCharacterIdSearchForbidden {
}
exports.GetCharactersCharacterIdSearchForbidden = GetCharactersCharacterIdSearchForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdSearchInternalServerError {
}
exports.GetCharactersCharacterIdSearchInternalServerError = GetCharactersCharacterIdSearchInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdSearchOk {
}
exports.GetCharactersCharacterIdSearchOk = GetCharactersCharacterIdSearchOk;
/**
* Forbidden
*/
class GetCharactersCharacterIdShipForbidden {
}
exports.GetCharactersCharacterIdShipForbidden = GetCharactersCharacterIdShipForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdShipInternalServerError {
}
exports.GetCharactersCharacterIdShipInternalServerError = GetCharactersCharacterIdShipInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdShipOk {
}
exports.GetCharactersCharacterIdShipOk = GetCharactersCharacterIdShipOk;
/**
* 200 ok object
*/
class GetCharactersCharacterIdSkillqueue200Ok {
}
exports.GetCharactersCharacterIdSkillqueue200Ok = GetCharactersCharacterIdSkillqueue200Ok;
/**
* Forbidden
*/
class GetCharactersCharacterIdSkillqueueForbidden {
}
exports.GetCharactersCharacterIdSkillqueueForbidden = GetCharactersCharacterIdSkillqueueForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdSkillqueueInternalServerError {
}
exports.GetCharactersCharacterIdSkillqueueInternalServerError = GetCharactersCharacterIdSkillqueueInternalServerError;
/**
* Forbidden
*/
class GetCharactersCharacterIdSkillsForbidden {
}
exports.GetCharactersCharacterIdSkillsForbidden = GetCharactersCharacterIdSkillsForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdSkillsInternalServerError {
}
exports.GetCharactersCharacterIdSkillsInternalServerError = GetCharactersCharacterIdSkillsInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdSkillsOk {
}
exports.GetCharactersCharacterIdSkillsOk = GetCharactersCharacterIdSkillsOk;
/**
* skill object
*/
class GetCharactersCharacterIdSkillsSkill {
}
exports.GetCharactersCharacterIdSkillsSkill = GetCharactersCharacterIdSkillsSkill;
/**
* 200 ok object
*/
class GetCharactersCharacterIdStandings200Ok {
}
exports.GetCharactersCharacterIdStandings200Ok = GetCharactersCharacterIdStandings200Ok;
(function (GetCharactersCharacterIdStandings200Ok) {
    var FromTypeEnum;
    (function (FromTypeEnum) {
        FromTypeEnum[FromTypeEnum["Agent"] = 'agent'] = "Agent";
        FromTypeEnum[FromTypeEnum["NpcCorp"] = 'npc_corp'] = "NpcCorp";
        FromTypeEnum[FromTypeEnum["Faction"] = 'faction'] = "Faction";
    })(FromTypeEnum = GetCharactersCharacterIdStandings200Ok.FromTypeEnum || (GetCharactersCharacterIdStandings200Ok.FromTypeEnum = {}));
})(GetCharactersCharacterIdStandings200Ok = exports.GetCharactersCharacterIdStandings200Ok || (exports.GetCharactersCharacterIdStandings200Ok = {}));
/**
* Forbidden
*/
class GetCharactersCharacterIdStandingsForbidden {
}
exports.GetCharactersCharacterIdStandingsForbidden = GetCharactersCharacterIdStandingsForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdStandingsInternalServerError {
}
exports.GetCharactersCharacterIdStandingsInternalServerError = GetCharactersCharacterIdStandingsInternalServerError;
/**
* 200 ok object
*/
class GetCharactersCharacterIdWallets200Ok {
}
exports.GetCharactersCharacterIdWallets200Ok = GetCharactersCharacterIdWallets200Ok;
/**
* Forbidden
*/
class GetCharactersCharacterIdWalletsForbidden {
}
exports.GetCharactersCharacterIdWalletsForbidden = GetCharactersCharacterIdWalletsForbidden;
/**
* Internal server error
*/
class GetCharactersCharacterIdWalletsInternalServerError {
}
exports.GetCharactersCharacterIdWalletsInternalServerError = GetCharactersCharacterIdWalletsInternalServerError;
/**
* 200 ok object
*/
class GetCharactersNames200Ok {
}
exports.GetCharactersNames200Ok = GetCharactersNames200Ok;
/**
* Internal server error
*/
class GetCharactersNamesInternalServerError {
}
exports.GetCharactersNamesInternalServerError = GetCharactersNamesInternalServerError;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdAlliancehistory200Ok {
}
exports.GetCorporationsCorporationIdAlliancehistory200Ok = GetCorporationsCorporationIdAlliancehistory200Ok;
/**
* alliance object
*/
class GetCorporationsCorporationIdAlliancehistoryAlliance {
}
exports.GetCorporationsCorporationIdAlliancehistoryAlliance = GetCorporationsCorporationIdAlliancehistoryAlliance;
/**
* Internal server error
*/
class GetCorporationsCorporationIdAlliancehistoryInternalServerError {
}
exports.GetCorporationsCorporationIdAlliancehistoryInternalServerError = GetCorporationsCorporationIdAlliancehistoryInternalServerError;
/**
* Internal server error
*/
class GetCorporationsCorporationIdIconsInternalServerError {
}
exports.GetCorporationsCorporationIdIconsInternalServerError = GetCorporationsCorporationIdIconsInternalServerError;
/**
* No image server for this datasource
*/
class GetCorporationsCorporationIdIconsNotFound {
}
exports.GetCorporationsCorporationIdIconsNotFound = GetCorporationsCorporationIdIconsNotFound;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdIconsOk {
}
exports.GetCorporationsCorporationIdIconsOk = GetCorporationsCorporationIdIconsOk;
/**
* Internal server error
*/
class GetCorporationsCorporationIdInternalServerError {
}
exports.GetCorporationsCorporationIdInternalServerError = GetCorporationsCorporationIdInternalServerError;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdMembers200Ok {
}
exports.GetCorporationsCorporationIdMembers200Ok = GetCorporationsCorporationIdMembers200Ok;
/**
* Forbidden
*/
class GetCorporationsCorporationIdMembersForbidden {
}
exports.GetCorporationsCorporationIdMembersForbidden = GetCorporationsCorporationIdMembersForbidden;
/**
* Internal server error
*/
class GetCorporationsCorporationIdMembersInternalServerError {
}
exports.GetCorporationsCorporationIdMembersInternalServerError = GetCorporationsCorporationIdMembersInternalServerError;
/**
* Not found
*/
class GetCorporationsCorporationIdNotFound {
}
exports.GetCorporationsCorporationIdNotFound = GetCorporationsCorporationIdNotFound;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdOk {
}
exports.GetCorporationsCorporationIdOk = GetCorporationsCorporationIdOk;
(function (GetCorporationsCorporationIdOk) {
    var FactionEnum;
    (function (FactionEnum) {
        FactionEnum[FactionEnum["Minmatar"] = 'Minmatar'] = "Minmatar";
        FactionEnum[FactionEnum["Gallente"] = 'Gallente'] = "Gallente";
        FactionEnum[FactionEnum["Caldari"] = 'Caldari'] = "Caldari";
        FactionEnum[FactionEnum["Amarr"] = 'Amarr'] = "Amarr";
    })(FactionEnum = GetCorporationsCorporationIdOk.FactionEnum || (GetCorporationsCorporationIdOk.FactionEnum = {}));
})(GetCorporationsCorporationIdOk = exports.GetCorporationsCorporationIdOk || (exports.GetCorporationsCorporationIdOk = {}));
/**
* 200 ok object
*/
class GetCorporationsCorporationIdRoles200Ok {
}
exports.GetCorporationsCorporationIdRoles200Ok = GetCorporationsCorporationIdRoles200Ok;
(function (GetCorporationsCorporationIdRoles200Ok) {
    var GrantableRolesEnum;
    (function (GrantableRolesEnum) {
        GrantableRolesEnum[GrantableRolesEnum["Director"] = 'Director'] = "Director";
        GrantableRolesEnum[GrantableRolesEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        GrantableRolesEnum[GrantableRolesEnum["Accountant"] = 'Accountant'] = "Accountant";
        GrantableRolesEnum[GrantableRolesEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        GrantableRolesEnum[GrantableRolesEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        GrantableRolesEnum[GrantableRolesEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        GrantableRolesEnum[GrantableRolesEnum["Auditor"] = 'Auditor'] = "Auditor";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        GrantableRolesEnum[GrantableRolesEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        GrantableRolesEnum[GrantableRolesEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        GrantableRolesEnum[GrantableRolesEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        GrantableRolesEnum[GrantableRolesEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        GrantableRolesEnum[GrantableRolesEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        GrantableRolesEnum[GrantableRolesEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        GrantableRolesEnum[GrantableRolesEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        GrantableRolesEnum[GrantableRolesEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        GrantableRolesEnum[GrantableRolesEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        GrantableRolesEnum[GrantableRolesEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        GrantableRolesEnum[GrantableRolesEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        GrantableRolesEnum[GrantableRolesEnum["Trader"] = 'Trader'] = "Trader";
        GrantableRolesEnum[GrantableRolesEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        GrantableRolesEnum[GrantableRolesEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        GrantableRolesEnum[GrantableRolesEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        GrantableRolesEnum[GrantableRolesEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        GrantableRolesEnum[GrantableRolesEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        GrantableRolesEnum[GrantableRolesEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        GrantableRolesEnum[GrantableRolesEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
    })(GrantableRolesEnum = GetCorporationsCorporationIdRoles200Ok.GrantableRolesEnum || (GetCorporationsCorporationIdRoles200Ok.GrantableRolesEnum = {}));
    var GrantableRolesAtBaseEnum;
    (function (GrantableRolesAtBaseEnum) {
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Director"] = 'Director'] = "Director";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Accountant"] = 'Accountant'] = "Accountant";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Auditor"] = 'Auditor'] = "Auditor";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["Trader"] = 'Trader'] = "Trader";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        GrantableRolesAtBaseEnum[GrantableRolesAtBaseEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
    })(GrantableRolesAtBaseEnum = GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtBaseEnum || (GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtBaseEnum = {}));
    var GrantableRolesAtHqEnum;
    (function (GrantableRolesAtHqEnum) {
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Director"] = 'Director'] = "Director";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Accountant"] = 'Accountant'] = "Accountant";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Auditor"] = 'Auditor'] = "Auditor";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["Trader"] = 'Trader'] = "Trader";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        GrantableRolesAtHqEnum[GrantableRolesAtHqEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
    })(GrantableRolesAtHqEnum = GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtHqEnum || (GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtHqEnum = {}));
    var GrantableRolesAtOtherEnum;
    (function (GrantableRolesAtOtherEnum) {
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Director"] = 'Director'] = "Director";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Accountant"] = 'Accountant'] = "Accountant";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Auditor"] = 'Auditor'] = "Auditor";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["Trader"] = 'Trader'] = "Trader";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        GrantableRolesAtOtherEnum[GrantableRolesAtOtherEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
    })(GrantableRolesAtOtherEnum = GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtOtherEnum || (GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtOtherEnum = {}));
    var RolesEnum;
    (function (RolesEnum) {
        RolesEnum[RolesEnum["Director"] = 'Director'] = "Director";
        RolesEnum[RolesEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesEnum[RolesEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesEnum[RolesEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesEnum[RolesEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesEnum[RolesEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesEnum[RolesEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesEnum[RolesEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesEnum[RolesEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesEnum[RolesEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesEnum[RolesEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesEnum[RolesEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesEnum[RolesEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesEnum[RolesEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesEnum[RolesEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesEnum[RolesEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesEnum[RolesEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesEnum[RolesEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesEnum[RolesEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesEnum[RolesEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesEnum[RolesEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesEnum[RolesEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesEnum[RolesEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesEnum[RolesEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesEnum[RolesEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesEnum[RolesEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesEnum[RolesEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesEnum[RolesEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesEnum[RolesEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesEnum[RolesEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesEnum[RolesEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesEnum[RolesEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesEnum[RolesEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesEnum[RolesEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesEnum[RolesEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesEnum[RolesEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesEnum[RolesEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesEnum[RolesEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesEnum[RolesEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesEnum[RolesEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesEnum[RolesEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesEnum[RolesEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesEnum[RolesEnum["Trader"] = 'Trader'] = "Trader";
        RolesEnum[RolesEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesEnum[RolesEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesEnum[RolesEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesEnum[RolesEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesEnum[RolesEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesEnum[RolesEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesEnum[RolesEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
    })(RolesEnum = GetCorporationsCorporationIdRoles200Ok.RolesEnum || (GetCorporationsCorporationIdRoles200Ok.RolesEnum = {}));
    var RolesAtBaseEnum;
    (function (RolesAtBaseEnum) {
        RolesAtBaseEnum[RolesAtBaseEnum["Director"] = 'Director'] = "Director";
        RolesAtBaseEnum[RolesAtBaseEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesAtBaseEnum[RolesAtBaseEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesAtBaseEnum[RolesAtBaseEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesAtBaseEnum[RolesAtBaseEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesAtBaseEnum[RolesAtBaseEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesAtBaseEnum[RolesAtBaseEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesAtBaseEnum[RolesAtBaseEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesAtBaseEnum[RolesAtBaseEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesAtBaseEnum[RolesAtBaseEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesAtBaseEnum[RolesAtBaseEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesAtBaseEnum[RolesAtBaseEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesAtBaseEnum[RolesAtBaseEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesAtBaseEnum[RolesAtBaseEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesAtBaseEnum[RolesAtBaseEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesAtBaseEnum[RolesAtBaseEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesAtBaseEnum[RolesAtBaseEnum["Trader"] = 'Trader'] = "Trader";
        RolesAtBaseEnum[RolesAtBaseEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesAtBaseEnum[RolesAtBaseEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesAtBaseEnum[RolesAtBaseEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesAtBaseEnum[RolesAtBaseEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesAtBaseEnum[RolesAtBaseEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesAtBaseEnum[RolesAtBaseEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
    })(RolesAtBaseEnum = GetCorporationsCorporationIdRoles200Ok.RolesAtBaseEnum || (GetCorporationsCorporationIdRoles200Ok.RolesAtBaseEnum = {}));
    var RolesAtHqEnum;
    (function (RolesAtHqEnum) {
        RolesAtHqEnum[RolesAtHqEnum["Director"] = 'Director'] = "Director";
        RolesAtHqEnum[RolesAtHqEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesAtHqEnum[RolesAtHqEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesAtHqEnum[RolesAtHqEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesAtHqEnum[RolesAtHqEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesAtHqEnum[RolesAtHqEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesAtHqEnum[RolesAtHqEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesAtHqEnum[RolesAtHqEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesAtHqEnum[RolesAtHqEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesAtHqEnum[RolesAtHqEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesAtHqEnum[RolesAtHqEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesAtHqEnum[RolesAtHqEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesAtHqEnum[RolesAtHqEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesAtHqEnum[RolesAtHqEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesAtHqEnum[RolesAtHqEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesAtHqEnum[RolesAtHqEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesAtHqEnum[RolesAtHqEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesAtHqEnum[RolesAtHqEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesAtHqEnum[RolesAtHqEnum["Trader"] = 'Trader'] = "Trader";
        RolesAtHqEnum[RolesAtHqEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesAtHqEnum[RolesAtHqEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesAtHqEnum[RolesAtHqEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesAtHqEnum[RolesAtHqEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesAtHqEnum[RolesAtHqEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesAtHqEnum[RolesAtHqEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesAtHqEnum[RolesAtHqEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
    })(RolesAtHqEnum = GetCorporationsCorporationIdRoles200Ok.RolesAtHqEnum || (GetCorporationsCorporationIdRoles200Ok.RolesAtHqEnum = {}));
    var RolesAtOtherEnum;
    (function (RolesAtOtherEnum) {
        RolesAtOtherEnum[RolesAtOtherEnum["Director"] = 'Director'] = "Director";
        RolesAtOtherEnum[RolesAtOtherEnum["PersonnelManager"] = 'Personnel_Manager'] = "PersonnelManager";
        RolesAtOtherEnum[RolesAtOtherEnum["Accountant"] = 'Accountant'] = "Accountant";
        RolesAtOtherEnum[RolesAtOtherEnum["SecurityOfficer"] = 'Security_Officer'] = "SecurityOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["FactoryManager"] = 'Factory_Manager'] = "FactoryManager";
        RolesAtOtherEnum[RolesAtOtherEnum["StationManager"] = 'Station_Manager'] = "StationManager";
        RolesAtOtherEnum[RolesAtOtherEnum["Auditor"] = 'Auditor'] = "Auditor";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake1"] = 'Hangar_Take_1'] = "HangarTake1";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake2"] = 'Hangar_Take_2'] = "HangarTake2";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake3"] = 'Hangar_Take_3'] = "HangarTake3";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake4"] = 'Hangar_Take_4'] = "HangarTake4";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake5"] = 'Hangar_Take_5'] = "HangarTake5";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake6"] = 'Hangar_Take_6'] = "HangarTake6";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarTake7"] = 'Hangar_Take_7'] = "HangarTake7";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery1"] = 'Hangar_Query_1'] = "HangarQuery1";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery2"] = 'Hangar_Query_2'] = "HangarQuery2";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery3"] = 'Hangar_Query_3'] = "HangarQuery3";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery4"] = 'Hangar_Query_4'] = "HangarQuery4";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery5"] = 'Hangar_Query_5'] = "HangarQuery5";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery6"] = 'Hangar_Query_6'] = "HangarQuery6";
        RolesAtOtherEnum[RolesAtOtherEnum["HangarQuery7"] = 'Hangar_Query_7'] = "HangarQuery7";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake1"] = 'Account_Take_1'] = "AccountTake1";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake2"] = 'Account_Take_2'] = "AccountTake2";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake3"] = 'Account_Take_3'] = "AccountTake3";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake4"] = 'Account_Take_4'] = "AccountTake4";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake5"] = 'Account_Take_5'] = "AccountTake5";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake6"] = 'Account_Take_6'] = "AccountTake6";
        RolesAtOtherEnum[RolesAtOtherEnum["AccountTake7"] = 'Account_Take_7'] = "AccountTake7";
        RolesAtOtherEnum[RolesAtOtherEnum["Diplomat"] = 'Diplomat'] = "Diplomat";
        RolesAtOtherEnum[RolesAtOtherEnum["ConfigEquipment"] = 'Config_Equipment'] = "ConfigEquipment";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake1"] = 'Container_Take_1'] = "ContainerTake1";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake2"] = 'Container_Take_2'] = "ContainerTake2";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake3"] = 'Container_Take_3'] = "ContainerTake3";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake4"] = 'Container_Take_4'] = "ContainerTake4";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake5"] = 'Container_Take_5'] = "ContainerTake5";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake6"] = 'Container_Take_6'] = "ContainerTake6";
        RolesAtOtherEnum[RolesAtOtherEnum["ContainerTake7"] = 'Container_Take_7'] = "ContainerTake7";
        RolesAtOtherEnum[RolesAtOtherEnum["RentOffice"] = 'Rent_Office'] = "RentOffice";
        RolesAtOtherEnum[RolesAtOtherEnum["RentFactoryFacility"] = 'Rent_Factory_Facility'] = "RentFactoryFacility";
        RolesAtOtherEnum[RolesAtOtherEnum["RentResearchFacility"] = 'Rent_Research_Facility'] = "RentResearchFacility";
        RolesAtOtherEnum[RolesAtOtherEnum["JuniorAccountant"] = 'Junior_Accountant'] = "JuniorAccountant";
        RolesAtOtherEnum[RolesAtOtherEnum["ConfigStarbaseEquipment"] = 'Config_Starbase_Equipment'] = "ConfigStarbaseEquipment";
        RolesAtOtherEnum[RolesAtOtherEnum["Trader"] = 'Trader'] = "Trader";
        RolesAtOtherEnum[RolesAtOtherEnum["CommunicationsOfficer"] = 'Communications_Officer'] = "CommunicationsOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["ContractManager"] = 'Contract_Manager'] = "ContractManager";
        RolesAtOtherEnum[RolesAtOtherEnum["StarbaseDefenseOperator"] = 'Starbase_Defense_Operator'] = "StarbaseDefenseOperator";
        RolesAtOtherEnum[RolesAtOtherEnum["StarbaseFuelTechnician"] = 'Starbase_Fuel_Technician'] = "StarbaseFuelTechnician";
        RolesAtOtherEnum[RolesAtOtherEnum["FittingManager"] = 'Fitting_Manager'] = "FittingManager";
        RolesAtOtherEnum[RolesAtOtherEnum["TerrestrialCombatOfficer"] = 'Terrestrial_Combat_Officer'] = "TerrestrialCombatOfficer";
        RolesAtOtherEnum[RolesAtOtherEnum["TerrestrialLogisticsOfficer"] = 'Terrestrial_Logistics_Officer'] = "TerrestrialLogisticsOfficer";
    })(RolesAtOtherEnum = GetCorporationsCorporationIdRoles200Ok.RolesAtOtherEnum || (GetCorporationsCorporationIdRoles200Ok.RolesAtOtherEnum = {}));
})(GetCorporationsCorporationIdRoles200Ok = exports.GetCorporationsCorporationIdRoles200Ok || (exports.GetCorporationsCorporationIdRoles200Ok = {}));
/**
* Forbidden
*/
class GetCorporationsCorporationIdRolesForbidden {
}
exports.GetCorporationsCorporationIdRolesForbidden = GetCorporationsCorporationIdRolesForbidden;
/**
* Internal server error
*/
class GetCorporationsCorporationIdRolesInternalServerError {
}
exports.GetCorporationsCorporationIdRolesInternalServerError = GetCorporationsCorporationIdRolesInternalServerError;
/**
* 200 ok object
*/
class GetCorporationsCorporationIdStructures200Ok {
}
exports.GetCorporationsCorporationIdStructures200Ok = GetCorporationsCorporationIdStructures200Ok;
/**
* current_vul object
*/
class GetCorporationsCorporationIdStructuresCurrentVul {
}
exports.GetCorporationsCorporationIdStructuresCurrentVul = GetCorporationsCorporationIdStructuresCurrentVul;
/**
* Forbidden
*/
class GetCorporationsCorporationIdStructuresForbidden {
}
exports.GetCorporationsCorporationIdStructuresForbidden = GetCorporationsCorporationIdStructuresForbidden;
/**
* Internal server error
*/
class GetCorporationsCorporationIdStructuresInternalServerError {
}
exports.GetCorporationsCorporationIdStructuresInternalServerError = GetCorporationsCorporationIdStructuresInternalServerError;
/**
* next_vul object
*/
class GetCorporationsCorporationIdStructuresNextVul {
}
exports.GetCorporationsCorporationIdStructuresNextVul = GetCorporationsCorporationIdStructuresNextVul;
/**
* service object
*/
class GetCorporationsCorporationIdStructuresService {
}
exports.GetCorporationsCorporationIdStructuresService = GetCorporationsCorporationIdStructuresService;
(function (GetCorporationsCorporationIdStructuresService) {
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["Online"] = 'online'] = "Online";
        StateEnum[StateEnum["Offline"] = 'offline'] = "Offline";
        StateEnum[StateEnum["Cleanup"] = 'cleanup'] = "Cleanup";
    })(StateEnum = GetCorporationsCorporationIdStructuresService.StateEnum || (GetCorporationsCorporationIdStructuresService.StateEnum = {}));
})(GetCorporationsCorporationIdStructuresService = exports.GetCorporationsCorporationIdStructuresService || (exports.GetCorporationsCorporationIdStructuresService = {}));
/**
* 200 ok object
*/
class GetCorporationsNames200Ok {
}
exports.GetCorporationsNames200Ok = GetCorporationsNames200Ok;
/**
* Internal server error
*/
class GetCorporationsNamesInternalServerError {
}
exports.GetCorporationsNamesInternalServerError = GetCorporationsNamesInternalServerError;
/**
* Internal server error
*/
class GetCorporationsNpccorpsInternalServerError {
}
exports.GetCorporationsNpccorpsInternalServerError = GetCorporationsNpccorpsInternalServerError;
/**
* Internal server error
*/
class GetDogmaAttributesAttributeIdInternalServerError {
}
exports.GetDogmaAttributesAttributeIdInternalServerError = GetDogmaAttributesAttributeIdInternalServerError;
/**
* Not found
*/
class GetDogmaAttributesAttributeIdNotFound {
}
exports.GetDogmaAttributesAttributeIdNotFound = GetDogmaAttributesAttributeIdNotFound;
/**
* 200 ok object
*/
class GetDogmaAttributesAttributeIdOk {
}
exports.GetDogmaAttributesAttributeIdOk = GetDogmaAttributesAttributeIdOk;
/**
* Internal server error
*/
class GetDogmaAttributesInternalServerError {
}
exports.GetDogmaAttributesInternalServerError = GetDogmaAttributesInternalServerError;
/**
* Internal server error
*/
class GetDogmaEffectsEffectIdInternalServerError {
}
exports.GetDogmaEffectsEffectIdInternalServerError = GetDogmaEffectsEffectIdInternalServerError;
/**
* modifier object
*/
class GetDogmaEffectsEffectIdModifier {
}
exports.GetDogmaEffectsEffectIdModifier = GetDogmaEffectsEffectIdModifier;
/**
* Not found
*/
class GetDogmaEffectsEffectIdNotFound {
}
exports.GetDogmaEffectsEffectIdNotFound = GetDogmaEffectsEffectIdNotFound;
/**
* 200 ok object
*/
class GetDogmaEffectsEffectIdOk {
}
exports.GetDogmaEffectsEffectIdOk = GetDogmaEffectsEffectIdOk;
/**
* Internal server error
*/
class GetDogmaEffectsInternalServerError {
}
exports.GetDogmaEffectsInternalServerError = GetDogmaEffectsInternalServerError;
/**
* Forbidden
*/
class GetFleetsFleetIdForbidden {
}
exports.GetFleetsFleetIdForbidden = GetFleetsFleetIdForbidden;
/**
* Internal server error
*/
class GetFleetsFleetIdInternalServerError {
}
exports.GetFleetsFleetIdInternalServerError = GetFleetsFleetIdInternalServerError;
/**
* 200 ok object
*/
class GetFleetsFleetIdMembers200Ok {
}
exports.GetFleetsFleetIdMembers200Ok = GetFleetsFleetIdMembers200Ok;
(function (GetFleetsFleetIdMembers200Ok) {
    var RoleEnum;
    (function (RoleEnum) {
        RoleEnum[RoleEnum["FleetCommander"] = 'fleet_commander'] = "FleetCommander";
        RoleEnum[RoleEnum["WingCommander"] = 'wing_commander'] = "WingCommander";
        RoleEnum[RoleEnum["SquadCommander"] = 'squad_commander'] = "SquadCommander";
        RoleEnum[RoleEnum["SquadMember"] = 'squad_member'] = "SquadMember";
    })(RoleEnum = GetFleetsFleetIdMembers200Ok.RoleEnum || (GetFleetsFleetIdMembers200Ok.RoleEnum = {}));
})(GetFleetsFleetIdMembers200Ok = exports.GetFleetsFleetIdMembers200Ok || (exports.GetFleetsFleetIdMembers200Ok = {}));
/**
* Forbidden
*/
class GetFleetsFleetIdMembersForbidden {
}
exports.GetFleetsFleetIdMembersForbidden = GetFleetsFleetIdMembersForbidden;
/**
* Internal server error
*/
class GetFleetsFleetIdMembersInternalServerError {
}
exports.GetFleetsFleetIdMembersInternalServerError = GetFleetsFleetIdMembersInternalServerError;
/**
* Not found
*/
class GetFleetsFleetIdMembersNotFound {
}
exports.GetFleetsFleetIdMembersNotFound = GetFleetsFleetIdMembersNotFound;
/**
* Not found
*/
class GetFleetsFleetIdNotFound {
}
exports.GetFleetsFleetIdNotFound = GetFleetsFleetIdNotFound;
/**
* 200 ok object
*/
class GetFleetsFleetIdOk {
}
exports.GetFleetsFleetIdOk = GetFleetsFleetIdOk;
/**
* 200 ok object
*/
class GetFleetsFleetIdWings200Ok {
}
exports.GetFleetsFleetIdWings200Ok = GetFleetsFleetIdWings200Ok;
/**
* Forbidden
*/
class GetFleetsFleetIdWingsForbidden {
}
exports.GetFleetsFleetIdWingsForbidden = GetFleetsFleetIdWingsForbidden;
/**
* Internal server error
*/
class GetFleetsFleetIdWingsInternalServerError {
}
exports.GetFleetsFleetIdWingsInternalServerError = GetFleetsFleetIdWingsInternalServerError;
/**
* Not found
*/
class GetFleetsFleetIdWingsNotFound {
}
exports.GetFleetsFleetIdWingsNotFound = GetFleetsFleetIdWingsNotFound;
/**
* squad object
*/
class GetFleetsFleetIdWingsSquad {
}
exports.GetFleetsFleetIdWingsSquad = GetFleetsFleetIdWingsSquad;
/**
* 200 ok object
*/
class GetIncursions200Ok {
}
exports.GetIncursions200Ok = GetIncursions200Ok;
(function (GetIncursions200Ok) {
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["Withdrawing"] = 'withdrawing'] = "Withdrawing";
        StateEnum[StateEnum["Mobilizing"] = 'mobilizing'] = "Mobilizing";
        StateEnum[StateEnum["Established"] = 'established'] = "Established";
    })(StateEnum = GetIncursions200Ok.StateEnum || (GetIncursions200Ok.StateEnum = {}));
})(GetIncursions200Ok = exports.GetIncursions200Ok || (exports.GetIncursions200Ok = {}));
/**
* Internal server error
*/
class GetIncursionsInternalServerError {
}
exports.GetIncursionsInternalServerError = GetIncursionsInternalServerError;
/**
* 200 ok object
*/
class GetIndustryFacilities200Ok {
}
exports.GetIndustryFacilities200Ok = GetIndustryFacilities200Ok;
/**
* Internal server error
*/
class GetIndustryFacilitiesInternalServerError {
}
exports.GetIndustryFacilitiesInternalServerError = GetIndustryFacilitiesInternalServerError;
/**
* 200 ok object
*/
class GetIndustrySystems200Ok {
}
exports.GetIndustrySystems200Ok = GetIndustrySystems200Ok;
/**
* cost_indice object
*/
class GetIndustrySystemsCostIndice {
}
exports.GetIndustrySystemsCostIndice = GetIndustrySystemsCostIndice;
(function (GetIndustrySystemsCostIndice) {
    var ActivityEnum;
    (function (ActivityEnum) {
        ActivityEnum[ActivityEnum["None"] = 'none'] = "None";
        ActivityEnum[ActivityEnum["Manufacturing"] = 'manufacturing'] = "Manufacturing";
        ActivityEnum[ActivityEnum["ResearchingTechnology"] = 'researching_technology'] = "ResearchingTechnology";
        ActivityEnum[ActivityEnum["ResearchingTimeEfficiency"] = 'researching_time_efficiency'] = "ResearchingTimeEfficiency";
        ActivityEnum[ActivityEnum["ResearchingMaterialEfficiency"] = 'researching_material_efficiency'] = "ResearchingMaterialEfficiency";
        ActivityEnum[ActivityEnum["Copying"] = 'copying'] = "Copying";
        ActivityEnum[ActivityEnum["Duplicating"] = 'duplicating'] = "Duplicating";
        ActivityEnum[ActivityEnum["Invention"] = 'invention'] = "Invention";
        ActivityEnum[ActivityEnum["ReverseEngineering"] = 'reverse_engineering'] = "ReverseEngineering";
    })(ActivityEnum = GetIndustrySystemsCostIndice.ActivityEnum || (GetIndustrySystemsCostIndice.ActivityEnum = {}));
})(GetIndustrySystemsCostIndice = exports.GetIndustrySystemsCostIndice || (exports.GetIndustrySystemsCostIndice = {}));
/**
* Internal server error
*/
class GetIndustrySystemsInternalServerError {
}
exports.GetIndustrySystemsInternalServerError = GetIndustrySystemsInternalServerError;
/**
* 200 ok object
*/
class GetInsurancePrices200Ok {
}
exports.GetInsurancePrices200Ok = GetInsurancePrices200Ok;
/**
* Internal server error
*/
class GetInsurancePricesInternalServerError {
}
exports.GetInsurancePricesInternalServerError = GetInsurancePricesInternalServerError;
/**
* level object
*/
class GetInsurancePricesLevel {
}
exports.GetInsurancePricesLevel = GetInsurancePricesLevel;
/**
* attacker object
*/
class GetKillmailsKillmailIdKillmailHashAttacker {
}
exports.GetKillmailsKillmailIdKillmailHashAttacker = GetKillmailsKillmailIdKillmailHashAttacker;
/**
* Internal server error
*/
class GetKillmailsKillmailIdKillmailHashInternalServerError {
}
exports.GetKillmailsKillmailIdKillmailHashInternalServerError = GetKillmailsKillmailIdKillmailHashInternalServerError;
/**
* item object
*/
class GetKillmailsKillmailIdKillmailHashItem {
}
exports.GetKillmailsKillmailIdKillmailHashItem = GetKillmailsKillmailIdKillmailHashItem;
/**
* item object
*/
class GetKillmailsKillmailIdKillmailHashItem1 {
}
exports.GetKillmailsKillmailIdKillmailHashItem1 = GetKillmailsKillmailIdKillmailHashItem1;
/**
* 200 ok object
*/
class GetKillmailsKillmailIdKillmailHashOk {
}
exports.GetKillmailsKillmailIdKillmailHashOk = GetKillmailsKillmailIdKillmailHashOk;
/**
* Coordinates of the victim in Cartesian space relative to the Sun
*/
class GetKillmailsKillmailIdKillmailHashPosition {
}
exports.GetKillmailsKillmailIdKillmailHashPosition = GetKillmailsKillmailIdKillmailHashPosition;
/**
* Unprocessable entity
*/
class GetKillmailsKillmailIdKillmailHashUnprocessableEntity {
}
exports.GetKillmailsKillmailIdKillmailHashUnprocessableEntity = GetKillmailsKillmailIdKillmailHashUnprocessableEntity;
/**
* victim object
*/
class GetKillmailsKillmailIdKillmailHashVictim {
}
exports.GetKillmailsKillmailIdKillmailHashVictim = GetKillmailsKillmailIdKillmailHashVictim;
/**
* 200 ok object
*/
class GetLoyaltyStoresCorporationIdOffers200Ok {
}
exports.GetLoyaltyStoresCorporationIdOffers200Ok = GetLoyaltyStoresCorporationIdOffers200Ok;
/**
* Internal server error
*/
class GetLoyaltyStoresCorporationIdOffersInternalServerError {
}
exports.GetLoyaltyStoresCorporationIdOffersInternalServerError = GetLoyaltyStoresCorporationIdOffersInternalServerError;
/**
* required_item object
*/
class GetLoyaltyStoresCorporationIdOffersRequiredItem {
}
exports.GetLoyaltyStoresCorporationIdOffersRequiredItem = GetLoyaltyStoresCorporationIdOffersRequiredItem;
/**
* Internal server error
*/
class GetMarketsGroupsInternalServerError {
}
exports.GetMarketsGroupsInternalServerError = GetMarketsGroupsInternalServerError;
/**
* Internal server error
*/
class GetMarketsGroupsMarketGroupIdInternalServerError {
}
exports.GetMarketsGroupsMarketGroupIdInternalServerError = GetMarketsGroupsMarketGroupIdInternalServerError;
/**
* Not found
*/
class GetMarketsGroupsMarketGroupIdNotFound {
}
exports.GetMarketsGroupsMarketGroupIdNotFound = GetMarketsGroupsMarketGroupIdNotFound;
/**
* 200 ok object
*/
class GetMarketsGroupsMarketGroupIdOk {
}
exports.GetMarketsGroupsMarketGroupIdOk = GetMarketsGroupsMarketGroupIdOk;
/**
* 200 ok object
*/
class GetMarketsPrices200Ok {
}
exports.GetMarketsPrices200Ok = GetMarketsPrices200Ok;
/**
* Internal server error
*/
class GetMarketsPricesInternalServerError {
}
exports.GetMarketsPricesInternalServerError = GetMarketsPricesInternalServerError;
/**
* 200 ok object
*/
class GetMarketsRegionIdHistory200Ok {
}
exports.GetMarketsRegionIdHistory200Ok = GetMarketsRegionIdHistory200Ok;
/**
* Internal server error
*/
class GetMarketsRegionIdHistoryInternalServerError {
}
exports.GetMarketsRegionIdHistoryInternalServerError = GetMarketsRegionIdHistoryInternalServerError;
/**
* Unprocessable entity
*/
class GetMarketsRegionIdHistoryUnprocessableEntity {
}
exports.GetMarketsRegionIdHistoryUnprocessableEntity = GetMarketsRegionIdHistoryUnprocessableEntity;
/**
* 200 ok object
*/
class GetMarketsRegionIdOrders200Ok {
}
exports.GetMarketsRegionIdOrders200Ok = GetMarketsRegionIdOrders200Ok;
(function (GetMarketsRegionIdOrders200Ok) {
    var RangeEnum;
    (function (RangeEnum) {
        RangeEnum[RangeEnum["Station"] = 'station'] = "Station";
        RangeEnum[RangeEnum["Region"] = 'region'] = "Region";
        RangeEnum[RangeEnum["Solarsystem"] = 'solarsystem'] = "Solarsystem";
        RangeEnum[RangeEnum["_1"] = '1'] = "_1";
        RangeEnum[RangeEnum["_2"] = '2'] = "_2";
        RangeEnum[RangeEnum["_3"] = '3'] = "_3";
        RangeEnum[RangeEnum["_4"] = '4'] = "_4";
        RangeEnum[RangeEnum["_5"] = '5'] = "_5";
        RangeEnum[RangeEnum["_10"] = '10'] = "_10";
        RangeEnum[RangeEnum["_20"] = '20'] = "_20";
        RangeEnum[RangeEnum["_30"] = '30'] = "_30";
        RangeEnum[RangeEnum["_40"] = '40'] = "_40";
    })(RangeEnum = GetMarketsRegionIdOrders200Ok.RangeEnum || (GetMarketsRegionIdOrders200Ok.RangeEnum = {}));
})(GetMarketsRegionIdOrders200Ok = exports.GetMarketsRegionIdOrders200Ok || (exports.GetMarketsRegionIdOrders200Ok = {}));
/**
* Internal server error
*/
class GetMarketsRegionIdOrdersInternalServerError {
}
exports.GetMarketsRegionIdOrdersInternalServerError = GetMarketsRegionIdOrdersInternalServerError;
/**
* Unprocessable entity
*/
class GetMarketsRegionIdOrdersUnprocessableEntity {
}
exports.GetMarketsRegionIdOrdersUnprocessableEntity = GetMarketsRegionIdOrdersUnprocessableEntity;
/**
* 200 ok object
*/
class GetMarketsStructuresStructureId200Ok {
}
exports.GetMarketsStructuresStructureId200Ok = GetMarketsStructuresStructureId200Ok;
(function (GetMarketsStructuresStructureId200Ok) {
    var RangeEnum;
    (function (RangeEnum) {
        RangeEnum[RangeEnum["Station"] = 'station'] = "Station";
        RangeEnum[RangeEnum["Region"] = 'region'] = "Region";
        RangeEnum[RangeEnum["Solarsystem"] = 'solarsystem'] = "Solarsystem";
        RangeEnum[RangeEnum["_1"] = '1'] = "_1";
        RangeEnum[RangeEnum["_2"] = '2'] = "_2";
        RangeEnum[RangeEnum["_3"] = '3'] = "_3";
        RangeEnum[RangeEnum["_4"] = '4'] = "_4";
        RangeEnum[RangeEnum["_5"] = '5'] = "_5";
        RangeEnum[RangeEnum["_10"] = '10'] = "_10";
        RangeEnum[RangeEnum["_20"] = '20'] = "_20";
        RangeEnum[RangeEnum["_30"] = '30'] = "_30";
        RangeEnum[RangeEnum["_40"] = '40'] = "_40";
    })(RangeEnum = GetMarketsStructuresStructureId200Ok.RangeEnum || (GetMarketsStructuresStructureId200Ok.RangeEnum = {}));
})(GetMarketsStructuresStructureId200Ok = exports.GetMarketsStructuresStructureId200Ok || (exports.GetMarketsStructuresStructureId200Ok = {}));
/**
* Forbidden
*/
class GetMarketsStructuresStructureIdForbidden {
}
exports.GetMarketsStructuresStructureIdForbidden = GetMarketsStructuresStructureIdForbidden;
/**
* Internal server error
*/
class GetMarketsStructuresStructureIdInternalServerError {
}
exports.GetMarketsStructuresStructureIdInternalServerError = GetMarketsStructuresStructureIdInternalServerError;
/**
* Internal server error
*/
class GetOpportunitiesGroupsGroupIdInternalServerError {
}
exports.GetOpportunitiesGroupsGroupIdInternalServerError = GetOpportunitiesGroupsGroupIdInternalServerError;
/**
* 200 ok object
*/
class GetOpportunitiesGroupsGroupIdOk {
}
exports.GetOpportunitiesGroupsGroupIdOk = GetOpportunitiesGroupsGroupIdOk;
/**
* Internal server error
*/
class GetOpportunitiesGroupsInternalServerError {
}
exports.GetOpportunitiesGroupsInternalServerError = GetOpportunitiesGroupsInternalServerError;
/**
* Internal server error
*/
class GetOpportunitiesTasksInternalServerError {
}
exports.GetOpportunitiesTasksInternalServerError = GetOpportunitiesTasksInternalServerError;
/**
* Internal server error
*/
class GetOpportunitiesTasksTaskIdInternalServerError {
}
exports.GetOpportunitiesTasksTaskIdInternalServerError = GetOpportunitiesTasksTaskIdInternalServerError;
/**
* 200 ok object
*/
class GetOpportunitiesTasksTaskIdOk {
}
exports.GetOpportunitiesTasksTaskIdOk = GetOpportunitiesTasksTaskIdOk;
/**
* Internal server error
*/
class GetRouteOriginDestinationInternalServerError {
}
exports.GetRouteOriginDestinationInternalServerError = GetRouteOriginDestinationInternalServerError;
/**
* Not found
*/
class GetRouteOriginDestinationNotFound {
}
exports.GetRouteOriginDestinationNotFound = GetRouteOriginDestinationNotFound;
/**
* Internal server error
*/
class GetSearchInternalServerError {
}
exports.GetSearchInternalServerError = GetSearchInternalServerError;
/**
* 200 ok object
*/
class GetSearchOk {
}
exports.GetSearchOk = GetSearchOk;
/**
* 200 ok object
*/
class GetSovereigntyCampaigns200Ok {
}
exports.GetSovereigntyCampaigns200Ok = GetSovereigntyCampaigns200Ok;
(function (GetSovereigntyCampaigns200Ok) {
    var EventTypeEnum;
    (function (EventTypeEnum) {
        EventTypeEnum[EventTypeEnum["TcuDefense"] = 'tcu_defense'] = "TcuDefense";
        EventTypeEnum[EventTypeEnum["IhubDefense"] = 'ihub_defense'] = "IhubDefense";
        EventTypeEnum[EventTypeEnum["StationDefense"] = 'station_defense'] = "StationDefense";
        EventTypeEnum[EventTypeEnum["StationFreeport"] = 'station_freeport'] = "StationFreeport";
    })(EventTypeEnum = GetSovereigntyCampaigns200Ok.EventTypeEnum || (GetSovereigntyCampaigns200Ok.EventTypeEnum = {}));
})(GetSovereigntyCampaigns200Ok = exports.GetSovereigntyCampaigns200Ok || (exports.GetSovereigntyCampaigns200Ok = {}));
/**
* Internal server error
*/
class GetSovereigntyCampaignsInternalServerError {
}
exports.GetSovereigntyCampaignsInternalServerError = GetSovereigntyCampaignsInternalServerError;
/**
* participant object
*/
class GetSovereigntyCampaignsParticipant {
}
exports.GetSovereigntyCampaignsParticipant = GetSovereigntyCampaignsParticipant;
/**
* 200 ok object
*/
class GetSovereigntyMap200Ok {
}
exports.GetSovereigntyMap200Ok = GetSovereigntyMap200Ok;
/**
* Internal server error
*/
class GetSovereigntyMapInternalServerError {
}
exports.GetSovereigntyMapInternalServerError = GetSovereigntyMapInternalServerError;
/**
* 200 ok object
*/
class GetSovereigntyStructures200Ok {
}
exports.GetSovereigntyStructures200Ok = GetSovereigntyStructures200Ok;
/**
* Internal server error
*/
class GetSovereigntyStructuresInternalServerError {
}
exports.GetSovereigntyStructuresInternalServerError = GetSovereigntyStructuresInternalServerError;
/**
* Internal server error
*/
class GetStatusInternalServerError {
}
exports.GetStatusInternalServerError = GetStatusInternalServerError;
/**
* 200 ok object
*/
class GetStatusOk {
}
exports.GetStatusOk = GetStatusOk;
/**
* 200 ok object
*/
class GetUniverseBloodlines200Ok {
}
exports.GetUniverseBloodlines200Ok = GetUniverseBloodlines200Ok;
/**
* Internal server error
*/
class GetUniverseBloodlinesInternalServerError {
}
exports.GetUniverseBloodlinesInternalServerError = GetUniverseBloodlinesInternalServerError;
/**
* Internal server error
*/
class GetUniverseCategoriesCategoryIdInternalServerError {
}
exports.GetUniverseCategoriesCategoryIdInternalServerError = GetUniverseCategoriesCategoryIdInternalServerError;
/**
* Not found
*/
class GetUniverseCategoriesCategoryIdNotFound {
}
exports.GetUniverseCategoriesCategoryIdNotFound = GetUniverseCategoriesCategoryIdNotFound;
/**
* 200 ok object
*/
class GetUniverseCategoriesCategoryIdOk {
}
exports.GetUniverseCategoriesCategoryIdOk = GetUniverseCategoriesCategoryIdOk;
/**
* Internal server error
*/
class GetUniverseCategoriesInternalServerError {
}
exports.GetUniverseCategoriesInternalServerError = GetUniverseCategoriesInternalServerError;
/**
* Internal server error
*/
class GetUniverseConstellationsConstellationIdInternalServerError {
}
exports.GetUniverseConstellationsConstellationIdInternalServerError = GetUniverseConstellationsConstellationIdInternalServerError;
/**
* Not found
*/
class GetUniverseConstellationsConstellationIdNotFound {
}
exports.GetUniverseConstellationsConstellationIdNotFound = GetUniverseConstellationsConstellationIdNotFound;
/**
* 200 ok object
*/
class GetUniverseConstellationsConstellationIdOk {
}
exports.GetUniverseConstellationsConstellationIdOk = GetUniverseConstellationsConstellationIdOk;
/**
* position object
*/
class GetUniverseConstellationsConstellationIdPosition {
}
exports.GetUniverseConstellationsConstellationIdPosition = GetUniverseConstellationsConstellationIdPosition;
/**
* Internal server error
*/
class GetUniverseConstellationsInternalServerError {
}
exports.GetUniverseConstellationsInternalServerError = GetUniverseConstellationsInternalServerError;
/**
* 200 ok object
*/
class GetUniverseFactions200Ok {
}
exports.GetUniverseFactions200Ok = GetUniverseFactions200Ok;
/**
* Internal server error
*/
class GetUniverseFactionsInternalServerError {
}
exports.GetUniverseFactionsInternalServerError = GetUniverseFactionsInternalServerError;
/**
* Internal server error
*/
class GetUniverseGraphicsGraphicIdInternalServerError {
}
exports.GetUniverseGraphicsGraphicIdInternalServerError = GetUniverseGraphicsGraphicIdInternalServerError;
/**
* Not found
*/
class GetUniverseGraphicsGraphicIdNotFound {
}
exports.GetUniverseGraphicsGraphicIdNotFound = GetUniverseGraphicsGraphicIdNotFound;
/**
* 200 ok object
*/
class GetUniverseGraphicsGraphicIdOk {
}
exports.GetUniverseGraphicsGraphicIdOk = GetUniverseGraphicsGraphicIdOk;
/**
* Internal server error
*/
class GetUniverseGraphicsInternalServerError {
}
exports.GetUniverseGraphicsInternalServerError = GetUniverseGraphicsInternalServerError;
/**
* Internal server error
*/
class GetUniverseGroupsGroupIdInternalServerError {
}
exports.GetUniverseGroupsGroupIdInternalServerError = GetUniverseGroupsGroupIdInternalServerError;
/**
* Not found
*/
class GetUniverseGroupsGroupIdNotFound {
}
exports.GetUniverseGroupsGroupIdNotFound = GetUniverseGroupsGroupIdNotFound;
/**
* 200 ok object
*/
class GetUniverseGroupsGroupIdOk {
}
exports.GetUniverseGroupsGroupIdOk = GetUniverseGroupsGroupIdOk;
/**
* Internal server error
*/
class GetUniverseGroupsInternalServerError {
}
exports.GetUniverseGroupsInternalServerError = GetUniverseGroupsInternalServerError;
/**
* Internal server error
*/
class GetUniverseMoonsMoonIdInternalServerError {
}
exports.GetUniverseMoonsMoonIdInternalServerError = GetUniverseMoonsMoonIdInternalServerError;
/**
* Not found
*/
class GetUniverseMoonsMoonIdNotFound {
}
exports.GetUniverseMoonsMoonIdNotFound = GetUniverseMoonsMoonIdNotFound;
/**
* 200 ok object
*/
class GetUniverseMoonsMoonIdOk {
}
exports.GetUniverseMoonsMoonIdOk = GetUniverseMoonsMoonIdOk;
/**
* position object
*/
class GetUniverseMoonsMoonIdPosition {
}
exports.GetUniverseMoonsMoonIdPosition = GetUniverseMoonsMoonIdPosition;
/**
* Internal server error
*/
class GetUniversePlanetsPlanetIdInternalServerError {
}
exports.GetUniversePlanetsPlanetIdInternalServerError = GetUniversePlanetsPlanetIdInternalServerError;
/**
* Not found
*/
class GetUniversePlanetsPlanetIdNotFound {
}
exports.GetUniversePlanetsPlanetIdNotFound = GetUniversePlanetsPlanetIdNotFound;
/**
* 200 ok object
*/
class GetUniversePlanetsPlanetIdOk {
}
exports.GetUniversePlanetsPlanetIdOk = GetUniversePlanetsPlanetIdOk;
/**
* position object
*/
class GetUniversePlanetsPlanetIdPosition {
}
exports.GetUniversePlanetsPlanetIdPosition = GetUniversePlanetsPlanetIdPosition;
/**
* 200 ok object
*/
class GetUniverseRaces200Ok {
}
exports.GetUniverseRaces200Ok = GetUniverseRaces200Ok;
/**
* Internal server error
*/
class GetUniverseRacesInternalServerError {
}
exports.GetUniverseRacesInternalServerError = GetUniverseRacesInternalServerError;
/**
* Internal server error
*/
class GetUniverseRegionsInternalServerError {
}
exports.GetUniverseRegionsInternalServerError = GetUniverseRegionsInternalServerError;
/**
* Internal server error
*/
class GetUniverseRegionsRegionIdInternalServerError {
}
exports.GetUniverseRegionsRegionIdInternalServerError = GetUniverseRegionsRegionIdInternalServerError;
/**
* Not found
*/
class GetUniverseRegionsRegionIdNotFound {
}
exports.GetUniverseRegionsRegionIdNotFound = GetUniverseRegionsRegionIdNotFound;
/**
* 200 ok object
*/
class GetUniverseRegionsRegionIdOk {
}
exports.GetUniverseRegionsRegionIdOk = GetUniverseRegionsRegionIdOk;
/**
* Internal server error
*/
class GetUniverseSchematicsSchematicIdInternalServerError {
}
exports.GetUniverseSchematicsSchematicIdInternalServerError = GetUniverseSchematicsSchematicIdInternalServerError;
/**
* Schematic not found
*/
class GetUniverseSchematicsSchematicIdNotFound {
}
exports.GetUniverseSchematicsSchematicIdNotFound = GetUniverseSchematicsSchematicIdNotFound;
/**
* 200 ok object
*/
class GetUniverseSchematicsSchematicIdOk {
}
exports.GetUniverseSchematicsSchematicIdOk = GetUniverseSchematicsSchematicIdOk;
/**
* destination object
*/
class GetUniverseStargatesStargateIdDestination {
}
exports.GetUniverseStargatesStargateIdDestination = GetUniverseStargatesStargateIdDestination;
/**
* Internal server error
*/
class GetUniverseStargatesStargateIdInternalServerError {
}
exports.GetUniverseStargatesStargateIdInternalServerError = GetUniverseStargatesStargateIdInternalServerError;
/**
* Not found
*/
class GetUniverseStargatesStargateIdNotFound {
}
exports.GetUniverseStargatesStargateIdNotFound = GetUniverseStargatesStargateIdNotFound;
/**
* 200 ok object
*/
class GetUniverseStargatesStargateIdOk {
}
exports.GetUniverseStargatesStargateIdOk = GetUniverseStargatesStargateIdOk;
/**
* position object
*/
class GetUniverseStargatesStargateIdPosition {
}
exports.GetUniverseStargatesStargateIdPosition = GetUniverseStargatesStargateIdPosition;
/**
* Internal server error
*/
class GetUniverseStationsStationIdInternalServerError {
}
exports.GetUniverseStationsStationIdInternalServerError = GetUniverseStationsStationIdInternalServerError;
/**
* Not found
*/
class GetUniverseStationsStationIdNotFound {
}
exports.GetUniverseStationsStationIdNotFound = GetUniverseStationsStationIdNotFound;
/**
* 200 ok object
*/
class GetUniverseStationsStationIdOk {
}
exports.GetUniverseStationsStationIdOk = GetUniverseStationsStationIdOk;
(function (GetUniverseStationsStationIdOk) {
    var ServicesEnum;
    (function (ServicesEnum) {
        ServicesEnum[ServicesEnum["BountyMissions"] = 'bounty-missions'] = "BountyMissions";
        ServicesEnum[ServicesEnum["AssasinationMissions"] = 'assasination-missions'] = "AssasinationMissions";
        ServicesEnum[ServicesEnum["CourierMissions"] = 'courier-missions'] = "CourierMissions";
        ServicesEnum[ServicesEnum["Interbus"] = 'interbus'] = "Interbus";
        ServicesEnum[ServicesEnum["ReprocessingPlant"] = 'reprocessing-plant'] = "ReprocessingPlant";
        ServicesEnum[ServicesEnum["Refinery"] = 'refinery'] = "Refinery";
        ServicesEnum[ServicesEnum["Market"] = 'market'] = "Market";
        ServicesEnum[ServicesEnum["BlackMarket"] = 'black-market'] = "BlackMarket";
        ServicesEnum[ServicesEnum["StockExchange"] = 'stock-exchange'] = "StockExchange";
        ServicesEnum[ServicesEnum["Cloning"] = 'cloning'] = "Cloning";
        ServicesEnum[ServicesEnum["Surgery"] = 'surgery'] = "Surgery";
        ServicesEnum[ServicesEnum["DnaTherapy"] = 'dna-therapy'] = "DnaTherapy";
        ServicesEnum[ServicesEnum["RepairFacilities"] = 'repair-facilities'] = "RepairFacilities";
        ServicesEnum[ServicesEnum["Factory"] = 'factory'] = "Factory";
        ServicesEnum[ServicesEnum["Labratory"] = 'labratory'] = "Labratory";
        ServicesEnum[ServicesEnum["Gambling"] = 'gambling'] = "Gambling";
        ServicesEnum[ServicesEnum["Fitting"] = 'fitting'] = "Fitting";
        ServicesEnum[ServicesEnum["Paintshop"] = 'paintshop'] = "Paintshop";
        ServicesEnum[ServicesEnum["News"] = 'news'] = "News";
        ServicesEnum[ServicesEnum["Storage"] = 'storage'] = "Storage";
        ServicesEnum[ServicesEnum["Insurance"] = 'insurance'] = "Insurance";
        ServicesEnum[ServicesEnum["Docking"] = 'docking'] = "Docking";
        ServicesEnum[ServicesEnum["OfficeRental"] = 'office-rental'] = "OfficeRental";
        ServicesEnum[ServicesEnum["JumpCloneFacility"] = 'jump-clone-facility'] = "JumpCloneFacility";
        ServicesEnum[ServicesEnum["LoyaltyPointStore"] = 'loyalty-point-store'] = "LoyaltyPointStore";
        ServicesEnum[ServicesEnum["NavyOffices"] = 'navy-offices'] = "NavyOffices";
        ServicesEnum[ServicesEnum["SecurityOffices"] = 'security-offices'] = "SecurityOffices";
    })(ServicesEnum = GetUniverseStationsStationIdOk.ServicesEnum || (GetUniverseStationsStationIdOk.ServicesEnum = {}));
})(GetUniverseStationsStationIdOk = exports.GetUniverseStationsStationIdOk || (exports.GetUniverseStationsStationIdOk = {}));
/**
* position object
*/
class GetUniverseStationsStationIdPosition {
}
exports.GetUniverseStationsStationIdPosition = GetUniverseStationsStationIdPosition;
/**
* Internal server error
*/
class GetUniverseStructuresInternalServerError {
}
exports.GetUniverseStructuresInternalServerError = GetUniverseStructuresInternalServerError;
/**
* Forbidden
*/
class GetUniverseStructuresStructureIdForbidden {
}
exports.GetUniverseStructuresStructureIdForbidden = GetUniverseStructuresStructureIdForbidden;
/**
* Internal server error
*/
class GetUniverseStructuresStructureIdInternalServerError {
}
exports.GetUniverseStructuresStructureIdInternalServerError = GetUniverseStructuresStructureIdInternalServerError;
/**
* Not found
*/
class GetUniverseStructuresStructureIdNotFound {
}
exports.GetUniverseStructuresStructureIdNotFound = GetUniverseStructuresStructureIdNotFound;
/**
* 200 ok object
*/
class GetUniverseStructuresStructureIdOk {
}
exports.GetUniverseStructuresStructureIdOk = GetUniverseStructuresStructureIdOk;
/**
* Coordinates of the structure in Cartesian space relative to the Sun, in metres.
*/
class GetUniverseStructuresStructureIdPosition {
}
exports.GetUniverseStructuresStructureIdPosition = GetUniverseStructuresStructureIdPosition;
/**
* 200 ok object
*/
class GetUniverseSystemJumps200Ok {
}
exports.GetUniverseSystemJumps200Ok = GetUniverseSystemJumps200Ok;
/**
* Internal server error
*/
class GetUniverseSystemJumpsInternalServerError {
}
exports.GetUniverseSystemJumpsInternalServerError = GetUniverseSystemJumpsInternalServerError;
/**
* 200 ok object
*/
class GetUniverseSystemKills200Ok {
}
exports.GetUniverseSystemKills200Ok = GetUniverseSystemKills200Ok;
/**
* Internal server error
*/
class GetUniverseSystemKillsInternalServerError {
}
exports.GetUniverseSystemKillsInternalServerError = GetUniverseSystemKillsInternalServerError;
/**
* Internal server error
*/
class GetUniverseSystemsInternalServerError {
}
exports.GetUniverseSystemsInternalServerError = GetUniverseSystemsInternalServerError;
/**
* Internal server error
*/
class GetUniverseSystemsSystemIdInternalServerError {
}
exports.GetUniverseSystemsSystemIdInternalServerError = GetUniverseSystemsSystemIdInternalServerError;
/**
* Not found
*/
class GetUniverseSystemsSystemIdNotFound {
}
exports.GetUniverseSystemsSystemIdNotFound = GetUniverseSystemsSystemIdNotFound;
/**
* 200 ok object
*/
class GetUniverseSystemsSystemIdOk {
}
exports.GetUniverseSystemsSystemIdOk = GetUniverseSystemsSystemIdOk;
/**
* planet object
*/
class GetUniverseSystemsSystemIdPlanet {
}
exports.GetUniverseSystemsSystemIdPlanet = GetUniverseSystemsSystemIdPlanet;
/**
* position object
*/
class GetUniverseSystemsSystemIdPosition {
}
exports.GetUniverseSystemsSystemIdPosition = GetUniverseSystemsSystemIdPosition;
/**
* Internal server error
*/
class GetUniverseTypesInternalServerError {
}
exports.GetUniverseTypesInternalServerError = GetUniverseTypesInternalServerError;
/**
* dogma_attribute object
*/
class GetUniverseTypesTypeIdDogmaAttribute {
}
exports.GetUniverseTypesTypeIdDogmaAttribute = GetUniverseTypesTypeIdDogmaAttribute;
/**
* dogma_effect object
*/
class GetUniverseTypesTypeIdDogmaEffect {
}
exports.GetUniverseTypesTypeIdDogmaEffect = GetUniverseTypesTypeIdDogmaEffect;
/**
* Internal server error
*/
class GetUniverseTypesTypeIdInternalServerError {
}
exports.GetUniverseTypesTypeIdInternalServerError = GetUniverseTypesTypeIdInternalServerError;
/**
* Not found
*/
class GetUniverseTypesTypeIdNotFound {
}
exports.GetUniverseTypesTypeIdNotFound = GetUniverseTypesTypeIdNotFound;
/**
* 200 ok object
*/
class GetUniverseTypesTypeIdOk {
}
exports.GetUniverseTypesTypeIdOk = GetUniverseTypesTypeIdOk;
/**
* Internal server error
*/
class GetWarsInternalServerError {
}
exports.GetWarsInternalServerError = GetWarsInternalServerError;
/**
* The aggressor corporation or alliance that declared this war, only contains either corporation_id or alliance_id
*/
class GetWarsWarIdAggressor {
}
exports.GetWarsWarIdAggressor = GetWarsWarIdAggressor;
/**
* ally object
*/
class GetWarsWarIdAlly {
}
exports.GetWarsWarIdAlly = GetWarsWarIdAlly;
/**
* The defending corporation or alliance that declared this war, only contains either corporation_id or alliance_id
*/
class GetWarsWarIdDefender {
}
exports.GetWarsWarIdDefender = GetWarsWarIdDefender;
/**
* Internal server error
*/
class GetWarsWarIdInternalServerError {
}
exports.GetWarsWarIdInternalServerError = GetWarsWarIdInternalServerError;
/**
* 200 ok object
*/
class GetWarsWarIdKillmails200Ok {
}
exports.GetWarsWarIdKillmails200Ok = GetWarsWarIdKillmails200Ok;
/**
* Internal server error
*/
class GetWarsWarIdKillmailsInternalServerError {
}
exports.GetWarsWarIdKillmailsInternalServerError = GetWarsWarIdKillmailsInternalServerError;
/**
* Unprocessable entity
*/
class GetWarsWarIdKillmailsUnprocessableEntity {
}
exports.GetWarsWarIdKillmailsUnprocessableEntity = GetWarsWarIdKillmailsUnprocessableEntity;
/**
* 200 ok object
*/
class GetWarsWarIdOk {
}
exports.GetWarsWarIdOk = GetWarsWarIdOk;
/**
* Unprocessable entity
*/
class GetWarsWarIdUnprocessableEntity {
}
exports.GetWarsWarIdUnprocessableEntity = GetWarsWarIdUnprocessableEntity;
/**
* 200 ok object
*/
class PostCharactersAffiliation200Ok {
}
exports.PostCharactersAffiliation200Ok = PostCharactersAffiliation200Ok;
/**
* Internal server error
*/
class PostCharactersAffiliationInternalServerError {
}
exports.PostCharactersAffiliationInternalServerError = PostCharactersAffiliationInternalServerError;
/**
* Unprocessable entity
*/
class PostCharactersAffiliationUnprocessableEntity {
}
exports.PostCharactersAffiliationUnprocessableEntity = PostCharactersAffiliationUnprocessableEntity;
/**
* Forbidden
*/
class PostCharactersCharacterIdContactsForbidden {
}
exports.PostCharactersCharacterIdContactsForbidden = PostCharactersCharacterIdContactsForbidden;
/**
* Internal server error
*/
class PostCharactersCharacterIdContactsInternalServerError {
}
exports.PostCharactersCharacterIdContactsInternalServerError = PostCharactersCharacterIdContactsInternalServerError;
/**
* characters schema
*/
class PostCharactersCharacterIdCspaCharacters {
}
exports.PostCharactersCharacterIdCspaCharacters = PostCharactersCharacterIdCspaCharacters;
/**
* 201 created object
*/
class PostCharactersCharacterIdCspaCreated {
}
exports.PostCharactersCharacterIdCspaCreated = PostCharactersCharacterIdCspaCreated;
/**
* Forbidden
*/
class PostCharactersCharacterIdCspaForbidden {
}
exports.PostCharactersCharacterIdCspaForbidden = PostCharactersCharacterIdCspaForbidden;
/**
* Internal server error
*/
class PostCharactersCharacterIdCspaInternalServerError {
}
exports.PostCharactersCharacterIdCspaInternalServerError = PostCharactersCharacterIdCspaInternalServerError;
/**
* 201 created object
*/
class PostCharactersCharacterIdFittingsCreated {
}
exports.PostCharactersCharacterIdFittingsCreated = PostCharactersCharacterIdFittingsCreated;
/**
* fitting object
*/
class PostCharactersCharacterIdFittingsFitting {
}
exports.PostCharactersCharacterIdFittingsFitting = PostCharactersCharacterIdFittingsFitting;
/**
* Forbidden
*/
class PostCharactersCharacterIdFittingsForbidden {
}
exports.PostCharactersCharacterIdFittingsForbidden = PostCharactersCharacterIdFittingsForbidden;
/**
* Internal server error
*/
class PostCharactersCharacterIdFittingsInternalServerError {
}
exports.PostCharactersCharacterIdFittingsInternalServerError = PostCharactersCharacterIdFittingsInternalServerError;
/**
* item object
*/
class PostCharactersCharacterIdFittingsItem {
}
exports.PostCharactersCharacterIdFittingsItem = PostCharactersCharacterIdFittingsItem;
/**
* Bad request
*/
class PostCharactersCharacterIdMailBadRequest {
}
exports.PostCharactersCharacterIdMailBadRequest = PostCharactersCharacterIdMailBadRequest;
/**
* Forbidden
*/
class PostCharactersCharacterIdMailForbidden {
}
exports.PostCharactersCharacterIdMailForbidden = PostCharactersCharacterIdMailForbidden;
/**
* Internal server error
*/
class PostCharactersCharacterIdMailInternalServerError {
}
exports.PostCharactersCharacterIdMailInternalServerError = PostCharactersCharacterIdMailInternalServerError;
/**
* Forbidden
*/
class PostCharactersCharacterIdMailLabelsForbidden {
}
exports.PostCharactersCharacterIdMailLabelsForbidden = PostCharactersCharacterIdMailLabelsForbidden;
/**
* Internal server error
*/
class PostCharactersCharacterIdMailLabelsInternalServerError {
}
exports.PostCharactersCharacterIdMailLabelsInternalServerError = PostCharactersCharacterIdMailLabelsInternalServerError;
/**
* label object
*/
class PostCharactersCharacterIdMailLabelsLabel {
}
exports.PostCharactersCharacterIdMailLabelsLabel = PostCharactersCharacterIdMailLabelsLabel;
(function (PostCharactersCharacterIdMailLabelsLabel) {
    var ColorEnum;
    (function (ColorEnum) {
        ColorEnum[ColorEnum["Ffffff"] = '#ffffff'] = "Ffffff";
        ColorEnum[ColorEnum["Ffff01"] = '#ffff01'] = "Ffff01";
        ColorEnum[ColorEnum["Ff6600"] = '#ff6600'] = "Ff6600";
        ColorEnum[ColorEnum["Fe0000"] = '#fe0000'] = "Fe0000";
        ColorEnum[ColorEnum["_9a0000"] = '#9a0000'] = "_9a0000";
        ColorEnum[ColorEnum["_660066"] = '#660066'] = "_660066";
        ColorEnum[ColorEnum["_0000fe"] = '#0000fe'] = "_0000fe";
        ColorEnum[ColorEnum["_0099ff"] = '#0099ff'] = "_0099ff";
        ColorEnum[ColorEnum["_01ffff"] = '#01ffff'] = "_01ffff";
        ColorEnum[ColorEnum["_00ff33"] = '#00ff33'] = "_00ff33";
        ColorEnum[ColorEnum["_349800"] = '#349800'] = "_349800";
        ColorEnum[ColorEnum["_006634"] = '#006634'] = "_006634";
        ColorEnum[ColorEnum["_666666"] = '#666666'] = "_666666";
        ColorEnum[ColorEnum["_999999"] = '#999999'] = "_999999";
        ColorEnum[ColorEnum["E6e6e6"] = '#e6e6e6'] = "E6e6e6";
        ColorEnum[ColorEnum["Ffffcd"] = '#ffffcd'] = "Ffffcd";
        ColorEnum[ColorEnum["_99ffff"] = '#99ffff'] = "_99ffff";
        ColorEnum[ColorEnum["Ccff9a"] = '#ccff9a'] = "Ccff9a";
    })(ColorEnum = PostCharactersCharacterIdMailLabelsLabel.ColorEnum || (PostCharactersCharacterIdMailLabelsLabel.ColorEnum = {}));
})(PostCharactersCharacterIdMailLabelsLabel = exports.PostCharactersCharacterIdMailLabelsLabel || (exports.PostCharactersCharacterIdMailLabelsLabel = {}));
/**
* mail schema
*/
class PostCharactersCharacterIdMailMail {
}
exports.PostCharactersCharacterIdMailMail = PostCharactersCharacterIdMailMail;
/**
* recipient object
*/
class PostCharactersCharacterIdMailRecipient {
}
exports.PostCharactersCharacterIdMailRecipient = PostCharactersCharacterIdMailRecipient;
(function (PostCharactersCharacterIdMailRecipient) {
    var RecipientTypeEnum;
    (function (RecipientTypeEnum) {
        RecipientTypeEnum[RecipientTypeEnum["Alliance"] = 'alliance'] = "Alliance";
        RecipientTypeEnum[RecipientTypeEnum["Character"] = 'character'] = "Character";
        RecipientTypeEnum[RecipientTypeEnum["Corporation"] = 'corporation'] = "Corporation";
        RecipientTypeEnum[RecipientTypeEnum["MailingList"] = 'mailing_list'] = "MailingList";
    })(RecipientTypeEnum = PostCharactersCharacterIdMailRecipient.RecipientTypeEnum || (PostCharactersCharacterIdMailRecipient.RecipientTypeEnum = {}));
})(PostCharactersCharacterIdMailRecipient = exports.PostCharactersCharacterIdMailRecipient || (exports.PostCharactersCharacterIdMailRecipient = {}));
/**
* Forbidden
*/
class PostFleetsFleetIdMembersForbidden {
}
exports.PostFleetsFleetIdMembersForbidden = PostFleetsFleetIdMembersForbidden;
/**
* Internal server error
*/
class PostFleetsFleetIdMembersInternalServerError {
}
exports.PostFleetsFleetIdMembersInternalServerError = PostFleetsFleetIdMembersInternalServerError;
/**
* invitation object
*/
class PostFleetsFleetIdMembersInvitation {
}
exports.PostFleetsFleetIdMembersInvitation = PostFleetsFleetIdMembersInvitation;
(function (PostFleetsFleetIdMembersInvitation) {
    var RoleEnum;
    (function (RoleEnum) {
        RoleEnum[RoleEnum["FleetCommander"] = 'fleet_commander'] = "FleetCommander";
        RoleEnum[RoleEnum["WingCommander"] = 'wing_commander'] = "WingCommander";
        RoleEnum[RoleEnum["SquadCommander"] = 'squad_commander'] = "SquadCommander";
        RoleEnum[RoleEnum["SquadMember"] = 'squad_member'] = "SquadMember";
    })(RoleEnum = PostFleetsFleetIdMembersInvitation.RoleEnum || (PostFleetsFleetIdMembersInvitation.RoleEnum = {}));
})(PostFleetsFleetIdMembersInvitation = exports.PostFleetsFleetIdMembersInvitation || (exports.PostFleetsFleetIdMembersInvitation = {}));
/**
* Not found
*/
class PostFleetsFleetIdMembersNotFound {
}
exports.PostFleetsFleetIdMembersNotFound = PostFleetsFleetIdMembersNotFound;
/**
* 422 unprocessable entity object
*/
class PostFleetsFleetIdMembersUnprocessableEntity {
}
exports.PostFleetsFleetIdMembersUnprocessableEntity = PostFleetsFleetIdMembersUnprocessableEntity;
/**
* 201 created object
*/
class PostFleetsFleetIdWingsCreated {
}
exports.PostFleetsFleetIdWingsCreated = PostFleetsFleetIdWingsCreated;
/**
* Forbidden
*/
class PostFleetsFleetIdWingsForbidden {
}
exports.PostFleetsFleetIdWingsForbidden = PostFleetsFleetIdWingsForbidden;
/**
* Internal server error
*/
class PostFleetsFleetIdWingsInternalServerError {
}
exports.PostFleetsFleetIdWingsInternalServerError = PostFleetsFleetIdWingsInternalServerError;
/**
* Not found
*/
class PostFleetsFleetIdWingsNotFound {
}
exports.PostFleetsFleetIdWingsNotFound = PostFleetsFleetIdWingsNotFound;
/**
* 201 created object
*/
class PostFleetsFleetIdWingsWingIdSquadsCreated {
}
exports.PostFleetsFleetIdWingsWingIdSquadsCreated = PostFleetsFleetIdWingsWingIdSquadsCreated;
/**
* Forbidden
*/
class PostFleetsFleetIdWingsWingIdSquadsForbidden {
}
exports.PostFleetsFleetIdWingsWingIdSquadsForbidden = PostFleetsFleetIdWingsWingIdSquadsForbidden;
/**
* Internal server error
*/
class PostFleetsFleetIdWingsWingIdSquadsInternalServerError {
}
exports.PostFleetsFleetIdWingsWingIdSquadsInternalServerError = PostFleetsFleetIdWingsWingIdSquadsInternalServerError;
/**
* Not found
*/
class PostFleetsFleetIdWingsWingIdSquadsNotFound {
}
exports.PostFleetsFleetIdWingsWingIdSquadsNotFound = PostFleetsFleetIdWingsWingIdSquadsNotFound;
/**
* Forbidden
*/
class PostUiAutopilotWaypointForbidden {
}
exports.PostUiAutopilotWaypointForbidden = PostUiAutopilotWaypointForbidden;
/**
* Internal server error
*/
class PostUiAutopilotWaypointInternalServerError {
}
exports.PostUiAutopilotWaypointInternalServerError = PostUiAutopilotWaypointInternalServerError;
/**
* Forbidden
*/
class PostUiOpenwindowContractForbidden {
}
exports.PostUiOpenwindowContractForbidden = PostUiOpenwindowContractForbidden;
/**
* Internal server error
*/
class PostUiOpenwindowContractInternalServerError {
}
exports.PostUiOpenwindowContractInternalServerError = PostUiOpenwindowContractInternalServerError;
/**
* Forbidden
*/
class PostUiOpenwindowInformationForbidden {
}
exports.PostUiOpenwindowInformationForbidden = PostUiOpenwindowInformationForbidden;
/**
* Internal server error
*/
class PostUiOpenwindowInformationInternalServerError {
}
exports.PostUiOpenwindowInformationInternalServerError = PostUiOpenwindowInformationInternalServerError;
/**
* Forbidden
*/
class PostUiOpenwindowMarketdetailsForbidden {
}
exports.PostUiOpenwindowMarketdetailsForbidden = PostUiOpenwindowMarketdetailsForbidden;
/**
* Internal server error
*/
class PostUiOpenwindowMarketdetailsInternalServerError {
}
exports.PostUiOpenwindowMarketdetailsInternalServerError = PostUiOpenwindowMarketdetailsInternalServerError;
/**
* Forbidden
*/
class PostUiOpenwindowNewmailForbidden {
}
exports.PostUiOpenwindowNewmailForbidden = PostUiOpenwindowNewmailForbidden;
/**
* Internal server error
*/
class PostUiOpenwindowNewmailInternalServerError {
}
exports.PostUiOpenwindowNewmailInternalServerError = PostUiOpenwindowNewmailInternalServerError;
/**
* new_mail object
*/
class PostUiOpenwindowNewmailNewMail {
}
exports.PostUiOpenwindowNewmailNewMail = PostUiOpenwindowNewmailNewMail;
/**
* Unprocessable entity
*/
class PostUiOpenwindowNewmailUnprocessableEntity {
}
exports.PostUiOpenwindowNewmailUnprocessableEntity = PostUiOpenwindowNewmailUnprocessableEntity;
/**
* 200 ok object
*/
class PostUniverseNames200Ok {
}
exports.PostUniverseNames200Ok = PostUniverseNames200Ok;
(function (PostUniverseNames200Ok) {
    var CategoryEnum;
    (function (CategoryEnum) {
        CategoryEnum[CategoryEnum["Alliance"] = 'alliance'] = "Alliance";
        CategoryEnum[CategoryEnum["Character"] = 'character'] = "Character";
        CategoryEnum[CategoryEnum["Constellation"] = 'constellation'] = "Constellation";
        CategoryEnum[CategoryEnum["Corporation"] = 'corporation'] = "Corporation";
        CategoryEnum[CategoryEnum["InventoryType"] = 'inventory_type'] = "InventoryType";
        CategoryEnum[CategoryEnum["Region"] = 'region'] = "Region";
        CategoryEnum[CategoryEnum["SolarSystem"] = 'solar_system'] = "SolarSystem";
        CategoryEnum[CategoryEnum["Station"] = 'station'] = "Station";
    })(CategoryEnum = PostUniverseNames200Ok.CategoryEnum || (PostUniverseNames200Ok.CategoryEnum = {}));
})(PostUniverseNames200Ok = exports.PostUniverseNames200Ok || (exports.PostUniverseNames200Ok = {}));
/**
* Internal server error
*/
class PostUniverseNamesInternalServerError {
}
exports.PostUniverseNamesInternalServerError = PostUniverseNamesInternalServerError;
/**
* Not found
*/
class PostUniverseNamesNotFound {
}
exports.PostUniverseNamesNotFound = PostUniverseNamesNotFound;
/**
* Forbidden
*/
class PutCharactersCharacterIdCalendarEventIdForbidden {
}
exports.PutCharactersCharacterIdCalendarEventIdForbidden = PutCharactersCharacterIdCalendarEventIdForbidden;
/**
* Internal server error
*/
class PutCharactersCharacterIdCalendarEventIdInternalServerError {
}
exports.PutCharactersCharacterIdCalendarEventIdInternalServerError = PutCharactersCharacterIdCalendarEventIdInternalServerError;
/**
* response schema
*/
class PutCharactersCharacterIdCalendarEventIdResponse {
}
exports.PutCharactersCharacterIdCalendarEventIdResponse = PutCharactersCharacterIdCalendarEventIdResponse;
(function (PutCharactersCharacterIdCalendarEventIdResponse) {
    var ResponseEnum;
    (function (ResponseEnum) {
        ResponseEnum[ResponseEnum["Accepted"] = 'accepted'] = "Accepted";
        ResponseEnum[ResponseEnum["Declined"] = 'declined'] = "Declined";
        ResponseEnum[ResponseEnum["Tentative"] = 'tentative'] = "Tentative";
    })(ResponseEnum = PutCharactersCharacterIdCalendarEventIdResponse.ResponseEnum || (PutCharactersCharacterIdCalendarEventIdResponse.ResponseEnum = {}));
})(PutCharactersCharacterIdCalendarEventIdResponse = exports.PutCharactersCharacterIdCalendarEventIdResponse || (exports.PutCharactersCharacterIdCalendarEventIdResponse = {}));
/**
* Forbidden
*/
class PutCharactersCharacterIdContactsForbidden {
}
exports.PutCharactersCharacterIdContactsForbidden = PutCharactersCharacterIdContactsForbidden;
/**
* Internal server error
*/
class PutCharactersCharacterIdContactsInternalServerError {
}
exports.PutCharactersCharacterIdContactsInternalServerError = PutCharactersCharacterIdContactsInternalServerError;
/**
* Bad request
*/
class PutCharactersCharacterIdMailMailIdBadRequest {
}
exports.PutCharactersCharacterIdMailMailIdBadRequest = PutCharactersCharacterIdMailMailIdBadRequest;
/**
* contents object
*/
class PutCharactersCharacterIdMailMailIdContents {
}
exports.PutCharactersCharacterIdMailMailIdContents = PutCharactersCharacterIdMailMailIdContents;
/**
* Forbidden
*/
class PutCharactersCharacterIdMailMailIdForbidden {
}
exports.PutCharactersCharacterIdMailMailIdForbidden = PutCharactersCharacterIdMailMailIdForbidden;
/**
* Internal server error
*/
class PutCharactersCharacterIdMailMailIdInternalServerError {
}
exports.PutCharactersCharacterIdMailMailIdInternalServerError = PutCharactersCharacterIdMailMailIdInternalServerError;
/**
* Forbidden
*/
class PutCorporationsCorporationIdStructuresStructureIdForbidden {
}
exports.PutCorporationsCorporationIdStructuresStructureIdForbidden = PutCorporationsCorporationIdStructuresStructureIdForbidden;
/**
* Internal server error
*/
class PutCorporationsCorporationIdStructuresStructureIdInternalServerError {
}
exports.PutCorporationsCorporationIdStructuresStructureIdInternalServerError = PutCorporationsCorporationIdStructuresStructureIdInternalServerError;
/**
* new_schedule object
*/
class PutCorporationsCorporationIdStructuresStructureIdNewSchedule {
}
exports.PutCorporationsCorporationIdStructuresStructureIdNewSchedule = PutCorporationsCorporationIdStructuresStructureIdNewSchedule;
/**
* Bad request
*/
class PutFleetsFleetIdBadRequest {
}
exports.PutFleetsFleetIdBadRequest = PutFleetsFleetIdBadRequest;
/**
* Forbidden
*/
class PutFleetsFleetIdForbidden {
}
exports.PutFleetsFleetIdForbidden = PutFleetsFleetIdForbidden;
/**
* Internal server error
*/
class PutFleetsFleetIdInternalServerError {
}
exports.PutFleetsFleetIdInternalServerError = PutFleetsFleetIdInternalServerError;
/**
* Forbidden
*/
class PutFleetsFleetIdMembersMemberIdForbidden {
}
exports.PutFleetsFleetIdMembersMemberIdForbidden = PutFleetsFleetIdMembersMemberIdForbidden;
/**
* Internal server error
*/
class PutFleetsFleetIdMembersMemberIdInternalServerError {
}
exports.PutFleetsFleetIdMembersMemberIdInternalServerError = PutFleetsFleetIdMembersMemberIdInternalServerError;
/**
* movement object
*/
class PutFleetsFleetIdMembersMemberIdMovement {
}
exports.PutFleetsFleetIdMembersMemberIdMovement = PutFleetsFleetIdMembersMemberIdMovement;
(function (PutFleetsFleetIdMembersMemberIdMovement) {
    var RoleEnum;
    (function (RoleEnum) {
        RoleEnum[RoleEnum["FleetCommander"] = 'fleet_commander'] = "FleetCommander";
        RoleEnum[RoleEnum["WingCommander"] = 'wing_commander'] = "WingCommander";
        RoleEnum[RoleEnum["SquadCommander"] = 'squad_commander'] = "SquadCommander";
        RoleEnum[RoleEnum["SquadMember"] = 'squad_member'] = "SquadMember";
    })(RoleEnum = PutFleetsFleetIdMembersMemberIdMovement.RoleEnum || (PutFleetsFleetIdMembersMemberIdMovement.RoleEnum = {}));
})(PutFleetsFleetIdMembersMemberIdMovement = exports.PutFleetsFleetIdMembersMemberIdMovement || (exports.PutFleetsFleetIdMembersMemberIdMovement = {}));
/**
* Not found
*/
class PutFleetsFleetIdMembersMemberIdNotFound {
}
exports.PutFleetsFleetIdMembersMemberIdNotFound = PutFleetsFleetIdMembersMemberIdNotFound;
/**
* 422 unprocessable entity object
*/
class PutFleetsFleetIdMembersMemberIdUnprocessableEntity {
}
exports.PutFleetsFleetIdMembersMemberIdUnprocessableEntity = PutFleetsFleetIdMembersMemberIdUnprocessableEntity;
/**
* new_settings object
*/
class PutFleetsFleetIdNewSettings {
}
exports.PutFleetsFleetIdNewSettings = PutFleetsFleetIdNewSettings;
/**
* Not found
*/
class PutFleetsFleetIdNotFound {
}
exports.PutFleetsFleetIdNotFound = PutFleetsFleetIdNotFound;
/**
* Forbidden
*/
class PutFleetsFleetIdSquadsSquadIdForbidden {
}
exports.PutFleetsFleetIdSquadsSquadIdForbidden = PutFleetsFleetIdSquadsSquadIdForbidden;
/**
* Internal server error
*/
class PutFleetsFleetIdSquadsSquadIdInternalServerError {
}
exports.PutFleetsFleetIdSquadsSquadIdInternalServerError = PutFleetsFleetIdSquadsSquadIdInternalServerError;
/**
* naming object
*/
class PutFleetsFleetIdSquadsSquadIdNaming {
}
exports.PutFleetsFleetIdSquadsSquadIdNaming = PutFleetsFleetIdSquadsSquadIdNaming;
/**
* Not found
*/
class PutFleetsFleetIdSquadsSquadIdNotFound {
}
exports.PutFleetsFleetIdSquadsSquadIdNotFound = PutFleetsFleetIdSquadsSquadIdNotFound;
/**
* Forbidden
*/
class PutFleetsFleetIdWingsWingIdForbidden {
}
exports.PutFleetsFleetIdWingsWingIdForbidden = PutFleetsFleetIdWingsWingIdForbidden;
/**
* Internal server error
*/
class PutFleetsFleetIdWingsWingIdInternalServerError {
}
exports.PutFleetsFleetIdWingsWingIdInternalServerError = PutFleetsFleetIdWingsWingIdInternalServerError;
/**
* naming object
*/
class PutFleetsFleetIdWingsWingIdNaming {
}
exports.PutFleetsFleetIdWingsWingIdNaming = PutFleetsFleetIdWingsWingIdNaming;
/**
* Not found
*/
class PutFleetsFleetIdWingsWingIdNotFound {
}
exports.PutFleetsFleetIdWingsWingIdNotFound = PutFleetsFleetIdWingsWingIdNotFound;
class HttpBasicAuth {
    applyToRequest(requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    }
}
exports.HttpBasicAuth = HttpBasicAuth;
class ApiKeyAuth {
    constructor(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    applyToRequest(requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}
exports.ApiKeyAuth = ApiKeyAuth;
class OAuth {
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}
exports.OAuth = OAuth;
class VoidAuth {
    applyToRequest(_) {
        // Do nothing
    }
}
exports.VoidAuth = VoidAuth;
var AllianceApiApiKeys;
(function (AllianceApiApiKeys) {
})(AllianceApiApiKeys = exports.AllianceApiApiKeys || (exports.AllianceApiApiKeys = {}));
class AllianceApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[AllianceApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List all alliances
     * List all active player alliances  ---  Alternate route: &#x60;/v1/alliances/&#x60;  Alternate route: &#x60;/legacy/alliances/&#x60;  Alternate route: &#x60;/dev/alliances/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliances(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/alliances/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get alliance information
     * Public information about an alliance  ---  Alternate route: &#x60;/v2/alliances/{alliance_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param allianceId An Eve alliance ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceId(allianceId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/alliances/{alliance_id}/'
            .replace('{' + 'alliance_id' + '}', String(allianceId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'allianceId' is not null or undefined
        if (allianceId === null || allianceId === undefined) {
            throw new Error('Required parameter allianceId was null or undefined when calling getAlliancesAllianceId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List alliance&#39;s corporations
     * List all current member corporations of an alliance  ---  Alternate route: &#x60;/v1/alliances/{alliance_id}/corporations/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/corporations/&#x60;  Alternate route: &#x60;/dev/alliances/{alliance_id}/corporations/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceIdCorporations(allianceId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/alliances/{alliance_id}/corporations/'
            .replace('{' + 'alliance_id' + '}', String(allianceId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'allianceId' is not null or undefined
        if (allianceId === null || allianceId === undefined) {
            throw new Error('Required parameter allianceId was null or undefined when calling getAlliancesAllianceIdCorporations.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get alliance icon
     * Get the icon urls for a alliance  ---  Alternate route: &#x60;/v1/alliances/{alliance_id}/icons/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/icons/&#x60;  Alternate route: &#x60;/dev/alliances/{alliance_id}/icons/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceIdIcons(allianceId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/alliances/{alliance_id}/icons/'
            .replace('{' + 'alliance_id' + '}', String(allianceId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'allianceId' is not null or undefined
        if (allianceId === null || allianceId === undefined) {
            throw new Error('Required parameter allianceId was null or undefined when calling getAlliancesAllianceIdIcons.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get alliance names
     * Resolve a set of alliance IDs to alliance names  ---  Alternate route: &#x60;/v1/alliances/names/&#x60;  Alternate route: &#x60;/legacy/alliances/names/&#x60;  Alternate route: &#x60;/dev/alliances/names/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param allianceIds A comma separated list of alliance IDs
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesNames(allianceIds, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/alliances/names/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'allianceIds' is not null or undefined
        if (allianceIds === null || allianceIds === undefined) {
            throw new Error('Required parameter allianceIds was null or undefined when calling getAlliancesNames.');
        }
        if (allianceIds !== undefined) {
            queryParameters['alliance_ids'] = allianceIds;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.AllianceApi = AllianceApi;
var AssetsApiApiKeys;
(function (AssetsApiApiKeys) {
})(AssetsApiApiKeys = exports.AssetsApiApiKeys || (exports.AssetsApiApiKeys = {}));
class AssetsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[AssetsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get character assets
     * Return a list of the characters assets  ---  Alternate route: &#x60;/v1/characters/{character_id}/assets/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/assets/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/assets/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId Character id of the target character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdAssets(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/assets/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdAssets.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.AssetsApi = AssetsApi;
var BookmarksApiApiKeys;
(function (BookmarksApiApiKeys) {
})(BookmarksApiApiKeys = exports.BookmarksApiApiKeys || (exports.BookmarksApiApiKeys = {}));
class BookmarksApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[BookmarksApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List bookmarks
     * List your character&#39;s personal bookmarks  ---  Alternate route: &#x60;/v1/characters/{character_id}/bookmarks/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/bookmarks/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/bookmarks/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdBookmarks(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/bookmarks/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdBookmarks.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List bookmark folders
     * List your character&#39;s personal bookmark folders  ---  Alternate route: &#x60;/v1/characters/{character_id}/bookmarks/folders/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/bookmarks/folders/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/bookmarks/folders/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdBookmarksFolders(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/bookmarks/folders/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdBookmarksFolders.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.BookmarksApi = BookmarksApi;
var CalendarApiApiKeys;
(function (CalendarApiApiKeys) {
})(CalendarApiApiKeys = exports.CalendarApiApiKeys || (exports.CalendarApiApiKeys = {}));
class CalendarApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[CalendarApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List calendar event summaries
     * Get 50 event summaries from the calendar. If no event ID is given, the resource will return the next 50 chronological event summaries from now. If an event ID is specified, it will return the next 50 chronological event summaries from after that event.   ---  Alternate route: &#x60;/v1/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/calendar/&#x60;   ---  This route is cached for up to 5 seconds
     * @param characterId The character to retrieve events from
     * @param datasource The server name you would like data from
     * @param fromEvent The event ID to retrieve events from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCalendar(characterId, datasource, fromEvent, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/calendar/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdCalendar.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (fromEvent !== undefined) {
            queryParameters['from_event'] = fromEvent;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get an event
     * Get all the information for a specific event  ---  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/calendar/{event_id}/&#x60;   ---  This route is cached for up to 5 seconds
     * @param characterId The character id requesting the event
     * @param eventId The id of the event requested
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCalendarEventId(characterId, eventId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/calendar/{event_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'event_id' + '}', String(eventId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdCalendarEventId.');
        }
        // verify required parameter 'eventId' is not null or undefined
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling getCharactersCharacterIdCalendarEventId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Respond to an event
     * Set your response status to an event  ---  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/calendar/{event_id}/&#x60;
     * @param characterId The character ID requesting the event
     * @param eventId The ID of the event requested
     * @param response The response value to set, overriding current value.
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCharactersCharacterIdCalendarEventId(characterId, eventId, response, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/calendar/{event_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'event_id' + '}', String(eventId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling putCharactersCharacterIdCalendarEventId.');
        }
        // verify required parameter 'eventId' is not null or undefined
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling putCharactersCharacterIdCalendarEventId.');
        }
        // verify required parameter 'response' is not null or undefined
        if (response === null || response === undefined) {
            throw new Error('Required parameter response was null or undefined when calling putCharactersCharacterIdCalendarEventId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: response,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CalendarApi = CalendarApi;
var CharacterApiApiKeys;
(function (CharacterApiApiKeys) {
})(CharacterApiApiKeys = exports.CharacterApiApiKeys || (exports.CharacterApiApiKeys = {}));
class CharacterApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[CharacterApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get character&#39;s public information
     * Public information about a character  ---  Alternate route: &#x60;/v4/characters/{character_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterId(characterId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get agents research
     * Return a list of agents research information for a character. The formula for finding the current research points with an agent is: currentPoints &#x3D; remainderPoints + pointsPerDay * days(currentTime - researchStartDate)  ---  Alternate route: &#x60;/v1/characters/{character_id}/agents_research/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/agents_research/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/agents_research/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdAgentsResearch(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/agents_research/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdAgentsResearch.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get chat channels
     * Return chat channels that a character is the owner or an operator of  ---  Alternate route: &#x60;/v1/characters/{character_id}/chat_channels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/chat_channels/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/chat_channels/&#x60;   ---  This route is cached for up to 300 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdChatChannels(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/chat_channels/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdChatChannels.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation history
     * Get a list of all the corporations a character has been a member of  ---  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/corporationhistory/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCorporationhistory(characterId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/corporationhistory/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdCorporationhistory.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get medals
     * Return a list of medals the character has  ---  Alternate route: &#x60;/v1/characters/{character_id}/medals/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/medals/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/medals/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMedals(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/medals/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdMedals.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character portraits
     * Get portrait urls for a character  ---  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/portrait/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdPortrait(characterId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/portrait/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdPortrait.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get standings
     * Return character standings from agents, NPC corporations, and factions  ---  Alternate route: &#x60;/v1/characters/{character_id}/standings/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/standings/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/standings/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdStandings(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/standings/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdStandings.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character names
     * Resolve a set of character IDs to character names  ---  Alternate route: &#x60;/v1/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/dev/characters/names/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterIds A comma separated list of character IDs
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersNames(characterIds, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/names/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterIds' is not null or undefined
        if (characterIds === null || characterIds === undefined) {
            throw new Error('Required parameter characterIds was null or undefined when calling getCharactersNames.');
        }
        if (characterIds !== undefined) {
            queryParameters['character_ids'] = characterIds;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Character affiliation
     * Bulk lookup of character IDs to corporation, alliance and faction  ---  Alternate route: &#x60;/v1/characters/affiliation/&#x60;  Alternate route: &#x60;/legacy/characters/affiliation/&#x60;  Alternate route: &#x60;/dev/characters/affiliation/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characters The character IDs to fetch affiliations for
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersAffiliation(characters, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/affiliation/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characters' is not null or undefined
        if (characters === null || characters === undefined) {
            throw new Error('Required parameter characters was null or undefined when calling postCharactersAffiliation.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: characters,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Calculate a CSPA charge cost
     * Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  ---  Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/cspa/&#x60;
     * @param characterId An EVE character ID
     * @param characters The target characters to calculate the charge for
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdCspa(characterId, characters, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/cspa/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling postCharactersCharacterIdCspa.');
        }
        // verify required parameter 'characters' is not null or undefined
        if (characters === null || characters === undefined) {
            throw new Error('Required parameter characters was null or undefined when calling postCharactersCharacterIdCspa.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: characters,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CharacterApi = CharacterApi;
var ClonesApiApiKeys;
(function (ClonesApiApiKeys) {
})(ClonesApiApiKeys = exports.ClonesApiApiKeys || (exports.ClonesApiApiKeys = {}));
class ClonesApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[ClonesApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get clones
     * A list of the character&#39;s clones  ---  Alternate route: &#x60;/v2/characters/{character_id}/clones/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/clones/&#x60;   ---  This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdClones(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/clones/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdClones.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ClonesApi = ClonesApi;
var ContactsApiApiKeys;
(function (ContactsApiApiKeys) {
})(ContactsApiApiKeys = exports.ContactsApiApiKeys || (exports.ContactsApiApiKeys = {}));
class ContactsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[ContactsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Delete contacts
     * Bulk delete contacts  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;
     * @param characterId ID for a character
     * @param contactIds A list of contacts to edit
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdContacts(characterId, contactIds, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/contacts/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling deleteCharactersCharacterIdContacts.');
        }
        // verify required parameter 'contactIds' is not null or undefined
        if (contactIds === null || contactIds === undefined) {
            throw new Error('Required parameter contactIds was null or undefined when calling deleteCharactersCharacterIdContacts.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: contactIds,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get contacts
     * Return contacts of a character  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;   ---  This route is cached for up to 300 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param page page integer
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContacts(characterId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/contacts/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdContacts.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get contact labels
     * Return custom labels for contacts the character defined  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/labels/&#x60;   ---  This route is cached for up to 300 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContactsLabels(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/contacts/labels/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdContactsLabels.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Add contacts
     * Bulk add contacts with same settings  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;
     * @param characterId ID for a character
     * @param contactIds A list of contacts to add
     * @param standing Standing for the new contact
     * @param datasource The server name you would like data from
     * @param labelId Add a custom label to the new contact
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param watched Whether the new contact should be watched, note this is only effective on characters
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdContacts(characterId, contactIds, standing, datasource, labelId, token, userAgent, watched, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/contacts/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling postCharactersCharacterIdContacts.');
        }
        // verify required parameter 'contactIds' is not null or undefined
        if (contactIds === null || contactIds === undefined) {
            throw new Error('Required parameter contactIds was null or undefined when calling postCharactersCharacterIdContacts.');
        }
        // verify required parameter 'standing' is not null or undefined
        if (standing === null || standing === undefined) {
            throw new Error('Required parameter standing was null or undefined when calling postCharactersCharacterIdContacts.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (labelId !== undefined) {
            queryParameters['label_id'] = labelId;
        }
        if (standing !== undefined) {
            queryParameters['standing'] = standing;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        if (watched !== undefined) {
            queryParameters['watched'] = watched;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: contactIds,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Edit contacts
     * Bulk edit contacts with same settings  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;
     * @param characterId ID for a character
     * @param contactIds A list of contacts to edit
     * @param standing Standing for the contact
     * @param datasource The server name you would like data from
     * @param labelId Add a custom label to the contact, use 0 for clearing label
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param watched Whether the contact should be watched, note this is only effective on characters
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCharactersCharacterIdContacts(characterId, contactIds, standing, datasource, labelId, token, userAgent, watched, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/contacts/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling putCharactersCharacterIdContacts.');
        }
        // verify required parameter 'contactIds' is not null or undefined
        if (contactIds === null || contactIds === undefined) {
            throw new Error('Required parameter contactIds was null or undefined when calling putCharactersCharacterIdContacts.');
        }
        // verify required parameter 'standing' is not null or undefined
        if (standing === null || standing === undefined) {
            throw new Error('Required parameter standing was null or undefined when calling putCharactersCharacterIdContacts.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (labelId !== undefined) {
            queryParameters['label_id'] = labelId;
        }
        if (standing !== undefined) {
            queryParameters['standing'] = standing;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        if (watched !== undefined) {
            queryParameters['watched'] = watched;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: contactIds,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.ContactsApi = ContactsApi;
var CorporationApiApiKeys;
(function (CorporationApiApiKeys) {
})(CorporationApiApiKeys = exports.CorporationApiApiKeys || (exports.CorporationApiApiKeys = {}));
class CorporationApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[CorporationApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get corporation information
     * Public information about a corporation  ---  Alternate route: &#x60;/v3/corporations/{corporation_id}/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId An Eve corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationId(corporationId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get alliance history
     * Get a list of all the alliances a corporation has been a member of  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/alliancehistory/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdAlliancehistory(corporationId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/alliancehistory/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdAlliancehistory.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation icon
     * Get the icon urls for a corporation  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/icons/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdIcons(corporationId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/icons/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdIcons.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation members
     * Read the current list of members if the calling character is a member.  ---  Alternate route: &#x60;/v2/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/members/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId A corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMembers(corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/members/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdMembers.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation member roles
     * Return the roles of all members if the character has the personnel manager role or any grantable role.  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/roles/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId A corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdRoles(corporationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/roles/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdRoles.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation structures
     * Get a list of corporation structures  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/structures/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/structures/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/structures/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId A corporation ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param page Which page to query, 250 structures per page
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdStructures(corporationId, datasource, language, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/structures/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdStructures.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get corporation names
     * Resolve a set of corporation IDs to corporation names  ---  Alternate route: &#x60;/v1/corporations/names/&#x60;  Alternate route: &#x60;/legacy/corporations/names/&#x60;  Alternate route: &#x60;/dev/corporations/names/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationIds A comma separated list of corporation IDs
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsNames(corporationIds, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/names/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationIds' is not null or undefined
        if (corporationIds === null || corporationIds === undefined) {
            throw new Error('Required parameter corporationIds was null or undefined when calling getCorporationsNames.');
        }
        if (corporationIds !== undefined) {
            queryParameters['corporation_ids'] = corporationIds;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get npc corporations
     * Get a list of npc corporations  ---  Alternate route: &#x60;/v1/corporations/npccorps/&#x60;  Alternate route: &#x60;/legacy/corporations/npccorps/&#x60;  Alternate route: &#x60;/dev/corporations/npccorps/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsNpccorps(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/npccorps/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update structure vulnerability schedule
     * Update the vulnerability window schedule of a corporation structure  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/structures/{structure_id}/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/structures/{structure_id}/&#x60;
     * @param corporationId A corporation ID
     * @param newSchedule New vulnerability window schedule for the structure
     * @param structureId A structure ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCorporationsCorporationIdStructuresStructureId(corporationId, newSchedule, structureId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/corporations/{corporation_id}/structures/{structure_id}/'
            .replace('{' + 'corporation_id' + '}', String(corporationId))
            .replace('{' + 'structure_id' + '}', String(structureId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling putCorporationsCorporationIdStructuresStructureId.');
        }
        // verify required parameter 'newSchedule' is not null or undefined
        if (newSchedule === null || newSchedule === undefined) {
            throw new Error('Required parameter newSchedule was null or undefined when calling putCorporationsCorporationIdStructuresStructureId.');
        }
        // verify required parameter 'structureId' is not null or undefined
        if (structureId === null || structureId === undefined) {
            throw new Error('Required parameter structureId was null or undefined when calling putCorporationsCorporationIdStructuresStructureId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: newSchedule,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.CorporationApi = CorporationApi;
var DogmaApiApiKeys;
(function (DogmaApiApiKeys) {
})(DogmaApiApiKeys = exports.DogmaApiApiKeys || (exports.DogmaApiApiKeys = {}));
class DogmaApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[DogmaApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get attributes
     * Get a list of dogma attribute ids  ---  Alternate route: &#x60;/v1/dogma/attributes/&#x60;  Alternate route: &#x60;/legacy/dogma/attributes/&#x60;  Alternate route: &#x60;/dev/dogma/attributes/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaAttributes(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/dogma/attributes/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get attribute information
     * Get information on a dogma attribute  ---  Alternate route: &#x60;/v1/dogma/attributes/{attribute_id}/&#x60;  Alternate route: &#x60;/legacy/dogma/attributes/{attribute_id}/&#x60;  Alternate route: &#x60;/dev/dogma/attributes/{attribute_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param attributeId A dogma attribute ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaAttributesAttributeId(attributeId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/dogma/attributes/{attribute_id}/'
            .replace('{' + 'attribute_id' + '}', String(attributeId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'attributeId' is not null or undefined
        if (attributeId === null || attributeId === undefined) {
            throw new Error('Required parameter attributeId was null or undefined when calling getDogmaAttributesAttributeId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get effects
     * Get a list of dogma effect ids  ---  Alternate route: &#x60;/v1/dogma/effects/&#x60;  Alternate route: &#x60;/legacy/dogma/effects/&#x60;  Alternate route: &#x60;/dev/dogma/effects/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaEffects(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/dogma/effects/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get effect information
     * Get information on a dogma effect  ---  Alternate route: &#x60;/v1/dogma/effects/{effect_id}/&#x60;  Alternate route: &#x60;/legacy/dogma/effects/{effect_id}/&#x60;  Alternate route: &#x60;/dev/dogma/effects/{effect_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param effectId A dogma effect ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaEffectsEffectId(effectId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/dogma/effects/{effect_id}/'
            .replace('{' + 'effect_id' + '}', String(effectId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'effectId' is not null or undefined
        if (effectId === null || effectId === undefined) {
            throw new Error('Required parameter effectId was null or undefined when calling getDogmaEffectsEffectId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.DogmaApi = DogmaApi;
var FittingsApiApiKeys;
(function (FittingsApiApiKeys) {
})(FittingsApiApiKeys = exports.FittingsApiApiKeys || (exports.FittingsApiApiKeys = {}));
class FittingsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[FittingsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Delete fitting
     * Delete a fitting from a character  ---  Alternate route: &#x60;/v1/characters/{character_id}/fittings/{fitting_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fittings/{fitting_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/fittings/{fitting_id}/&#x60;
     * @param characterId ID for a character
     * @param fittingId ID for a fitting of this character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdFittingsFittingId(characterId, fittingId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/fittings/{fitting_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'fitting_id' + '}', String(fittingId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling deleteCharactersCharacterIdFittingsFittingId.');
        }
        // verify required parameter 'fittingId' is not null or undefined
        if (fittingId === null || fittingId === undefined) {
            throw new Error('Required parameter fittingId was null or undefined when calling deleteCharactersCharacterIdFittingsFittingId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get fittings
     * Return fittings of a character  ---  Alternate route: &#x60;/v1/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/fittings/&#x60;   ---  This route is cached for up to 300 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdFittings(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/fittings/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdFittings.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create fitting
     * Save a new fitting for a character  ---  Alternate route: &#x60;/v1/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/fittings/&#x60;
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param fitting Details about the new fitting
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdFittings(characterId, datasource, fitting, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/fittings/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling postCharactersCharacterIdFittings.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: fitting,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.FittingsApi = FittingsApi;
var FleetsApiApiKeys;
(function (FleetsApiApiKeys) {
})(FleetsApiApiKeys = exports.FleetsApiApiKeys || (exports.FleetsApiApiKeys = {}));
class FleetsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[FleetsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Kick fleet member
     * Kick a fleet member  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param memberId The character ID of a member in this fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteFleetsFleetIdMembersMemberId(fleetId, memberId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/members/{member_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'member_id' + '}', String(memberId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling deleteFleetsFleetIdMembersMemberId.');
        }
        // verify required parameter 'memberId' is not null or undefined
        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling deleteFleetsFleetIdMembersMemberId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Delete fleet squad
     * Delete a fleet squad, only empty squads can be deleted  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param squadId The squad to delete
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteFleetsFleetIdSquadsSquadId(fleetId, squadId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/squads/{squad_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'squad_id' + '}', String(squadId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling deleteFleetsFleetIdSquadsSquadId.');
        }
        // verify required parameter 'squadId' is not null or undefined
        if (squadId === null || squadId === undefined) {
            throw new Error('Required parameter squadId was null or undefined when calling deleteFleetsFleetIdSquadsSquadId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Delete fleet wing
     * Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param wingId The wing to delete
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteFleetsFleetIdWingsWingId(fleetId, wingId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/wings/{wing_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'wing_id' + '}', String(wingId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling deleteFleetsFleetIdWingsWingId.');
        }
        // verify required parameter 'wingId' is not null or undefined
        if (wingId === null || wingId === undefined) {
            throw new Error('Required parameter wingId was null or undefined when calling deleteFleetsFleetIdWingsWingId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get fleet information
     * Return details about a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60;   ---  This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFleetsFleetId(fleetId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling getFleetsFleetId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get fleet members
     * Return information about fleet members  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60;   ---  This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFleetsFleetIdMembers(fleetId, datasource, language, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/members/'
            .replace('{' + 'fleet_id' + '}', String(fleetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling getFleetsFleetIdMembers.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get fleet wings
     * Return information about wings in a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60;   ---  This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFleetsFleetIdWings(fleetId, datasource, language, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/wings/'
            .replace('{' + 'fleet_id' + '}', String(fleetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling getFleetsFleetIdWings.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create fleet invitation
     * Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60;
     * @param fleetId ID for a fleet
     * @param invitation Details of the invitation
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postFleetsFleetIdMembers(fleetId, invitation, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/members/'
            .replace('{' + 'fleet_id' + '}', String(fleetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling postFleetsFleetIdMembers.');
        }
        // verify required parameter 'invitation' is not null or undefined
        if (invitation === null || invitation === undefined) {
            throw new Error('Required parameter invitation was null or undefined when calling postFleetsFleetIdMembers.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: invitation,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create fleet wing
     * Create a new wing in a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60;
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postFleetsFleetIdWings(fleetId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/wings/'
            .replace('{' + 'fleet_id' + '}', String(fleetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling postFleetsFleetIdWings.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create fleet squad
     * Create a new squad in a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;
     * @param fleetId ID for a fleet
     * @param wingId The wing_id to create squad in
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postFleetsFleetIdWingsWingIdSquads(fleetId, wingId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/wings/{wing_id}/squads/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'wing_id' + '}', String(wingId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling postFleetsFleetIdWingsWingIdSquads.');
        }
        // verify required parameter 'wingId' is not null or undefined
        if (wingId === null || wingId === undefined) {
            throw new Error('Required parameter wingId was null or undefined when calling postFleetsFleetIdWingsWingIdSquads.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update fleet
     * Update settings about a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param newSettings What to update for this fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetId(fleetId, newSettings, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling putFleetsFleetId.');
        }
        // verify required parameter 'newSettings' is not null or undefined
        if (newSettings === null || newSettings === undefined) {
            throw new Error('Required parameter newSettings was null or undefined when calling putFleetsFleetId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: newSettings,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Move fleet member
     * Move a fleet member around  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param memberId The character ID of a member in this fleet
     * @param movement Details of the invitation
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetIdMembersMemberId(fleetId, memberId, movement, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/members/{member_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'member_id' + '}', String(memberId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling putFleetsFleetIdMembersMemberId.');
        }
        // verify required parameter 'memberId' is not null or undefined
        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling putFleetsFleetIdMembersMemberId.');
        }
        // verify required parameter 'movement' is not null or undefined
        if (movement === null || movement === undefined) {
            throw new Error('Required parameter movement was null or undefined when calling putFleetsFleetIdMembersMemberId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: movement,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Rename fleet squad
     * Rename a fleet squad  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param naming New name of the squad
     * @param squadId The squad to rename
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetIdSquadsSquadId(fleetId, naming, squadId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/squads/{squad_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'squad_id' + '}', String(squadId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling putFleetsFleetIdSquadsSquadId.');
        }
        // verify required parameter 'naming' is not null or undefined
        if (naming === null || naming === undefined) {
            throw new Error('Required parameter naming was null or undefined when calling putFleetsFleetIdSquadsSquadId.');
        }
        // verify required parameter 'squadId' is not null or undefined
        if (squadId === null || squadId === undefined) {
            throw new Error('Required parameter squadId was null or undefined when calling putFleetsFleetIdSquadsSquadId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: naming,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Rename fleet wing
     * Rename a fleet wing  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param naming New name of the wing
     * @param wingId The wing to rename
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetIdWingsWingId(fleetId, naming, wingId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/fleets/{fleet_id}/wings/{wing_id}/'
            .replace('{' + 'fleet_id' + '}', String(fleetId))
            .replace('{' + 'wing_id' + '}', String(wingId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling putFleetsFleetIdWingsWingId.');
        }
        // verify required parameter 'naming' is not null or undefined
        if (naming === null || naming === undefined) {
            throw new Error('Required parameter naming was null or undefined when calling putFleetsFleetIdWingsWingId.');
        }
        // verify required parameter 'wingId' is not null or undefined
        if (wingId === null || wingId === undefined) {
            throw new Error('Required parameter wingId was null or undefined when calling putFleetsFleetIdWingsWingId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: naming,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.FleetsApi = FleetsApi;
var IncursionsApiApiKeys;
(function (IncursionsApiApiKeys) {
})(IncursionsApiApiKeys = exports.IncursionsApiApiKeys || (exports.IncursionsApiApiKeys = {}));
class IncursionsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[IncursionsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List incursions
     * Return a list of current incursions  ---  Alternate route: &#x60;/v1/incursions/&#x60;  Alternate route: &#x60;/legacy/incursions/&#x60;  Alternate route: &#x60;/dev/incursions/&#x60;   ---  This route is cached for up to 300 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getIncursions(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/incursions/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.IncursionsApi = IncursionsApi;
var IndustryApiApiKeys;
(function (IndustryApiApiKeys) {
})(IndustryApiApiKeys = exports.IndustryApiApiKeys || (exports.IndustryApiApiKeys = {}));
class IndustryApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[IndustryApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List industry facilities
     * Return a list of industry facilities  ---  Alternate route: &#x60;/v1/industry/facilities/&#x60;  Alternate route: &#x60;/legacy/industry/facilities/&#x60;  Alternate route: &#x60;/dev/industry/facilities/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getIndustryFacilities(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/industry/facilities/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List solar system cost indices
     * Return cost indices for solar systems  ---  Alternate route: &#x60;/v1/industry/systems/&#x60;  Alternate route: &#x60;/legacy/industry/systems/&#x60;  Alternate route: &#x60;/dev/industry/systems/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getIndustrySystems(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/industry/systems/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.IndustryApi = IndustryApi;
var InsuranceApiApiKeys;
(function (InsuranceApiApiKeys) {
})(InsuranceApiApiKeys = exports.InsuranceApiApiKeys || (exports.InsuranceApiApiKeys = {}));
class InsuranceApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[InsuranceApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List insurance levels
     * Return available insurance levels for all ship types  ---  Alternate route: &#x60;/v1/insurance/prices/&#x60;  Alternate route: &#x60;/legacy/insurance/prices/&#x60;  Alternate route: &#x60;/dev/insurance/prices/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getInsurancePrices(datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/insurance/prices/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.InsuranceApi = InsuranceApi;
var KillmailsApiApiKeys;
(function (KillmailsApiApiKeys) {
})(KillmailsApiApiKeys = exports.KillmailsApiApiKeys || (exports.KillmailsApiApiKeys = {}));
class KillmailsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[KillmailsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List kills and losses
     * Return a list of character&#39;s recent kills and losses  ---  Alternate route: &#x60;/v1/characters/{character_id}/killmails/recent/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/killmails/recent/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/killmails/recent/&#x60;   ---  This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param maxCount How many killmails to return at maximum
     * @param maxKillId Only return killmails with ID smaller than this.
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdKillmailsRecent(characterId, datasource, maxCount, maxKillId, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/killmails/recent/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdKillmailsRecent.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (maxCount !== undefined) {
            queryParameters['max_count'] = maxCount;
        }
        if (maxKillId !== undefined) {
            queryParameters['max_kill_id'] = maxKillId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get a single killmail
     * Return a single killmail from its ID and hash  ---  Alternate route: &#x60;/v1/killmails/{killmail_id}/{killmail_hash}/&#x60;  Alternate route: &#x60;/legacy/killmails/{killmail_id}/{killmail_hash}/&#x60;  Alternate route: &#x60;/dev/killmails/{killmail_id}/{killmail_hash}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param killmailHash The killmail hash for verification
     * @param killmailId The killmail ID to be queried
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getKillmailsKillmailIdKillmailHash(killmailHash, killmailId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/killmails/{killmail_id}/{killmail_hash}/'
            .replace('{' + 'killmail_hash' + '}', String(killmailHash))
            .replace('{' + 'killmail_id' + '}', String(killmailId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'killmailHash' is not null or undefined
        if (killmailHash === null || killmailHash === undefined) {
            throw new Error('Required parameter killmailHash was null or undefined when calling getKillmailsKillmailIdKillmailHash.');
        }
        // verify required parameter 'killmailId' is not null or undefined
        if (killmailId === null || killmailId === undefined) {
            throw new Error('Required parameter killmailId was null or undefined when calling getKillmailsKillmailIdKillmailHash.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.KillmailsApi = KillmailsApi;
var LocationApiApiKeys;
(function (LocationApiApiKeys) {
})(LocationApiApiKeys = exports.LocationApiApiKeys || (exports.LocationApiApiKeys = {}));
class LocationApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[LocationApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get character location
     * Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable.  ---  Alternate route: &#x60;/v1/characters/{character_id}/location/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/location/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/location/&#x60;   ---  This route is cached for up to 5 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdLocation(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/location/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdLocation.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get current ship
     * Get the current ship type, name and id  ---  Alternate route: &#x60;/v1/characters/{character_id}/ship/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/ship/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/ship/&#x60;   ---  This route is cached for up to 5 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdShip(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/ship/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdShip.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.LocationApi = LocationApi;
var LoyaltyApiApiKeys;
(function (LoyaltyApiApiKeys) {
})(LoyaltyApiApiKeys = exports.LoyaltyApiApiKeys || (exports.LoyaltyApiApiKeys = {}));
class LoyaltyApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[LoyaltyApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get loyalty points
     * Return a list of loyalty points for all corporations the character has worked for  ---  Alternate route: &#x60;/v1/characters/{character_id}/loyalty/points/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/loyalty/points/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/loyalty/points/&#x60;
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdLoyaltyPoints(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/loyalty/points/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdLoyaltyPoints.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List loyalty store offers
     * Return a list of offers from a specific corporation&#39;s loyalty store  ---  Alternate route: &#x60;/v1/loyalty/stores/{corporation_id}/offers/&#x60;  Alternate route: &#x60;/legacy/loyalty/stores/{corporation_id}/offers/&#x60;  Alternate route: &#x60;/dev/loyalty/stores/{corporation_id}/offers/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId ID of a corporation
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getLoyaltyStoresCorporationIdOffers(corporationId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/loyalty/stores/{corporation_id}/offers/'
            .replace('{' + 'corporation_id' + '}', String(corporationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'corporationId' is not null or undefined
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getLoyaltyStoresCorporationIdOffers.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.LoyaltyApi = LoyaltyApi;
var MailApiApiKeys;
(function (MailApiApiKeys) {
})(MailApiApiKeys = exports.MailApiApiKeys || (exports.MailApiApiKeys = {}));
class MailApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[MailApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Delete a mail label
     * Delete a mail label  ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/labels/{label_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/labels/{label_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/{label_id}/&#x60;
     * @param characterId An EVE character ID
     * @param labelId An EVE label id
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdMailLabelsLabelId(characterId, labelId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/labels/{label_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'label_id' + '}', String(labelId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling deleteCharactersCharacterIdMailLabelsLabelId.');
        }
        // verify required parameter 'labelId' is not null or undefined
        if (labelId === null || labelId === undefined) {
            throw new Error('Required parameter labelId was null or undefined when calling deleteCharactersCharacterIdMailLabelsLabelId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Delete a mail
     * Delete a mail  ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;
     * @param characterId An EVE character ID
     * @param mailId An EVE mail ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdMailMailId(characterId, mailId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/{mail_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'mail_id' + '}', String(mailId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling deleteCharactersCharacterIdMailMailId.');
        }
        // verify required parameter 'mailId' is not null or undefined
        if (mailId === null || mailId === undefined) {
            throw new Error('Required parameter mailId was null or undefined when calling deleteCharactersCharacterIdMailMailId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'DELETE',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Return mail headers
     * Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60;   ---  This route is cached for up to 30 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param labels Fetch only mails that match one or more of the given labels
     * @param lastMailId List only mail with an ID lower than the given ID, if present
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMail(characterId, datasource, labels, lastMailId, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdMail.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (labels !== undefined) {
            queryParameters['labels'] = labels;
        }
        if (lastMailId !== undefined) {
            queryParameters['last_mail_id'] = lastMailId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get mail labels and unread counts
     * Return a list of the users mail labels, unread counts for each label and a total unread count.  ---  Alternate route: &#x60;/v3/characters/{character_id}/mail/labels/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60;   ---  This route is cached for up to 30 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMailLabels(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/labels/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdMailLabels.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Return mailing list subscriptions
     * Return all mailing lists that the character is subscribed to   ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/lists/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/lists/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/lists/&#x60;   ---  This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMailLists(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/lists/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdMailLists.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Return a mail
     * Return the contents of an EVE mail  ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;   ---  This route is cached for up to 30 seconds
     * @param characterId An EVE character ID
     * @param mailId An EVE mail ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMailMailId(characterId, mailId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/{mail_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'mail_id' + '}', String(mailId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdMailMailId.');
        }
        // verify required parameter 'mailId' is not null or undefined
        if (mailId === null || mailId === undefined) {
            throw new Error('Required parameter mailId was null or undefined when calling getCharactersCharacterIdMailMailId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Send a new mail
     * Create and send a new mail  ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60;
     * @param characterId The sender&#39;s character ID
     * @param mail The mail to send
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdMail(characterId, mail, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling postCharactersCharacterIdMail.');
        }
        // verify required parameter 'mail' is not null or undefined
        if (mail === null || mail === undefined) {
            throw new Error('Required parameter mail was null or undefined when calling postCharactersCharacterIdMail.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: mail,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create a mail label
     * Create a mail label  ---  Alternate route: &#x60;/v2/characters/{character_id}/mail/labels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/labels/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60;
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param label Label to create
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdMailLabels(characterId, datasource, label, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/labels/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling postCharactersCharacterIdMailLabels.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: label,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update metadata about a mail
     * Update metadata about a mail  ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;
     * @param characterId An EVE character ID
     * @param contents Data used to update the mail
     * @param mailId An EVE mail ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCharactersCharacterIdMailMailId(characterId, contents, mailId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/mail/{mail_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'mail_id' + '}', String(mailId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling putCharactersCharacterIdMailMailId.');
        }
        // verify required parameter 'contents' is not null or undefined
        if (contents === null || contents === undefined) {
            throw new Error('Required parameter contents was null or undefined when calling putCharactersCharacterIdMailMailId.');
        }
        // verify required parameter 'mailId' is not null or undefined
        if (mailId === null || mailId === undefined) {
            throw new Error('Required parameter mailId was null or undefined when calling putCharactersCharacterIdMailMailId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'PUT',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: contents,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.MailApi = MailApi;
var MarketApiApiKeys;
(function (MarketApiApiKeys) {
})(MarketApiApiKeys = exports.MarketApiApiKeys || (exports.MarketApiApiKeys = {}));
class MarketApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[MarketApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get item groups
     * Get a list of item groups  ---  Alternate route: &#x60;/v1/markets/groups/&#x60;  Alternate route: &#x60;/legacy/markets/groups/&#x60;  Alternate route: &#x60;/dev/markets/groups/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsGroups(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/markets/groups/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get item group information
     * Get information on an item group  ---  Alternate route: &#x60;/v1/markets/groups/{market_group_id}/&#x60;  Alternate route: &#x60;/legacy/markets/groups/{market_group_id}/&#x60;  Alternate route: &#x60;/dev/markets/groups/{market_group_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param marketGroupId An Eve item group ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsGroupsMarketGroupId(marketGroupId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/markets/groups/{market_group_id}/'
            .replace('{' + 'market_group_id' + '}', String(marketGroupId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'marketGroupId' is not null or undefined
        if (marketGroupId === null || marketGroupId === undefined) {
            throw new Error('Required parameter marketGroupId was null or undefined when calling getMarketsGroupsMarketGroupId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List market prices
     * Return a list of prices  ---  Alternate route: &#x60;/v1/markets/prices/&#x60;  Alternate route: &#x60;/legacy/markets/prices/&#x60;  Alternate route: &#x60;/dev/markets/prices/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsPrices(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/markets/prices/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List historical market statistics in a region
     * Return a list of historical market statistics for the specified type in a region  ---  Alternate route: &#x60;/v1/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/dev/markets/{region_id}/history/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param regionId Return statistics in this region
     * @param typeId Return statistics for this type
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsRegionIdHistory(regionId, typeId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/markets/{region_id}/history/'
            .replace('{' + 'region_id' + '}', String(regionId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'regionId' is not null or undefined
        if (regionId === null || regionId === undefined) {
            throw new Error('Required parameter regionId was null or undefined when calling getMarketsRegionIdHistory.');
        }
        // verify required parameter 'typeId' is not null or undefined
        if (typeId === null || typeId === undefined) {
            throw new Error('Required parameter typeId was null or undefined when calling getMarketsRegionIdHistory.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (typeId !== undefined) {
            queryParameters['type_id'] = typeId;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List orders in a region
     * Return a list of orders in a region  ---  Alternate route: &#x60;/v1/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/dev/markets/{region_id}/orders/&#x60;   ---  This route is cached for up to 300 seconds
     * @param orderType Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders.
     * @param regionId Return orders in this region
     * @param datasource The server name you would like data from
     * @param page Which page to query, only used for querying without type_id. Starting at 1
     * @param typeId Return orders only for this type
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsRegionIdOrders(orderType, regionId, datasource, page, typeId, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/markets/{region_id}/orders/'
            .replace('{' + 'region_id' + '}', String(regionId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'orderType' is not null or undefined
        if (orderType === null || orderType === undefined) {
            throw new Error('Required parameter orderType was null or undefined when calling getMarketsRegionIdOrders.');
        }
        // verify required parameter 'regionId' is not null or undefined
        if (regionId === null || regionId === undefined) {
            throw new Error('Required parameter regionId was null or undefined when calling getMarketsRegionIdOrders.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (orderType !== undefined) {
            queryParameters['order_type'] = orderType;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (typeId !== undefined) {
            queryParameters['type_id'] = typeId;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List orders in a structure
     * Return all orders in a structure  ---  Alternate route: &#x60;/v1/markets/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/markets/structures/{structure_id}/&#x60;  Alternate route: &#x60;/dev/markets/structures/{structure_id}/&#x60;   ---  This route is cached for up to 300 seconds
     * @param structureId Return orders in this structure
     * @param datasource The server name you would like data from
     * @param page Which page to query, starting at 1
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsStructuresStructureId(structureId, datasource, page, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/markets/structures/{structure_id}/'
            .replace('{' + 'structure_id' + '}', String(structureId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'structureId' is not null or undefined
        if (structureId === null || structureId === undefined) {
            throw new Error('Required parameter structureId was null or undefined when calling getMarketsStructuresStructureId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.MarketApi = MarketApi;
var OpportunitiesApiApiKeys;
(function (OpportunitiesApiApiKeys) {
})(OpportunitiesApiApiKeys = exports.OpportunitiesApiApiKeys || (exports.OpportunitiesApiApiKeys = {}));
class OpportunitiesApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[OpportunitiesApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get a character&#39;s completed tasks
     * Return a list of tasks finished by a character  ---  Alternate route: &#x60;/v1/characters/{character_id}/opportunities/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/opportunities/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/opportunities/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdOpportunities(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/opportunities/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdOpportunities.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get opportunities groups
     * Return a list of opportunities groups  ---  Alternate route: &#x60;/v1/opportunities/groups/&#x60;  Alternate route: &#x60;/legacy/opportunities/groups/&#x60;  Alternate route: &#x60;/dev/opportunities/groups/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesGroups(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/opportunities/groups/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get opportunities group
     * Return information of an opportunities group  ---  Alternate route: &#x60;/v1/opportunities/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/opportunities/groups/{group_id}/&#x60;  Alternate route: &#x60;/dev/opportunities/groups/{group_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param groupId ID of an opportunities group
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesGroupsGroupId(groupId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/opportunities/groups/{group_id}/'
            .replace('{' + 'group_id' + '}', String(groupId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling getOpportunitiesGroupsGroupId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get opportunities tasks
     * Return a list of opportunities tasks  ---  Alternate route: &#x60;/v1/opportunities/tasks/&#x60;  Alternate route: &#x60;/legacy/opportunities/tasks/&#x60;  Alternate route: &#x60;/dev/opportunities/tasks/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesTasks(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/opportunities/tasks/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get opportunities task
     * Return information of an opportunities task  ---  Alternate route: &#x60;/v1/opportunities/tasks/{task_id}/&#x60;  Alternate route: &#x60;/legacy/opportunities/tasks/{task_id}/&#x60;  Alternate route: &#x60;/dev/opportunities/tasks/{task_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param taskId ID of an opportunities task
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesTasksTaskId(taskId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/opportunities/tasks/{task_id}/'
            .replace('{' + 'task_id' + '}', String(taskId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling getOpportunitiesTasksTaskId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.OpportunitiesApi = OpportunitiesApi;
var PlanetaryInteractionApiApiKeys;
(function (PlanetaryInteractionApiApiKeys) {
})(PlanetaryInteractionApiApiKeys = exports.PlanetaryInteractionApiApiKeys || (exports.PlanetaryInteractionApiApiKeys = {}));
class PlanetaryInteractionApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[PlanetaryInteractionApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get colonies
     * Returns a list of all planetary colonies owned by a character.  ---  Alternate route: &#x60;/v1/characters/{character_id}/planets/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/planets/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/planets/&#x60;   ---  This route is cached for up to 600 seconds
     * @param characterId Character id of the target character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdPlanets(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/planets/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdPlanets.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get colony layout
     * Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information on this endpoint will not update until this criteria is met.  ---  Alternate route: &#x60;/v2/characters/{character_id}/planets/{planet_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/planets/{planet_id}/&#x60;   ---  This route is cached for up to 600 seconds
     * @param characterId Character id of the target character
     * @param planetId Planet id of the target planet
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdPlanetsPlanetId(characterId, planetId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/planets/{planet_id}/'
            .replace('{' + 'character_id' + '}', String(characterId))
            .replace('{' + 'planet_id' + '}', String(planetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdPlanetsPlanetId.');
        }
        // verify required parameter 'planetId' is not null or undefined
        if (planetId === null || planetId === undefined) {
            throw new Error('Required parameter planetId was null or undefined when calling getCharactersCharacterIdPlanetsPlanetId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get schematic information
     * Get information on a planetary factory schematic  ---  Alternate route: &#x60;/v1/universe/schematics/{schematic_id}/&#x60;  Alternate route: &#x60;/legacy/universe/schematics/{schematic_id}/&#x60;  Alternate route: &#x60;/dev/universe/schematics/{schematic_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param schematicId A PI schematic ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSchematicsSchematicId(schematicId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/schematics/{schematic_id}/'
            .replace('{' + 'schematic_id' + '}', String(schematicId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'schematicId' is not null or undefined
        if (schematicId === null || schematicId === undefined) {
            throw new Error('Required parameter schematicId was null or undefined when calling getUniverseSchematicsSchematicId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.PlanetaryInteractionApi = PlanetaryInteractionApi;
var RoutesApiApiKeys;
(function (RoutesApiApiKeys) {
})(RoutesApiApiKeys = exports.RoutesApiApiKeys || (exports.RoutesApiApiKeys = {}));
class RoutesApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[RoutesApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get route
     * Get the systems between origin and destination  ---  Alternate route: &#x60;/legacy/route/{origin}/{destination}/&#x60;  Alternate route: &#x60;/dev/route/{origin}/{destination}/&#x60;  Alternate route: &#x60;/v1/route/{origin}/{destination}/&#x60;   ---  This route is cached for up to 86400 seconds
     * @param destination destination solar system ID
     * @param origin origin solar system ID
     * @param avoid avoid solar system ID(s)
     * @param connections connected solar system pairs
     * @param datasource The server name you would like data from
     * @param flag route security preference
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getRouteOriginDestination(destination, origin, avoid, connections, datasource, flag, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/route/{origin}/{destination}/'
            .replace('{' + 'destination' + '}', String(destination))
            .replace('{' + 'origin' + '}', String(origin));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'destination' is not null or undefined
        if (destination === null || destination === undefined) {
            throw new Error('Required parameter destination was null or undefined when calling getRouteOriginDestination.');
        }
        // verify required parameter 'origin' is not null or undefined
        if (origin === null || origin === undefined) {
            throw new Error('Required parameter origin was null or undefined when calling getRouteOriginDestination.');
        }
        if (avoid !== undefined) {
            queryParameters['avoid'] = avoid;
        }
        if (connections !== undefined) {
            queryParameters['connections'] = connections;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (flag !== undefined) {
            queryParameters['flag'] = flag;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.RoutesApi = RoutesApi;
var SearchApiApiKeys;
(function (SearchApiApiKeys) {
})(SearchApiApiKeys = exports.SearchApiApiKeys || (exports.SearchApiApiKeys = {}));
class SearchApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[SearchApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Search on a string
     * Search for entities that match a given sub-string.  ---  Alternate route: &#x60;/v2/characters/{character_id}/search/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param categories Type of entities to search for
     * @param characterId An EVE character ID
     * @param search The string to search on
     * @param datasource The server name you would like data from
     * @param language Search locale
     * @param strict Whether the search should be a strict match
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdSearch(categories, characterId, search, datasource, language, strict, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/search/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'categories' is not null or undefined
        if (categories === null || categories === undefined) {
            throw new Error('Required parameter categories was null or undefined when calling getCharactersCharacterIdSearch.');
        }
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdSearch.');
        }
        // verify required parameter 'search' is not null or undefined
        if (search === null || search === undefined) {
            throw new Error('Required parameter search was null or undefined when calling getCharactersCharacterIdSearch.');
        }
        if (categories !== undefined) {
            queryParameters['categories'] = categories;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (search !== undefined) {
            queryParameters['search'] = search;
        }
        if (strict !== undefined) {
            queryParameters['strict'] = strict;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Search on a string
     * Search for entities that match a given sub-string.  ---  Alternate route: &#x60;/v1/search/&#x60;  Alternate route: &#x60;/legacy/search/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param categories Type of entities to search for
     * @param search The string to search on
     * @param datasource The server name you would like data from
     * @param language Search locale
     * @param strict Whether the search should be a strict match
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSearch(categories, search, datasource, language, strict, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/search/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'categories' is not null or undefined
        if (categories === null || categories === undefined) {
            throw new Error('Required parameter categories was null or undefined when calling getSearch.');
        }
        // verify required parameter 'search' is not null or undefined
        if (search === null || search === undefined) {
            throw new Error('Required parameter search was null or undefined when calling getSearch.');
        }
        if (categories !== undefined) {
            queryParameters['categories'] = categories;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (search !== undefined) {
            queryParameters['search'] = search;
        }
        if (strict !== undefined) {
            queryParameters['strict'] = strict;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.SearchApi = SearchApi;
var SkillsApiApiKeys;
(function (SkillsApiApiKeys) {
})(SkillsApiApiKeys = exports.SkillsApiApiKeys || (exports.SkillsApiApiKeys = {}));
class SkillsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[SkillsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get character&#39;s skill queue
     * List the configured skill queue for the given character  ---  Alternate route: &#x60;/v2/characters/{character_id}/skillqueue/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/skillqueue/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/skillqueue/&#x60;   ---  This route is cached for up to 120 seconds
     * @param characterId Character id of the target character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdSkillqueue(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/skillqueue/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdSkillqueue.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character skills
     * List all trained skills for the given character  ---  Alternate route: &#x60;/v3/characters/{character_id}/skills/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/skills/&#x60;   ---  This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdSkills(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/skills/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdSkills.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.SkillsApi = SkillsApi;
var SovereigntyApiApiKeys;
(function (SovereigntyApiApiKeys) {
})(SovereigntyApiApiKeys = exports.SovereigntyApiApiKeys || (exports.SovereigntyApiApiKeys = {}));
class SovereigntyApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[SovereigntyApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List sovereignty campaigns
     * Shows sovereignty data for campaigns.  ---  Alternate route: &#x60;/v1/sovereignty/campaigns/&#x60;  Alternate route: &#x60;/legacy/sovereignty/campaigns/&#x60;  Alternate route: &#x60;/dev/sovereignty/campaigns/&#x60;   ---  This route is cached for up to 5 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSovereigntyCampaigns(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/sovereignty/campaigns/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List sovereignty of systems
     * Shows sovereignty information for solar systems  ---  Alternate route: &#x60;/v1/sovereignty/map/&#x60;  Alternate route: &#x60;/legacy/sovereignty/map/&#x60;  Alternate route: &#x60;/dev/sovereignty/map/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSovereigntyMap(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/sovereignty/map/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List sovereignty structures
     * Shows sovereignty data for structures.  ---  Alternate route: &#x60;/v1/sovereignty/structures/&#x60;  Alternate route: &#x60;/legacy/sovereignty/structures/&#x60;  Alternate route: &#x60;/dev/sovereignty/structures/&#x60;   ---  This route is cached for up to 120 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSovereigntyStructures(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/sovereignty/structures/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.SovereigntyApi = SovereigntyApi;
var StatusApiApiKeys;
(function (StatusApiApiKeys) {
})(StatusApiApiKeys = exports.StatusApiApiKeys || (exports.StatusApiApiKeys = {}));
class StatusApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[StatusApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Retrieve the uptime and player counts
     * EVE Server status  ---  Alternate route: &#x60;/v1/status/&#x60;  Alternate route: &#x60;/legacy/status/&#x60;  Alternate route: &#x60;/dev/status/&#x60;   ---  This route is cached for up to 30 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getStatus(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/status/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.StatusApi = StatusApi;
var UniverseApiApiKeys;
(function (UniverseApiApiKeys) {
})(UniverseApiApiKeys = exports.UniverseApiApiKeys || (exports.UniverseApiApiKeys = {}));
class UniverseApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[UniverseApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Get bloodlines
     * Get a list of bloodlines  ---  Alternate route: &#x60;/v1/universe/bloodlines/&#x60;  Alternate route: &#x60;/legacy/universe/bloodlines/&#x60;  Alternate route: &#x60;/dev/universe/bloodlines/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseBloodlines(datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/bloodlines/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get item categories
     * Get a list of item categories  ---  Alternate route: &#x60;/v1/universe/categories/&#x60;  Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/dev/universe/categories/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseCategories(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/categories/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get item category information
     * Get information of an item category  ---  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/dev/universe/categories/{category_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param categoryId An Eve item category ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseCategoriesCategoryId(categoryId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/categories/{category_id}/'
            .replace('{' + 'category_id' + '}', String(categoryId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'categoryId' is not null or undefined
        if (categoryId === null || categoryId === undefined) {
            throw new Error('Required parameter categoryId was null or undefined when calling getUniverseCategoriesCategoryId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get constellations
     * Get a list of constellations  ---  Alternate route: &#x60;/v1/universe/constellations/&#x60;  Alternate route: &#x60;/legacy/universe/constellations/&#x60;  Alternate route: &#x60;/dev/universe/constellations/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseConstellations(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/constellations/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get constellation information
     * Get information on a constellation  ---  Alternate route: &#x60;/v1/universe/constellations/{constellation_id}/&#x60;  Alternate route: &#x60;/legacy/universe/constellations/{constellation_id}/&#x60;  Alternate route: &#x60;/dev/universe/constellations/{constellation_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param constellationId constellation_id integer
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseConstellationsConstellationId(constellationId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/constellations/{constellation_id}/'
            .replace('{' + 'constellation_id' + '}', String(constellationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'constellationId' is not null or undefined
        if (constellationId === null || constellationId === undefined) {
            throw new Error('Required parameter constellationId was null or undefined when calling getUniverseConstellationsConstellationId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get factions
     * Get a list of factions  ---  Alternate route: &#x60;/v1/universe/factions/&#x60;  Alternate route: &#x60;/legacy/universe/factions/&#x60;  Alternate route: &#x60;/dev/universe/factions/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseFactions(datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/factions/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get graphics
     * Get a list of graphics  ---  Alternate route: &#x60;/v1/universe/graphics/&#x60;  Alternate route: &#x60;/legacy/universe/graphics/&#x60;  Alternate route: &#x60;/dev/universe/graphics/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGraphics(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/graphics/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get graphic information
     * Get information on a graphic  ---  Alternate route: &#x60;/v1/universe/graphics/{graphic_id}/&#x60;  Alternate route: &#x60;/legacy/universe/graphics/{graphic_id}/&#x60;  Alternate route: &#x60;/dev/universe/graphics/{graphic_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param graphicId graphic_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGraphicsGraphicId(graphicId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/graphics/{graphic_id}/'
            .replace('{' + 'graphic_id' + '}', String(graphicId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'graphicId' is not null or undefined
        if (graphicId === null || graphicId === undefined) {
            throw new Error('Required parameter graphicId was null or undefined when calling getUniverseGraphicsGraphicId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get item groups
     * Get a list of item groups  ---  Alternate route: &#x60;/v1/universe/groups/&#x60;  Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/dev/universe/groups/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param page Which page to query
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGroups(datasource, page, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/groups/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get item group information
     * Get information on an item group  ---  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/dev/universe/groups/{group_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param groupId An Eve item group ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGroupsGroupId(groupId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/groups/{group_id}/'
            .replace('{' + 'group_id' + '}', String(groupId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'groupId' is not null or undefined
        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling getUniverseGroupsGroupId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get moon information
     * Get information on a moon  ---  Alternate route: &#x60;/v1/universe/moons/{moon_id}/&#x60;  Alternate route: &#x60;/legacy/universe/moons/{moon_id}/&#x60;  Alternate route: &#x60;/dev/universe/moons/{moon_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param moonId moon_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseMoonsMoonId(moonId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/moons/{moon_id}/'
            .replace('{' + 'moon_id' + '}', String(moonId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'moonId' is not null or undefined
        if (moonId === null || moonId === undefined) {
            throw new Error('Required parameter moonId was null or undefined when calling getUniverseMoonsMoonId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get planet information
     * Get information on a planet  ---  Alternate route: &#x60;/v1/universe/planets/{planet_id}/&#x60;  Alternate route: &#x60;/legacy/universe/planets/{planet_id}/&#x60;  Alternate route: &#x60;/dev/universe/planets/{planet_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param planetId planet_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniversePlanetsPlanetId(planetId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/planets/{planet_id}/'
            .replace('{' + 'planet_id' + '}', String(planetId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'planetId' is not null or undefined
        if (planetId === null || planetId === undefined) {
            throw new Error('Required parameter planetId was null or undefined when calling getUniversePlanetsPlanetId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get character races
     * Get a list of character races  ---  Alternate route: &#x60;/v1/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/dev/universe/races/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseRaces(datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/races/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get regions
     * Get a list of regions  ---  Alternate route: &#x60;/v1/universe/regions/&#x60;  Alternate route: &#x60;/legacy/universe/regions/&#x60;  Alternate route: &#x60;/dev/universe/regions/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseRegions(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/regions/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get region information
     * Get information on a region  ---  Alternate route: &#x60;/v1/universe/regions/{region_id}/&#x60;  Alternate route: &#x60;/legacy/universe/regions/{region_id}/&#x60;  Alternate route: &#x60;/dev/universe/regions/{region_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param regionId region_id integer
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseRegionsRegionId(regionId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/regions/{region_id}/'
            .replace('{' + 'region_id' + '}', String(regionId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'regionId' is not null or undefined
        if (regionId === null || regionId === undefined) {
            throw new Error('Required parameter regionId was null or undefined when calling getUniverseRegionsRegionId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get stargate information
     * Get information on a stargate  ---  Alternate route: &#x60;/v1/universe/stargates/{stargate_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stargates/{stargate_id}/&#x60;  Alternate route: &#x60;/dev/universe/stargates/{stargate_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param stargateId stargate_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStargatesStargateId(stargateId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/stargates/{stargate_id}/'
            .replace('{' + 'stargate_id' + '}', String(stargateId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'stargateId' is not null or undefined
        if (stargateId === null || stargateId === undefined) {
            throw new Error('Required parameter stargateId was null or undefined when calling getUniverseStargatesStargateId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get station information
     * Get information on a station  ---  Alternate route: &#x60;/v2/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/dev/universe/stations/{station_id}/&#x60;   ---  This route is cached for up to 300 seconds
     * @param stationId station_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStationsStationId(stationId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/stations/{station_id}/'
            .replace('{' + 'station_id' + '}', String(stationId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'stationId' is not null or undefined
        if (stationId === null || stationId === undefined) {
            throw new Error('Required parameter stationId was null or undefined when calling getUniverseStationsStationId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List all public structures
     * List all public structures  ---  Alternate route: &#x60;/v1/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;  Alternate route: &#x60;/dev/universe/structures/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStructures(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/structures/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get structure information
     * Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  ---  Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/dev/universe/structures/{structure_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param structureId An Eve structure ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStructuresStructureId(structureId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/structures/{structure_id}/'
            .replace('{' + 'structure_id' + '}', String(structureId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'structureId' is not null or undefined
        if (structureId === null || structureId === undefined) {
            throw new Error('Required parameter structureId was null or undefined when calling getUniverseStructuresStructureId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get system jumps
     * Get the number of jumps in solar systems within the last hour, excluding wormhole space. Only systems with jumps will be listed  ---  Alternate route: &#x60;/v1/universe/system_jumps/&#x60;  Alternate route: &#x60;/legacy/universe/system_jumps/&#x60;  Alternate route: &#x60;/dev/universe/system_jumps/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystemJumps(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/system_jumps/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get system kills
     * Get the number of ship, pod and NPC kills per solar system within the last hour, excluding wormhole space. Only systems with kills will be listed  ---  Alternate route: &#x60;/v1/universe/system_kills/&#x60;  Alternate route: &#x60;/legacy/universe/system_kills/&#x60;  Alternate route: &#x60;/dev/universe/system_kills/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystemKills(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/system_kills/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get solar systems
     * Get a list of solar systems  ---  Alternate route: &#x60;/v1/universe/systems/&#x60;  Alternate route: &#x60;/legacy/universe/systems/&#x60;  Alternate route: &#x60;/dev/universe/systems/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystems(datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/systems/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get solar system information
     * Get information on a solar system  ---  Alternate route: &#x60;/v2/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/dev/universe/systems/{system_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param systemId system_id integer
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystemsSystemId(systemId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/systems/{system_id}/'
            .replace('{' + 'system_id' + '}', String(systemId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'systemId' is not null or undefined
        if (systemId === null || systemId === undefined) {
            throw new Error('Required parameter systemId was null or undefined when calling getUniverseSystemsSystemId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get types
     * Get a list of type ids  ---  Alternate route: &#x60;/v1/universe/types/&#x60;  Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/dev/universe/types/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param page Which page to query
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseTypes(datasource, page, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/types/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get type information
     * Get information on a type  ---  Alternate route: &#x60;/v2/universe/types/{type_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param typeId An Eve item type ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseTypesTypeId(typeId, datasource, language, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/types/{type_id}/'
            .replace('{' + 'type_id' + '}', String(typeId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'typeId' is not null or undefined
        if (typeId === null || typeId === undefined) {
            throw new Error('Required parameter typeId was null or undefined when calling getUniverseTypesTypeId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (language !== undefined) {
            queryParameters['language'] = language;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get names and categories for a set of ID&#39;s
     * Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  ---  Alternate route: &#x60;/v2/universe/names/&#x60;  Alternate route: &#x60;/dev/universe/names/&#x60;
     * @param ids The ids to resolve
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUniverseNames(ids, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/universe/names/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'ids' is not null or undefined
        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling postUniverseNames.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ids,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.UniverseApi = UniverseApi;
var UserInterfaceApiApiKeys;
(function (UserInterfaceApiApiKeys) {
})(UserInterfaceApiApiKeys = exports.UserInterfaceApiApiKeys || (exports.UserInterfaceApiApiKeys = {}));
class UserInterfaceApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[UserInterfaceApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * Set Autopilot Waypoint
     * Set a solar system as autopilot waypoint  ---  Alternate route: &#x60;/v2/ui/autopilot/waypoint/&#x60;  Alternate route: &#x60;/dev/ui/autopilot/waypoint/&#x60;
     * @param addToBeginning Whether this solar system should be added to the beginning of all waypoints
     * @param clearOtherWaypoints Whether clean other waypoints beforing adding this one
     * @param destinationId The destination to travel to, can be solar system, station or structure&#39;s id
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiAutopilotWaypoint(addToBeginning, clearOtherWaypoints, destinationId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/ui/autopilot/waypoint/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'addToBeginning' is not null or undefined
        if (addToBeginning === null || addToBeginning === undefined) {
            throw new Error('Required parameter addToBeginning was null or undefined when calling postUiAutopilotWaypoint.');
        }
        // verify required parameter 'clearOtherWaypoints' is not null or undefined
        if (clearOtherWaypoints === null || clearOtherWaypoints === undefined) {
            throw new Error('Required parameter clearOtherWaypoints was null or undefined when calling postUiAutopilotWaypoint.');
        }
        // verify required parameter 'destinationId' is not null or undefined
        if (destinationId === null || destinationId === undefined) {
            throw new Error('Required parameter destinationId was null or undefined when calling postUiAutopilotWaypoint.');
        }
        if (addToBeginning !== undefined) {
            queryParameters['add_to_beginning'] = addToBeginning;
        }
        if (clearOtherWaypoints !== undefined) {
            queryParameters['clear_other_waypoints'] = clearOtherWaypoints;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (destinationId !== undefined) {
            queryParameters['destination_id'] = destinationId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Open Contract Window
     * Open the contract window inside the client  ---  Alternate route: &#x60;/v1/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/dev/ui/openwindow/contract/&#x60;
     * @param contractId The contract to open
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowContract(contractId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/ui/openwindow/contract/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'contractId' is not null or undefined
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling postUiOpenwindowContract.');
        }
        if (contractId !== undefined) {
            queryParameters['contract_id'] = contractId;
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Open Information Window
     * Open the information window for a character, corporation or alliance inside the client  ---  Alternate route: &#x60;/v1/ui/openwindow/information/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/information/&#x60;  Alternate route: &#x60;/dev/ui/openwindow/information/&#x60;
     * @param targetId The target to open
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowInformation(targetId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/ui/openwindow/information/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'targetId' is not null or undefined
        if (targetId === null || targetId === undefined) {
            throw new Error('Required parameter targetId was null or undefined when calling postUiOpenwindowInformation.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (targetId !== undefined) {
            queryParameters['target_id'] = targetId;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Open Market Details
     * Open the market details window for a specific typeID inside the client  ---  Alternate route: &#x60;/v1/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/dev/ui/openwindow/marketdetails/&#x60;
     * @param typeId The item type to open in market window
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowMarketdetails(typeId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/ui/openwindow/marketdetails/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'typeId' is not null or undefined
        if (typeId === null || typeId === undefined) {
            throw new Error('Required parameter typeId was null or undefined when calling postUiOpenwindowMarketdetails.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (typeId !== undefined) {
            queryParameters['type_id'] = typeId;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Open New Mail Window
     * Open the New Mail window, according to settings from the request if applicable  ---  Alternate route: &#x60;/v1/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/dev/ui/openwindow/newmail/&#x60;
     * @param newMail The details of mail to create
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowNewmail(newMail, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/ui/openwindow/newmail/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'newMail' is not null or undefined
        if (newMail === null || newMail === undefined) {
            throw new Error('Required parameter newMail was null or undefined when calling postUiOpenwindowNewmail.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: newMail,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.UserInterfaceApi = UserInterfaceApi;
var WalletApiApiKeys;
(function (WalletApiApiKeys) {
})(WalletApiApiKeys = exports.WalletApiApiKeys || (exports.WalletApiApiKeys = {}));
class WalletApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[WalletApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List wallets and balances
     * List your wallets and their balances. Characters typically have only one wallet, with wallet_id 1000 being the master wallet.  ---  Alternate route: &#x60;/v1/characters/{character_id}/wallets/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/wallets/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/wallets/&#x60;   ---  This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdWallets(characterId, datasource, token, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/characters/{character_id}/wallets/'
            .replace('{' + 'character_id' + '}', String(characterId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'characterId' is not null or undefined
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdWallets.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (token !== undefined) {
            queryParameters['token'] = token;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.evesso.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.WalletApi = WalletApi;
var WarsApiApiKeys;
(function (WarsApiApiKeys) {
})(WarsApiApiKeys = exports.WarsApiApiKeys || (exports.WarsApiApiKeys = {}));
class WarsApi {
    constructor(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'evesso': new OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    setApiKey(key, value) {
        this.authentications[WarsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.evesso.accessToken = token;
    }
    /**
     * List wars
     * Return a list of wars  ---  Alternate route: &#x60;/v1/wars/&#x60;  Alternate route: &#x60;/legacy/wars/&#x60;  Alternate route: &#x60;/dev/wars/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param maxWarId Only return wars with ID smaller than this.
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getWars(datasource, maxWarId, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/wars/';
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (maxWarId !== undefined) {
            queryParameters['max_war_id'] = maxWarId;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get war information
     * Return details about a war  ---  Alternate route: &#x60;/v1/wars/{war_id}/&#x60;  Alternate route: &#x60;/legacy/wars/{war_id}/&#x60;  Alternate route: &#x60;/dev/wars/{war_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param warId ID for a war
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getWarsWarId(warId, datasource, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/wars/{war_id}/'
            .replace('{' + 'war_id' + '}', String(warId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'warId' is not null or undefined
        if (warId === null || warId === undefined) {
            throw new Error('Required parameter warId was null or undefined when calling getWarsWarId.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * List kills for a war
     * Return a list of kills related to a war  ---  Alternate route: &#x60;/v1/wars/{war_id}/killmails/&#x60;  Alternate route: &#x60;/legacy/wars/{war_id}/killmails/&#x60;  Alternate route: &#x60;/dev/wars/{war_id}/killmails/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param warId A valid war ID
     * @param datasource The server name you would like data from
     * @param page Which page to query, starting at 1, 2000 killmails per page.
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getWarsWarIdKillmails(warId, datasource, page, userAgent, xUserAgent) {
        const localVarPath = this.basePath + '/wars/{war_id}/killmails/'
            .replace('{' + 'war_id' + '}', String(warId));
        let queryParameters = {};
        let headerParams = Object.assign({}, this.defaultHeaders);
        let formParams = {};
        // verify required parameter 'warId' is not null or undefined
        if (warId === null || warId === undefined) {
            throw new Error('Required parameter warId was null or undefined when calling getWarsWarIdKillmails.');
        }
        if (datasource !== undefined) {
            queryParameters['datasource'] = datasource;
        }
        if (page !== undefined) {
            queryParameters['page'] = page;
        }
        if (userAgent !== undefined) {
            queryParameters['user_agent'] = userAgent;
        }
        headerParams['X-User-Agent'] = xUserAgent;
        let useFormData = false;
        let requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.WarsApi = WarsApi;
//# sourceMappingURL=api.js.map