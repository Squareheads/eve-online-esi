/// <reference types="node" />
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.4.4.dev4
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import request = require('request');
import http = require('http');
import Promise = require('bluebird');
/**
* Forbidden
*/
export declare class DeleteCharactersCharacterIdContactsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class DeleteCharactersCharacterIdContactsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class DeleteCharactersCharacterIdFittingsFittingIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class DeleteCharactersCharacterIdFittingsFittingIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class DeleteCharactersCharacterIdMailLabelsLabelIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class DeleteCharactersCharacterIdMailLabelsLabelIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Unprocessable entity
*/
export declare class DeleteCharactersCharacterIdMailLabelsLabelIdUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class DeleteCharactersCharacterIdMailMailIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class DeleteCharactersCharacterIdMailMailIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class DeleteFleetsFleetIdMembersMemberIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class DeleteFleetsFleetIdMembersMemberIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class DeleteFleetsFleetIdMembersMemberIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class DeleteFleetsFleetIdSquadsSquadIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class DeleteFleetsFleetIdSquadsSquadIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class DeleteFleetsFleetIdSquadsSquadIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class DeleteFleetsFleetIdWingsWingIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class DeleteFleetsFleetIdWingsWingIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class DeleteFleetsFleetIdWingsWingIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetAlliancesAllianceIdCorporationsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetAlliancesAllianceIdIconsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* No image server for this datasource
*/
export declare class GetAlliancesAllianceIdIconsNotFound {
    /**
    * error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetAlliancesAllianceIdIconsOk {
    /**
    * px128x128 string
    */
    'px128x128': string;
    /**
    * px64x64 string
    */
    'px64x64': string;
}
/**
* Internal server error
*/
export declare class GetAlliancesAllianceIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Alliance not found
*/
export declare class GetAlliancesAllianceIdNotFound {
    /**
    * error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetAlliancesAllianceIdOk {
    /**
    * the full name of the alliance
    */
    'allianceName': string;
    /**
    * date_founded string
    */
    'dateFounded': Date;
    /**
    * the executor corporation ID, if this alliance is not closed
    */
    'executorCorp': number;
    /**
    * the short name of the alliance
    */
    'ticker': string;
}
/**
* Internal server error
*/
export declare class GetAlliancesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetAlliancesNames200Ok {
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * alliance_name string
    */
    'allianceName': string;
}
/**
* Internal server error
*/
export declare class GetAlliancesNamesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdAgentsResearch200Ok {
    /**
    * agent_id integer
    */
    'agentId': number;
    /**
    * points_per_day number
    */
    'pointsPerDay': number;
    /**
    * remainder_points number
    */
    'remainderPoints': number;
    /**
    * skill_type_id integer
    */
    'skillTypeId': number;
    /**
    * started_at string
    */
    'startedAt': Date;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdAgentsResearchForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdAgentsResearchInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdAssets200Ok {
    /**
    * is_singleton boolean
    */
    'isSingleton': boolean;
    /**
    * item_id integer
    */
    'itemId': number;
    /**
    * location_flag string
    */
    'locationFlag': GetCharactersCharacterIdAssets200Ok.LocationFlagEnum;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * location_type string
    */
    'locationType': GetCharactersCharacterIdAssets200Ok.LocationTypeEnum;
    /**
    * quantity integer
    */
    'quantity': number;
    /**
    * type_id integer
    */
    'typeId': number;
}
export declare namespace GetCharactersCharacterIdAssets200Ok {
    enum LocationFlagEnum {
        AutoFit,
        Cargo,
        CorpseBay,
        DroneBay,
        FleetHangar,
        Deliveries,
        HiddenModifiers,
        Hangar,
        HangarAll,
        LoSlot0,
        LoSlot1,
        LoSlot2,
        LoSlot3,
        LoSlot4,
        LoSlot5,
        LoSlot6,
        LoSlot7,
        MedSlot0,
        MedSlot1,
        MedSlot2,
        MedSlot3,
        MedSlot4,
        MedSlot5,
        MedSlot6,
        MedSlot7,
        HiSlot0,
        HiSlot1,
        HiSlot2,
        HiSlot3,
        HiSlot4,
        HiSlot5,
        HiSlot6,
        HiSlot7,
        AssetSafety,
        Locked,
        Unlocked,
        Implant,
        QuafeBay,
        RigSlot0,
        RigSlot1,
        RigSlot2,
        RigSlot3,
        RigSlot4,
        RigSlot5,
        RigSlot6,
        RigSlot7,
        ShipHangar,
        SpecializedFuelBay,
        SpecializedOreHold,
        SpecializedGasHold,
        SpecializedMineralHold,
        SpecializedSalvageHold,
        SpecializedShipHold,
        SpecializedSmallShipHold,
        SpecializedMediumShipHold,
        SpecializedLargeShipHold,
        SpecializedIndustrialShipHold,
        SpecializedAmmoHold,
        SpecializedCommandCenterHold,
        SpecializedPlanetaryCommoditiesHold,
        SpecializedMaterialBay,
        SubSystemSlot0,
        SubSystemSlot1,
        SubSystemSlot2,
        SubSystemSlot3,
        SubSystemSlot4,
        SubSystemSlot5,
        SubSystemSlot6,
        SubSystemSlot7,
        FighterBay,
        FighterTube0,
        FighterTube1,
        FighterTube2,
        FighterTube3,
        FighterTube4,
        Module,
        Wardrobe,
    }
    enum LocationTypeEnum {
        Station,
        SolarSystem,
        Other,
    }
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdAssetsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdAssetsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdBookmarks200Ok {
    /**
    * bookmark_id integer
    */
    'bookmarkId': number;
    /**
    * create_date string
    */
    'createDate': Date;
    /**
    * creator_id integer
    */
    'creatorId': number;
    /**
    * folder_id integer
    */
    'folderId': number;
    /**
    * memo string
    */
    'memo': string;
    /**
    * note string
    */
    'note': string;
    /**
    * owner_id integer
    */
    'ownerId': number;
    'target': GetCharactersCharacterIdBookmarksTarget;
}
/**
* coordinates object
*/
export declare class GetCharactersCharacterIdBookmarksCoordinates {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdBookmarksFolders200Ok {
    /**
    * folder_id integer
    */
    'folderId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * owner_id integer
    */
    'ownerId': number;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdBookmarksFoldersForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdBookmarksFoldersInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdBookmarksForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdBookmarksInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* item object
*/
export declare class GetCharactersCharacterIdBookmarksItem {
    /**
    * item_id integer
    */
    'itemId': number;
    /**
    * type_id integer
    */
    'typeId': number;
}
/**
* target object
*/
export declare class GetCharactersCharacterIdBookmarksTarget {
    'coordinates': GetCharactersCharacterIdBookmarksCoordinates;
    'item': GetCharactersCharacterIdBookmarksItem;
    /**
    * location_id integer
    */
    'locationId': number;
}
/**
* event
*/
export declare class GetCharactersCharacterIdCalendar200Ok {
    /**
    * event_date string
    */
    'eventDate': Date;
    /**
    * event_id integer
    */
    'eventId': number;
    /**
    * event_response string
    */
    'eventResponse': GetCharactersCharacterIdCalendar200Ok.EventResponseEnum;
    /**
    * importance integer
    */
    'importance': number;
    /**
    * title string
    */
    'title': string;
}
export declare namespace GetCharactersCharacterIdCalendar200Ok {
    enum EventResponseEnum {
        Declined,
        NotResponded,
        Accepted,
        Tentative,
    }
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdCalendarEventIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdCalendarEventIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Full details of a specific event
*/
export declare class GetCharactersCharacterIdCalendarEventIdOk {
    /**
    * date string
    */
    'date': Date;
    /**
    * Length in minutes
    */
    'duration': number;
    /**
    * event_id integer
    */
    'eventId': number;
    /**
    * importance integer
    */
    'importance': number;
    /**
    * owner_id integer
    */
    'ownerId': number;
    /**
    * owner_name string
    */
    'ownerName': string;
    /**
    * owner_type string
    */
    'ownerType': GetCharactersCharacterIdCalendarEventIdOk.OwnerTypeEnum;
    /**
    * response string
    */
    'response': string;
    /**
    * text string
    */
    'text': string;
    /**
    * title string
    */
    'title': string;
}
export declare namespace GetCharactersCharacterIdCalendarEventIdOk {
    enum OwnerTypeEnum {
        EveServer,
        Corporation,
        Faction,
        Character,
        Alliance,
    }
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdCalendarForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdCalendarInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdChatChannels200Ok {
    /**
    * allowed array
    */
    'allowed': Array<GetCharactersCharacterIdChatChannelsAllowed>;
    /**
    * blocked array
    */
    'blocked': Array<GetCharactersCharacterIdChatChannelsBlocked>;
    /**
    * Unique channel ID. Always negative for player-created channels. Permanent (CCP created) channels have a positive ID, but don't appear in the API
    */
    'channelId': number;
    /**
    * Normalized, unique string used to compare channel names
    */
    'comparisonKey': string;
    /**
    * Whether this is a password protected channel
    */
    'hasPassword': boolean;
    /**
    * Message of the day for this channel
    */
    'motd': string;
    /**
    * muted array
    */
    'muted': Array<GetCharactersCharacterIdChatChannelsMuted>;
    /**
    * Displayed name of channel
    */
    'name': string;
    /**
    * operators array
    */
    'operators': Array<GetCharactersCharacterIdChatChannelsOperator>;
    /**
    * owner_id integer
    */
    'ownerId': number;
}
/**
* allowed object
*/
export declare class GetCharactersCharacterIdChatChannelsAllowed {
    /**
    * ID of an allowed channel member
    */
    'accessorId': number;
    /**
    * accessor_type string
    */
    'accessorType': GetCharactersCharacterIdChatChannelsAllowed.AccessorTypeEnum;
}
export declare namespace GetCharactersCharacterIdChatChannelsAllowed {
    enum AccessorTypeEnum {
        Character,
        Corporation,
        Alliance,
    }
}
/**
* blocked object
*/
export declare class GetCharactersCharacterIdChatChannelsBlocked {
    /**
    * ID of a blocked channel member
    */
    'accessorId': number;
    /**
    * accessor_type string
    */
    'accessorType': GetCharactersCharacterIdChatChannelsBlocked.AccessorTypeEnum;
    /**
    * Time at which this accessor will no longer be blocked
    */
    'endAt': Date;
    /**
    * Reason this accessor is blocked
    */
    'reason': string;
}
export declare namespace GetCharactersCharacterIdChatChannelsBlocked {
    enum AccessorTypeEnum {
        Character,
        Corporation,
        Alliance,
    }
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdChatChannelsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdChatChannelsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* muted object
*/
export declare class GetCharactersCharacterIdChatChannelsMuted {
    /**
    * ID of a muted channel member
    */
    'accessorId': number;
    /**
    * accessor_type string
    */
    'accessorType': GetCharactersCharacterIdChatChannelsMuted.AccessorTypeEnum;
    /**
    * Time at which this accessor will no longer be muted
    */
    'endAt': Date;
    /**
    * Reason this accessor is muted
    */
    'reason': string;
}
export declare namespace GetCharactersCharacterIdChatChannelsMuted {
    enum AccessorTypeEnum {
        Character,
        Corporation,
        Alliance,
    }
}
/**
* operator object
*/
export declare class GetCharactersCharacterIdChatChannelsOperator {
    /**
    * ID of a channel operator
    */
    'accessorId': number;
    /**
    * accessor_type string
    */
    'accessorType': GetCharactersCharacterIdChatChannelsOperator.AccessorTypeEnum;
}
export declare namespace GetCharactersCharacterIdChatChannelsOperator {
    enum AccessorTypeEnum {
        Character,
        Corporation,
        Alliance,
    }
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdClonesForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* home_location object
*/
export declare class GetCharactersCharacterIdClonesHomeLocation {
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * location_type string
    */
    'locationType': GetCharactersCharacterIdClonesHomeLocation.LocationTypeEnum;
}
export declare namespace GetCharactersCharacterIdClonesHomeLocation {
    enum LocationTypeEnum {
        Station,
        Structure,
    }
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdClonesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* jump_clone object
*/
export declare class GetCharactersCharacterIdClonesJumpClone {
    /**
    * implants array
    */
    'implants': Array<number>;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * location_type string
    */
    'locationType': GetCharactersCharacterIdClonesJumpClone.LocationTypeEnum;
}
export declare namespace GetCharactersCharacterIdClonesJumpClone {
    enum LocationTypeEnum {
        Station,
        Structure,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdClonesOk {
    'homeLocation': GetCharactersCharacterIdClonesHomeLocation;
    /**
    * jump_clones array
    */
    'jumpClones': Array<GetCharactersCharacterIdClonesJumpClone>;
    /**
    * last_jump_date string
    */
    'lastJumpDate': Date;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdContacts200Ok {
    /**
    * contact_id integer
    */
    'contactId': number;
    /**
    * contact_type string
    */
    'contactType': GetCharactersCharacterIdContacts200Ok.ContactTypeEnum;
    /**
    * Whether this contact is in the blocked list. Note a missing value denotes unknown, not true or false
    */
    'isBlocked': boolean;
    /**
    * Whether this contact is being watched
    */
    'isWatched': boolean;
    /**
    * Custom label of the contact
    */
    'labelId': number;
    /**
    * Standing of the contact
    */
    'standing': number;
}
export declare namespace GetCharactersCharacterIdContacts200Ok {
    enum ContactTypeEnum {
        Character,
        Corporation,
        Alliance,
        Faction,
    }
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdContactsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdContactsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdContactsLabels200Ok {
    /**
    * label_id integer
    */
    'labelId': number;
    /**
    * label_name string
    */
    'labelName': string;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdContactsLabelsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdContactsLabelsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdCorporationhistory200Ok {
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * True if the corporation has been deleted
    */
    'isDeleted': boolean;
    /**
    * An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous
    */
    'recordId': number;
    /**
    * start_date string
    */
    'startDate': Date;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdCorporationhistoryInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdFittings200Ok {
    /**
    * description string
    */
    'description': string;
    /**
    * fitting_id integer
    */
    'fittingId': number;
    /**
    * items array
    */
    'items': Array<GetCharactersCharacterIdFittingsItem>;
    /**
    * name string
    */
    'name': string;
    /**
    * ship_type_id integer
    */
    'shipTypeId': number;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdFittingsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdFittingsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* item object
*/
export declare class GetCharactersCharacterIdFittingsItem {
    /**
    * flag integer
    */
    'flag': number;
    /**
    * quantity integer
    */
    'quantity': number;
    /**
    * type_id integer
    */
    'typeId': number;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdKillmailsRecent200Ok {
    /**
    * A hash of this killmail
    */
    'killmailHash': string;
    /**
    * ID of this killmail
    */
    'killmailId': number;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdKillmailsRecentForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdKillmailsRecentInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdLocationForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdLocationInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdLocationOk {
    /**
    * solar_system_id integer
    */
    'solarSystemId': number;
    /**
    * station_id integer
    */
    'stationId': number;
    /**
    * structure_id integer
    */
    'structureId': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdLoyaltyPoints200Ok {
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * loyalty_points integer
    */
    'loyaltyPoints': number;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdLoyaltyPointsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdLoyaltyPointsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdMail200Ok {
    /**
    * From whom the mail was sent
    */
    'from': number;
    /**
    * is_read boolean
    */
    'isRead': boolean;
    /**
    * labels array
    */
    'labels': Array<number>;
    /**
    * mail_id integer
    */
    'mailId': number;
    /**
    * Recipients of the mail
    */
    'recipients': Array<GetCharactersCharacterIdMailRecipient>;
    /**
    * Mail subject
    */
    'subject': string;
    /**
    * When the mail was sent
    */
    'timestamp': Date;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdMailForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdMailInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdMailLabelsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdMailLabelsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* label object
*/
export declare class GetCharactersCharacterIdMailLabelsLabel {
    /**
    * color string
    */
    'color': GetCharactersCharacterIdMailLabelsLabel.ColorEnum;
    /**
    * label_id integer
    */
    'labelId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * unread_count integer
    */
    'unreadCount': number;
}
export declare namespace GetCharactersCharacterIdMailLabelsLabel {
    enum ColorEnum {
        Ffffff,
        Ffff01,
        Ff6600,
        Fe0000,
        _9a0000,
        _660066,
        _0000fe,
        _0099ff,
        _01ffff,
        _00ff33,
        _349800,
        _006634,
        _666666,
        _999999,
        E6e6e6,
        Ffffcd,
        _99ffff,
        Ccff9a,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdMailLabelsOk {
    /**
    * labels array
    */
    'labels': Array<GetCharactersCharacterIdMailLabelsLabel>;
    /**
    * total_unread_count integer
    */
    'totalUnreadCount': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdMailLists200Ok {
    /**
    * Mailing list ID
    */
    'mailingListId': number;
    /**
    * name string
    */
    'name': string;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdMailListsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdMailListsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdMailMailIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdMailMailIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetCharactersCharacterIdMailMailIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdMailMailIdOk {
    /**
    * Mail's body
    */
    'body': string;
    /**
    * From whom the mail was sent
    */
    'from': number;
    /**
    * Labels attached to the mail
    */
    'labels': Array<number>;
    /**
    * Whether the mail is flagged as read
    */
    'read': boolean;
    /**
    * Recipients of the mail
    */
    'recipients': Array<GetCharactersCharacterIdMailMailIdRecipient>;
    /**
    * Mail subject
    */
    'subject': string;
    /**
    * When the mail was sent
    */
    'timestamp': Date;
}
/**
* recipient object
*/
export declare class GetCharactersCharacterIdMailMailIdRecipient {
    /**
    * recipient_id integer
    */
    'recipientId': number;
    /**
    * recipient_type string
    */
    'recipientType': GetCharactersCharacterIdMailMailIdRecipient.RecipientTypeEnum;
}
export declare namespace GetCharactersCharacterIdMailMailIdRecipient {
    enum RecipientTypeEnum {
        Alliance,
        Character,
        Corporation,
        MailingList,
    }
}
/**
* recipient object
*/
export declare class GetCharactersCharacterIdMailRecipient {
    /**
    * recipient_id integer
    */
    'recipientId': number;
    /**
    * recipient_type string
    */
    'recipientType': GetCharactersCharacterIdMailRecipient.RecipientTypeEnum;
}
export declare namespace GetCharactersCharacterIdMailRecipient {
    enum RecipientTypeEnum {
        Alliance,
        Character,
        Corporation,
        MailingList,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdMedals200Ok {
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * date string
    */
    'date': Date;
    /**
    * description string
    */
    'description': string;
    /**
    * graphics array
    */
    'graphics': Array<GetCharactersCharacterIdMedalsGraphic>;
    /**
    * issuer_id integer
    */
    'issuerId': number;
    /**
    * medal_id integer
    */
    'medalId': number;
    /**
    * reason string
    */
    'reason': string;
    /**
    * status string
    */
    'status': GetCharactersCharacterIdMedals200Ok.StatusEnum;
    /**
    * title string
    */
    'title': string;
}
export declare namespace GetCharactersCharacterIdMedals200Ok {
    enum StatusEnum {
        Public,
        Private,
    }
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdMedalsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* graphic object
*/
export declare class GetCharactersCharacterIdMedalsGraphic {
    /**
    * color integer
    */
    'color': number;
    /**
    * graphic string
    */
    'graphic': string;
    /**
    * layer integer
    */
    'layer': number;
    /**
    * part integer
    */
    'part': number;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdMedalsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetCharactersCharacterIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdOk {
    /**
    * The character's alliance ID
    */
    'allianceId': number;
    /**
    * ancestry_id integer
    */
    'ancestryId': number;
    /**
    * Creation date of the character
    */
    'birthday': Date;
    /**
    * bloodline_id integer
    */
    'bloodlineId': number;
    /**
    * The character's corporation ID
    */
    'corporationId': number;
    /**
    * description string
    */
    'description': string;
    /**
    * gender string
    */
    'gender': GetCharactersCharacterIdOk.GenderEnum;
    /**
    * name string
    */
    'name': string;
    /**
    * race_id integer
    */
    'raceId': number;
    /**
    * security_status number
    */
    'securityStatus': number;
}
export declare namespace GetCharactersCharacterIdOk {
    enum GenderEnum {
        Female,
        Male,
    }
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdOpportunities200Ok {
    /**
    * completed_at string
    */
    'completedAt': Date;
    /**
    * task_id integer
    */
    'taskId': number;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdOpportunitiesForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdOpportunitiesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdPlanets200Ok {
    /**
    * last_update string
    */
    'lastUpdate': Date;
    /**
    * num_pins integer
    */
    'numPins': number;
    /**
    * owner_id integer
    */
    'ownerId': number;
    /**
    * planet_id integer
    */
    'planetId': number;
    /**
    * planet_type string
    */
    'planetType': GetCharactersCharacterIdPlanets200Ok.PlanetTypeEnum;
    /**
    * solar_system_id integer
    */
    'solarSystemId': number;
    /**
    * upgrade_level integer
    */
    'upgradeLevel': number;
}
export declare namespace GetCharactersCharacterIdPlanets200Ok {
    enum PlanetTypeEnum {
        Temperate,
        Barren,
        Oceanic,
        Ice,
        Gas,
        Lava,
        Storm,
        Plasma,
    }
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdPlanetsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdPlanetsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* extractor_details object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails {
    /**
    * in seconds
    */
    'cycleTime': number;
    /**
    * head_radius number
    */
    'headRadius': number;
    /**
    * heads array
    */
    'heads': Array<GetCharactersCharacterIdPlanetsPlanetIdHead>;
    /**
    * product_type_id integer
    */
    'productTypeId': number;
    /**
    * qty_per_cycle integer
    */
    'qtyPerCycle': number;
}
/**
* factory_details object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails {
    /**
    * schematic_id integer
    */
    'schematicId': number;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* head object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdHead {
    /**
    * head_id integer
    */
    'headId': number;
    /**
    * latitude number
    */
    'latitude': number;
    /**
    * longitude number
    */
    'longitude': number;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* link object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdLink {
    /**
    * destination_pin_id integer
    */
    'destinationPinId': number;
    /**
    * link_level integer
    */
    'linkLevel': number;
    /**
    * source_pin_id integer
    */
    'sourcePinId': number;
}
/**
* Colony not found
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdNotFound {
    /**
    * error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdOk {
    /**
    * links array
    */
    'links': Array<GetCharactersCharacterIdPlanetsPlanetIdLink>;
    /**
    * pins array
    */
    'pins': Array<GetCharactersCharacterIdPlanetsPlanetIdPin>;
    /**
    * routes array
    */
    'routes': Array<GetCharactersCharacterIdPlanetsPlanetIdRoute>;
}
/**
* pin object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdPin {
    /**
    * expiry_time string
    */
    'expiryTime': Date;
    'extractorDetails': GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails;
    'factoryDetails': GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails;
    /**
    * install_time string
    */
    'installTime': Date;
    /**
    * last_cycle_start string
    */
    'lastCycleStart': Date;
    /**
    * latitude number
    */
    'latitude': number;
    /**
    * longitude number
    */
    'longitude': number;
    /**
    * pin_id integer
    */
    'pinId': number;
    /**
    * schematic_id integer
    */
    'schematicId': number;
    /**
    * type_id integer
    */
    'typeId': number;
}
/**
* route object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdRoute {
    /**
    * content_type_id integer
    */
    'contentTypeId': number;
    /**
    * destination_pin_id integer
    */
    'destinationPinId': number;
    /**
    * quantity number
    */
    'quantity': number;
    /**
    * route_id integer
    */
    'routeId': number;
    /**
    * source_pin_id integer
    */
    'sourcePinId': number;
    /**
    * waypoints array
    */
    'waypoints': Array<GetCharactersCharacterIdPlanetsPlanetIdWaypoint>;
}
/**
* waypoint object
*/
export declare class GetCharactersCharacterIdPlanetsPlanetIdWaypoint {
    /**
    * order integer
    */
    'order': number;
    /**
    * pin_id integer
    */
    'pinId': number;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdPortraitInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* No image server for this datasource
*/
export declare class GetCharactersCharacterIdPortraitNotFound {
    /**
    * error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdPortraitOk {
    /**
    * px128x128 string
    */
    'px128x128': string;
    /**
    * px256x256 string
    */
    'px256x256': string;
    /**
    * px512x512 string
    */
    'px512x512': string;
    /**
    * px64x64 string
    */
    'px64x64': string;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdSearchForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdSearchInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdSearchOk {
    /**
    * agent array
    */
    'agent': Array<number>;
    /**
    * alliance array
    */
    'alliance': Array<number>;
    /**
    * character array
    */
    'character': Array<number>;
    /**
    * constellation array
    */
    'constellation': Array<number>;
    /**
    * corporation array
    */
    'corporation': Array<number>;
    /**
    * faction array
    */
    'faction': Array<number>;
    /**
    * inventorytype array
    */
    'inventorytype': Array<number>;
    /**
    * region array
    */
    'region': Array<number>;
    /**
    * solarsystem array
    */
    'solarsystem': Array<number>;
    /**
    * station array
    */
    'station': Array<number>;
    /**
    * structure array
    */
    'structure': Array<number>;
    /**
    * wormhole array
    */
    'wormhole': Array<number>;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdShipForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdShipInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdShipOk {
    /**
    * Item id's are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.
    */
    'shipItemId': number;
    /**
    * ship_name string
    */
    'shipName': string;
    /**
    * ship_type_id integer
    */
    'shipTypeId': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdSkillqueue200Ok {
    /**
    * finish_date string
    */
    'finishDate': Date;
    /**
    * finished_level integer
    */
    'finishedLevel': number;
    /**
    * level_end_sp integer
    */
    'levelEndSp': number;
    /**
    * Amount of SP that was in the skill when it started training it's current level. Used to calculate % of current level complete.
    */
    'levelStartSp': number;
    /**
    * queue_position integer
    */
    'queuePosition': number;
    /**
    * skill_id integer
    */
    'skillId': number;
    /**
    * start_date string
    */
    'startDate': Date;
    /**
    * training_start_sp integer
    */
    'trainingStartSp': number;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdSkillqueueForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdSkillqueueInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdSkillsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdSkillsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdSkillsOk {
    /**
    * skills array
    */
    'skills': Array<GetCharactersCharacterIdSkillsSkill>;
    /**
    * total_sp integer
    */
    'totalSp': number;
}
/**
* skill object
*/
export declare class GetCharactersCharacterIdSkillsSkill {
    /**
    * current_skill_level integer
    */
    'currentSkillLevel': number;
    /**
    * skill_id integer
    */
    'skillId': number;
    /**
    * skillpoints_in_skill integer
    */
    'skillpointsInSkill': number;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdStandings200Ok {
    /**
    * from_id integer
    */
    'fromId': number;
    /**
    * from_type string
    */
    'fromType': GetCharactersCharacterIdStandings200Ok.FromTypeEnum;
    /**
    * standing number
    */
    'standing': number;
}
export declare namespace GetCharactersCharacterIdStandings200Ok {
    enum FromTypeEnum {
        Agent,
        NpcCorp,
        Faction,
    }
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdStandingsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdStandingsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersCharacterIdWallets200Ok {
    /**
    * Wallet's balance in ISK hundredths.
    */
    'balance': number;
    /**
    * wallet_id integer
    */
    'walletId': number;
}
/**
* Forbidden
*/
export declare class GetCharactersCharacterIdWalletsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCharactersCharacterIdWalletsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCharactersNames200Ok {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * character_name string
    */
    'characterName': string;
}
/**
* Internal server error
*/
export declare class GetCharactersNamesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdAlliancehistory200Ok {
    'alliance': GetCorporationsCorporationIdAlliancehistoryAlliance;
    /**
    * An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous
    */
    'recordId': number;
    /**
    * start_date string
    */
    'startDate': Date;
}
/**
* alliance object
*/
export declare class GetCorporationsCorporationIdAlliancehistoryAlliance {
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * True if the alliance has been deleted
    */
    'isDeleted': boolean;
}
/**
* Internal server error
*/
export declare class GetCorporationsCorporationIdAlliancehistoryInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCorporationsCorporationIdIconsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* No image server for this datasource
*/
export declare class GetCorporationsCorporationIdIconsNotFound {
    /**
    * error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdIconsOk {
    /**
    * px128x128 string
    */
    'px128x128': string;
    /**
    * px256x256 string
    */
    'px256x256': string;
    /**
    * px64x64 string
    */
    'px64x64': string;
}
/**
* Internal server error
*/
export declare class GetCorporationsCorporationIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdMembers200Ok {
    /**
    * character_id integer
    */
    'characterId': number;
}
/**
* Forbidden
*/
export declare class GetCorporationsCorporationIdMembersForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCorporationsCorporationIdMembersInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetCorporationsCorporationIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdOk {
    /**
    * id of alliance that corporation is a member of, if any
    */
    'allianceId': number;
    /**
    * ceo_id integer
    */
    'ceoId': number;
    /**
    * corporation_description string
    */
    'corporationDescription': string;
    /**
    * the full name of the corporation
    */
    'corporationName': string;
    /**
    * creation_date string
    */
    'creationDate': Date;
    /**
    * creator_id integer
    */
    'creatorId': number;
    /**
    * faction string
    */
    'faction': GetCorporationsCorporationIdOk.FactionEnum;
    /**
    * member_count integer
    */
    'memberCount': number;
    /**
    * tax_rate number
    */
    'taxRate': number;
    /**
    * the short name of the corporation
    */
    'ticker': string;
    /**
    * url string
    */
    'url': string;
}
export declare namespace GetCorporationsCorporationIdOk {
    enum FactionEnum {
        Minmatar,
        Gallente,
        Caldari,
        Amarr,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdRoles200Ok {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * grantable_roles array
    */
    'grantableRoles': Array<GetCorporationsCorporationIdRoles200Ok.GrantableRolesEnum>;
    /**
    * grantable_roles_at_base array
    */
    'grantableRolesAtBase': Array<GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtBaseEnum>;
    /**
    * grantable_roles_at_hq array
    */
    'grantableRolesAtHq': Array<GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtHqEnum>;
    /**
    * grantable_roles_at_other array
    */
    'grantableRolesAtOther': Array<GetCorporationsCorporationIdRoles200Ok.GrantableRolesAtOtherEnum>;
    /**
    * roles array
    */
    'roles': Array<GetCorporationsCorporationIdRoles200Ok.RolesEnum>;
    /**
    * roles_at_base array
    */
    'rolesAtBase': Array<GetCorporationsCorporationIdRoles200Ok.RolesAtBaseEnum>;
    /**
    * roles_at_hq array
    */
    'rolesAtHq': Array<GetCorporationsCorporationIdRoles200Ok.RolesAtHqEnum>;
    /**
    * roles_at_other array
    */
    'rolesAtOther': Array<GetCorporationsCorporationIdRoles200Ok.RolesAtOtherEnum>;
}
export declare namespace GetCorporationsCorporationIdRoles200Ok {
    enum GrantableRolesEnum {
        Director,
        PersonnelManager,
        Accountant,
        SecurityOfficer,
        FactoryManager,
        StationManager,
        Auditor,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Diplomat,
        ConfigEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        RentOffice,
        RentFactoryFacility,
        RentResearchFacility,
        JuniorAccountant,
        ConfigStarbaseEquipment,
        Trader,
        CommunicationsOfficer,
        ContractManager,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        FittingManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
    }
    enum GrantableRolesAtBaseEnum {
        Director,
        PersonnelManager,
        Accountant,
        SecurityOfficer,
        FactoryManager,
        StationManager,
        Auditor,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Diplomat,
        ConfigEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        RentOffice,
        RentFactoryFacility,
        RentResearchFacility,
        JuniorAccountant,
        ConfigStarbaseEquipment,
        Trader,
        CommunicationsOfficer,
        ContractManager,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        FittingManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
    }
    enum GrantableRolesAtHqEnum {
        Director,
        PersonnelManager,
        Accountant,
        SecurityOfficer,
        FactoryManager,
        StationManager,
        Auditor,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Diplomat,
        ConfigEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        RentOffice,
        RentFactoryFacility,
        RentResearchFacility,
        JuniorAccountant,
        ConfigStarbaseEquipment,
        Trader,
        CommunicationsOfficer,
        ContractManager,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        FittingManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
    }
    enum GrantableRolesAtOtherEnum {
        Director,
        PersonnelManager,
        Accountant,
        SecurityOfficer,
        FactoryManager,
        StationManager,
        Auditor,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Diplomat,
        ConfigEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        RentOffice,
        RentFactoryFacility,
        RentResearchFacility,
        JuniorAccountant,
        ConfigStarbaseEquipment,
        Trader,
        CommunicationsOfficer,
        ContractManager,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        FittingManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
    }
    enum RolesEnum {
        Director,
        PersonnelManager,
        Accountant,
        SecurityOfficer,
        FactoryManager,
        StationManager,
        Auditor,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Diplomat,
        ConfigEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        RentOffice,
        RentFactoryFacility,
        RentResearchFacility,
        JuniorAccountant,
        ConfigStarbaseEquipment,
        Trader,
        CommunicationsOfficer,
        ContractManager,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        FittingManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
    }
    enum RolesAtBaseEnum {
        Director,
        PersonnelManager,
        Accountant,
        SecurityOfficer,
        FactoryManager,
        StationManager,
        Auditor,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Diplomat,
        ConfigEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        RentOffice,
        RentFactoryFacility,
        RentResearchFacility,
        JuniorAccountant,
        ConfigStarbaseEquipment,
        Trader,
        CommunicationsOfficer,
        ContractManager,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        FittingManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
    }
    enum RolesAtHqEnum {
        Director,
        PersonnelManager,
        Accountant,
        SecurityOfficer,
        FactoryManager,
        StationManager,
        Auditor,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Diplomat,
        ConfigEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        RentOffice,
        RentFactoryFacility,
        RentResearchFacility,
        JuniorAccountant,
        ConfigStarbaseEquipment,
        Trader,
        CommunicationsOfficer,
        ContractManager,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        FittingManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
    }
    enum RolesAtOtherEnum {
        Director,
        PersonnelManager,
        Accountant,
        SecurityOfficer,
        FactoryManager,
        StationManager,
        Auditor,
        HangarTake1,
        HangarTake2,
        HangarTake3,
        HangarTake4,
        HangarTake5,
        HangarTake6,
        HangarTake7,
        HangarQuery1,
        HangarQuery2,
        HangarQuery3,
        HangarQuery4,
        HangarQuery5,
        HangarQuery6,
        HangarQuery7,
        AccountTake1,
        AccountTake2,
        AccountTake3,
        AccountTake4,
        AccountTake5,
        AccountTake6,
        AccountTake7,
        Diplomat,
        ConfigEquipment,
        ContainerTake1,
        ContainerTake2,
        ContainerTake3,
        ContainerTake4,
        ContainerTake5,
        ContainerTake6,
        ContainerTake7,
        RentOffice,
        RentFactoryFacility,
        RentResearchFacility,
        JuniorAccountant,
        ConfigStarbaseEquipment,
        Trader,
        CommunicationsOfficer,
        ContractManager,
        StarbaseDefenseOperator,
        StarbaseFuelTechnician,
        FittingManager,
        TerrestrialCombatOfficer,
        TerrestrialLogisticsOfficer,
    }
}
/**
* Forbidden
*/
export declare class GetCorporationsCorporationIdRolesForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCorporationsCorporationIdRolesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetCorporationsCorporationIdStructures200Ok {
    /**
    * ID of the corporation that owns the structure
    */
    'corporationId': number;
    /**
    * This week's vulnerability windows, Monday is day 0
    */
    'currentVul': Array<GetCorporationsCorporationIdStructuresCurrentVul>;
    /**
    * Date on which the structure will run out of fuel
    */
    'fuelExpires': Date;
    /**
    * Next week's vulnerability windows, Monday is day 0
    */
    'nextVul': Array<GetCorporationsCorporationIdStructuresNextVul>;
    /**
    * The id of the ACL profile for this citadel
    */
    'profileId': number;
    /**
    * Contains a list of service upgrades, and their state
    */
    'services': Array<GetCorporationsCorporationIdStructuresService>;
    /**
    * Date at which the structure will move to it's next state
    */
    'stateTimerEnd': Date;
    /**
    * Date at which the structure entered it's current state
    */
    'stateTimerStart': Date;
    /**
    * The Item ID of the structure
    */
    'structureId': number;
    /**
    * The solar system the structure is in
    */
    'systemId': number;
    /**
    * The type id of the structure
    */
    'typeId': number;
    /**
    * Date at which the structure will unanchor
    */
    'unanchorsAt': Date;
}
/**
* current_vul object
*/
export declare class GetCorporationsCorporationIdStructuresCurrentVul {
    /**
    * day integer
    */
    'day': number;
    /**
    * hour integer
    */
    'hour': number;
}
/**
* Forbidden
*/
export declare class GetCorporationsCorporationIdStructuresForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCorporationsCorporationIdStructuresInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* next_vul object
*/
export declare class GetCorporationsCorporationIdStructuresNextVul {
    /**
    * day integer
    */
    'day': number;
    /**
    * hour integer
    */
    'hour': number;
}
/**
* service object
*/
export declare class GetCorporationsCorporationIdStructuresService {
    /**
    * name string
    */
    'name': string;
    /**
    * state string
    */
    'state': GetCorporationsCorporationIdStructuresService.StateEnum;
}
export declare namespace GetCorporationsCorporationIdStructuresService {
    enum StateEnum {
        Online,
        Offline,
        Cleanup,
    }
}
/**
* 200 ok object
*/
export declare class GetCorporationsNames200Ok {
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * corporation_name string
    */
    'corporationName': string;
}
/**
* Internal server error
*/
export declare class GetCorporationsNamesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetCorporationsNpccorpsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetDogmaAttributesAttributeIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetDogmaAttributesAttributeIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetDogmaAttributesAttributeIdOk {
    /**
    * attribute_id integer
    */
    'attributeId': number;
    /**
    * default_value number
    */
    'defaultValue': number;
    /**
    * description string
    */
    'description': string;
    /**
    * display_name string
    */
    'displayName': string;
    /**
    * high_is_good boolean
    */
    'highIsGood': boolean;
    /**
    * icon_id integer
    */
    'iconId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * published boolean
    */
    'published': boolean;
    /**
    * stackable boolean
    */
    'stackable': boolean;
    /**
    * unit_id integer
    */
    'unitId': number;
}
/**
* Internal server error
*/
export declare class GetDogmaAttributesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetDogmaEffectsEffectIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* modifier object
*/
export declare class GetDogmaEffectsEffectIdModifier {
    /**
    * domain string
    */
    'domain': string;
    /**
    * func string
    */
    'func': string;
    /**
    * modified_attribute_id integer
    */
    'modifiedAttributeId': number;
    /**
    * modifying_attribute_id integer
    */
    'modifyingAttributeId': number;
    /**
    * operator integer
    */
    'operator': number;
}
/**
* Not found
*/
export declare class GetDogmaEffectsEffectIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetDogmaEffectsEffectIdOk {
    /**
    * description string
    */
    'description': string;
    /**
    * disallow_auto_repeat boolean
    */
    'disallowAutoRepeat': boolean;
    /**
    * discharge_attribute_id integer
    */
    'dischargeAttributeId': number;
    /**
    * display_name string
    */
    'displayName': string;
    /**
    * duration_attribute_id integer
    */
    'durationAttributeId': number;
    /**
    * effect_category integer
    */
    'effectCategory': number;
    /**
    * effect_id integer
    */
    'effectId': number;
    /**
    * electronic_chance boolean
    */
    'electronicChance': boolean;
    /**
    * falloff_attribute_id integer
    */
    'falloffAttributeId': number;
    /**
    * icon_id integer
    */
    'iconId': number;
    /**
    * is_assistance boolean
    */
    'isAssistance': boolean;
    /**
    * is_offensive boolean
    */
    'isOffensive': boolean;
    /**
    * is_warp_safe boolean
    */
    'isWarpSafe': boolean;
    /**
    * modifiers array
    */
    'modifiers': Array<GetDogmaEffectsEffectIdModifier>;
    /**
    * name string
    */
    'name': string;
    /**
    * post_expression integer
    */
    'postExpression': number;
    /**
    * pre_expression integer
    */
    'preExpression': number;
    /**
    * published boolean
    */
    'published': boolean;
    /**
    * range_attribute_id integer
    */
    'rangeAttributeId': number;
    /**
    * range_chance boolean
    */
    'rangeChance': boolean;
    /**
    * tracking_speed_attribute_id integer
    */
    'trackingSpeedAttributeId': number;
}
/**
* Internal server error
*/
export declare class GetDogmaEffectsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class GetFleetsFleetIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetFleetsFleetIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetFleetsFleetIdMembers200Ok {
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * join_time string
    */
    'joinTime': Date;
    /**
    * Member’s role in fleet
    */
    'role': GetFleetsFleetIdMembers200Ok.RoleEnum;
    /**
    * Localized role names
    */
    'roleName': string;
    /**
    * ship_type_id integer
    */
    'shipTypeId': number;
    /**
    * Solar system the member is located in
    */
    'solarSystemId': number;
    /**
    * ID of the squad the member is in. If not applicable, will be set to -1
    */
    'squadId': number;
    /**
    * Station in which the member is docked in, if applicable
    */
    'stationId': number;
    /**
    * Whether the member take fleet warps
    */
    'takesFleetWarp': boolean;
    /**
    * ID of the wing the member is in. If not applicable, will be set to -1
    */
    'wingId': number;
}
export declare namespace GetFleetsFleetIdMembers200Ok {
    enum RoleEnum {
        FleetCommander,
        WingCommander,
        SquadCommander,
        SquadMember,
    }
}
/**
* Forbidden
*/
export declare class GetFleetsFleetIdMembersForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetFleetsFleetIdMembersInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetFleetsFleetIdMembersNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetFleetsFleetIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetFleetsFleetIdOk {
    /**
    * Is free-move enabled
    */
    'isFreeMove': boolean;
    /**
    * Does the fleet have an active fleet advertisement
    */
    'isRegistered': boolean;
    /**
    * Is EVE Voice enabled
    */
    'isVoiceEnabled': boolean;
    /**
    * Fleet MOTD in CCP flavoured HTML
    */
    'motd': string;
}
/**
* 200 ok object
*/
export declare class GetFleetsFleetIdWings200Ok {
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
    /**
    * squads array
    */
    'squads': Array<GetFleetsFleetIdWingsSquad>;
}
/**
* Forbidden
*/
export declare class GetFleetsFleetIdWingsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetFleetsFleetIdWingsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetFleetsFleetIdWingsNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* squad object
*/
export declare class GetFleetsFleetIdWingsSquad {
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
}
/**
* 200 ok object
*/
export declare class GetIncursions200Ok {
    /**
    * The constellation id in which this incursion takes place
    */
    'constellationId': number;
    /**
    * The attacking faction's id
    */
    'factionId': number;
    /**
    * Whether the final encounter has boss or not
    */
    'hasBoss': boolean;
    /**
    * A list of infested solar system ids that are a part of this incursion
    */
    'infestedSolarSystems': Array<number>;
    /**
    * Influence of this incursion as a float from 0 to 1
    */
    'influence': number;
    /**
    * Staging solar system for this incursion
    */
    'stagingSolarSystemId': number;
    /**
    * The state of this incursion
    */
    'state': GetIncursions200Ok.StateEnum;
    /**
    * The type of this incursion
    */
    'type': string;
}
export declare namespace GetIncursions200Ok {
    enum StateEnum {
        Withdrawing,
        Mobilizing,
        Established,
    }
}
/**
* Internal server error
*/
export declare class GetIncursionsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetIndustryFacilities200Ok {
    /**
    * ID of the facility
    */
    'facilityId': number;
    /**
    * Owner of the facility
    */
    'ownerId': number;
    /**
    * Region ID where the facility is
    */
    'regionId': number;
    /**
    * Solar system ID where the facility is
    */
    'solarSystemId': number;
    /**
    * Tax imposed by the facility
    */
    'tax': number;
    /**
    * Type ID of the facility
    */
    'typeId': number;
}
/**
* Internal server error
*/
export declare class GetIndustryFacilitiesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetIndustrySystems200Ok {
    /**
    * cost_indices array
    */
    'costIndices': Array<GetIndustrySystemsCostIndice>;
    /**
    * solar_system_id integer
    */
    'solarSystemId': number;
}
/**
* cost_indice object
*/
export declare class GetIndustrySystemsCostIndice {
    /**
    * activity string
    */
    'activity': GetIndustrySystemsCostIndice.ActivityEnum;
    /**
    * cost_index number
    */
    'costIndex': number;
}
export declare namespace GetIndustrySystemsCostIndice {
    enum ActivityEnum {
        None,
        Manufacturing,
        ResearchingTechnology,
        ResearchingTimeEfficiency,
        ResearchingMaterialEfficiency,
        Copying,
        Duplicating,
        Invention,
        ReverseEngineering,
    }
}
/**
* Internal server error
*/
export declare class GetIndustrySystemsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetInsurancePrices200Ok {
    /**
    * A list of a available insurance levels for this ship type
    */
    'levels': Array<GetInsurancePricesLevel>;
    /**
    * type_id integer
    */
    'typeId': number;
}
/**
* Internal server error
*/
export declare class GetInsurancePricesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* level object
*/
export declare class GetInsurancePricesLevel {
    /**
    * cost number
    */
    'cost': number;
    /**
    * Localized insurance level
    */
    'name': string;
    /**
    * payout number
    */
    'payout': number;
}
/**
* attacker object
*/
export declare class GetKillmailsKillmailIdKillmailHashAttacker {
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * damage_done integer
    */
    'damageDone': number;
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * Was the attacker the one to achieve the final blow
    */
    'finalBlow': boolean;
    /**
    * Security status for the attacker
    */
    'securityStatus': number;
    /**
    * What ship was the attacker flying
    */
    'shipTypeId': number;
    /**
    * What weapon was used by the attacker for the kill
    */
    'weaponTypeId': number;
}
/**
* Internal server error
*/
export declare class GetKillmailsKillmailIdKillmailHashInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* item object
*/
export declare class GetKillmailsKillmailIdKillmailHashItem {
    /**
    * flag integer
    */
    'flag': number;
    /**
    * item_type_id integer
    */
    'itemTypeId': number;
    /**
    * quantity_destroyed integer
    */
    'quantityDestroyed': number;
    /**
    * quantity_dropped integer
    */
    'quantityDropped': number;
    /**
    * singleton integer
    */
    'singleton': number;
}
/**
* item object
*/
export declare class GetKillmailsKillmailIdKillmailHashItem1 {
    /**
    * Flag for the location of the item
    */
    'flag': number;
    /**
    * item_type_id integer
    */
    'itemTypeId': number;
    /**
    * items array
    */
    'items': Array<GetKillmailsKillmailIdKillmailHashItem>;
    /**
    * How many of the item were destroyed if any
    */
    'quantityDestroyed': number;
    /**
    * How many of the item were dropped if any
    */
    'quantityDropped': number;
    /**
    * singleton integer
    */
    'singleton': number;
}
/**
* 200 ok object
*/
export declare class GetKillmailsKillmailIdKillmailHashOk {
    /**
    * attackers array
    */
    'attackers': Array<GetKillmailsKillmailIdKillmailHashAttacker>;
    /**
    * ID of the killmail
    */
    'killmailId': number;
    /**
    * Time that the victim was killed and the killmail generated
    */
    'killmailTime': Date;
    /**
    * Moon if the kill took place at one
    */
    'moonId': number;
    /**
    * Solar system that the kill took place in
    */
    'solarSystemId': number;
    'victim': GetKillmailsKillmailIdKillmailHashVictim;
    /**
    * War if the killmail is generated in relation to an official war
    */
    'warId': number;
}
/**
* Coordinates of the victim in Cartesian space relative to the Sun
*/
export declare class GetKillmailsKillmailIdKillmailHashPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* Unprocessable entity
*/
export declare class GetKillmailsKillmailIdKillmailHashUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* victim object
*/
export declare class GetKillmailsKillmailIdKillmailHashVictim {
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * character_id integer
    */
    'characterId': number;
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * How much total damage was taken by the victim
    */
    'damageTaken': number;
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * items array
    */
    'items': Array<GetKillmailsKillmailIdKillmailHashItem1>;
    'position': GetKillmailsKillmailIdKillmailHashPosition;
    /**
    * The ship that the victim was piloting and was destroyed
    */
    'shipTypeId': number;
}
/**
* 200 ok object
*/
export declare class GetLoyaltyStoresCorporationIdOffers200Ok {
    /**
    * isk_cost number
    */
    'iskCost': number;
    /**
    * lp_cost integer
    */
    'lpCost': number;
    /**
    * offer_id integer
    */
    'offerId': number;
    /**
    * quantity integer
    */
    'quantity': number;
    /**
    * required_items array
    */
    'requiredItems': Array<GetLoyaltyStoresCorporationIdOffersRequiredItem>;
    /**
    * type_id integer
    */
    'typeId': number;
}
/**
* Internal server error
*/
export declare class GetLoyaltyStoresCorporationIdOffersInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* required_item object
*/
export declare class GetLoyaltyStoresCorporationIdOffersRequiredItem {
    /**
    * quantity integer
    */
    'quantity': number;
    /**
    * type_id integer
    */
    'typeId': number;
}
/**
* Internal server error
*/
export declare class GetMarketsGroupsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetMarketsGroupsMarketGroupIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetMarketsGroupsMarketGroupIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetMarketsGroupsMarketGroupIdOk {
    /**
    * description string
    */
    'description': string;
    /**
    * market_group_id integer
    */
    'marketGroupId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * parent_group_id integer
    */
    'parentGroupId': number;
    /**
    * types array
    */
    'types': Array<number>;
}
/**
* 200 ok object
*/
export declare class GetMarketsPrices200Ok {
    /**
    * adjusted_price number
    */
    'adjustedPrice': number;
    /**
    * average_price number
    */
    'averagePrice': number;
    /**
    * type_id integer
    */
    'typeId': number;
}
/**
* Internal server error
*/
export declare class GetMarketsPricesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetMarketsRegionIdHistory200Ok {
    /**
    * average number
    */
    'average': number;
    /**
    * The date of this historical statistic entry
    */
    'date': Date;
    /**
    * highest number
    */
    'highest': number;
    /**
    * lowest number
    */
    'lowest': number;
    /**
    * Total number of orders happened that day
    */
    'orderCount': number;
    /**
    * Total
    */
    'volume': number;
}
/**
* Internal server error
*/
export declare class GetMarketsRegionIdHistoryInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Unprocessable entity
*/
export declare class GetMarketsRegionIdHistoryUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetMarketsRegionIdOrders200Ok {
    /**
    * duration integer
    */
    'duration': number;
    /**
    * is_buy_order boolean
    */
    'isBuyOrder': boolean;
    /**
    * issued string
    */
    'issued': Date;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * min_volume integer
    */
    'minVolume': number;
    /**
    * order_id integer
    */
    'orderId': number;
    /**
    * price number
    */
    'price': number;
    /**
    * range string
    */
    'range': GetMarketsRegionIdOrders200Ok.RangeEnum;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * volume_remain integer
    */
    'volumeRemain': number;
    /**
    * volume_total integer
    */
    'volumeTotal': number;
}
export declare namespace GetMarketsRegionIdOrders200Ok {
    enum RangeEnum {
        Station,
        Region,
        Solarsystem,
        _1,
        _2,
        _3,
        _4,
        _5,
        _10,
        _20,
        _30,
        _40,
    }
}
/**
* Internal server error
*/
export declare class GetMarketsRegionIdOrdersInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Unprocessable entity
*/
export declare class GetMarketsRegionIdOrdersUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetMarketsStructuresStructureId200Ok {
    /**
    * duration integer
    */
    'duration': number;
    /**
    * is_buy_order boolean
    */
    'isBuyOrder': boolean;
    /**
    * issued string
    */
    'issued': Date;
    /**
    * location_id integer
    */
    'locationId': number;
    /**
    * min_volume integer
    */
    'minVolume': number;
    /**
    * order_id integer
    */
    'orderId': number;
    /**
    * price number
    */
    'price': number;
    /**
    * range string
    */
    'range': GetMarketsStructuresStructureId200Ok.RangeEnum;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * volume_remain integer
    */
    'volumeRemain': number;
    /**
    * volume_total integer
    */
    'volumeTotal': number;
}
export declare namespace GetMarketsStructuresStructureId200Ok {
    enum RangeEnum {
        Station,
        Region,
        Solarsystem,
        _1,
        _2,
        _3,
        _4,
        _5,
        _10,
        _20,
        _30,
        _40,
    }
}
/**
* Forbidden
*/
export declare class GetMarketsStructuresStructureIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetMarketsStructuresStructureIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetOpportunitiesGroupsGroupIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetOpportunitiesGroupsGroupIdOk {
    /**
    * The groups that are connected to this group on the opportunities map
    */
    'connectedGroups': Array<number>;
    /**
    * description string
    */
    'description': string;
    /**
    * group_id integer
    */
    'groupId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * notification string
    */
    'notification': string;
    /**
    * Tasks need to complete for this group
    */
    'requiredTasks': Array<number>;
}
/**
* Internal server error
*/
export declare class GetOpportunitiesGroupsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetOpportunitiesTasksInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetOpportunitiesTasksTaskIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetOpportunitiesTasksTaskIdOk {
    /**
    * description string
    */
    'description': string;
    /**
    * name string
    */
    'name': string;
    /**
    * notification string
    */
    'notification': string;
    /**
    * task_id integer
    */
    'taskId': number;
}
/**
* Internal server error
*/
export declare class GetRouteOriginDestinationInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetRouteOriginDestinationNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetSearchInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetSearchOk {
    /**
    * agent array
    */
    'agent': Array<number>;
    /**
    * alliance array
    */
    'alliance': Array<number>;
    /**
    * character array
    */
    'character': Array<number>;
    /**
    * constellation array
    */
    'constellation': Array<number>;
    /**
    * corporation array
    */
    'corporation': Array<number>;
    /**
    * faction array
    */
    'faction': Array<number>;
    /**
    * inventorytype array
    */
    'inventorytype': Array<number>;
    /**
    * region array
    */
    'region': Array<number>;
    /**
    * solarsystem array
    */
    'solarsystem': Array<number>;
    /**
    * station array
    */
    'station': Array<number>;
    /**
    * wormhole array
    */
    'wormhole': Array<number>;
}
/**
* 200 ok object
*/
export declare class GetSovereigntyCampaigns200Ok {
    /**
    * Score for all attacking parties, only present in Defense Events.
    */
    'attackersScore': number;
    /**
    * Unique ID for this campaign.
    */
    'campaignId': number;
    /**
    * The constellation in which the campaign will take place.
    */
    'constellationId': number;
    /**
    * Defending alliance, only present in Defense Events
    */
    'defenderId': number;
    /**
    * Score for the defending alliance, only present in Defense Events.
    */
    'defenderScore': number;
    /**
    * Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \"Defense Events\", station_freeport as \"Freeport Events\".
    */
    'eventType': GetSovereigntyCampaigns200Ok.EventTypeEnum;
    /**
    * Alliance participating and their respective scores, only present in Freeport Events.
    */
    'participants': Array<GetSovereigntyCampaignsParticipant>;
    /**
    * The solar system the structure is located in.
    */
    'solarSystemId': number;
    /**
    * Time the event is scheduled to start.
    */
    'startTime': Date;
    /**
    * The structure item ID that is related to this campaign.
    */
    'structureId': number;
}
export declare namespace GetSovereigntyCampaigns200Ok {
    enum EventTypeEnum {
        TcuDefense,
        IhubDefense,
        StationDefense,
        StationFreeport,
    }
}
/**
* Internal server error
*/
export declare class GetSovereigntyCampaignsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* participant object
*/
export declare class GetSovereigntyCampaignsParticipant {
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * score number
    */
    'score': number;
}
/**
* 200 ok object
*/
export declare class GetSovereigntyMap200Ok {
    /**
    * alliance_id integer
    */
    'allianceId': number;
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * system_id integer
    */
    'systemId': number;
}
/**
* Internal server error
*/
export declare class GetSovereigntyMapInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetSovereigntyStructures200Ok {
    /**
    * The alliance that owns the structure.
    */
    'allianceId': number;
    /**
    * Solar system in which the structure is located.
    */
    'solarSystemId': number;
    /**
    * Unique item ID for this structure.
    */
    'structureId': number;
    /**
    * A reference to the type of structure this is.
    */
    'structureTypeId': number;
    /**
    * The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure.
    */
    'vulnerabilityOccupancyLevel': number;
    /**
    * The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated.
    */
    'vulnerableEndTime': Date;
    /**
    * The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime.
    */
    'vulnerableStartTime': Date;
}
/**
* Internal server error
*/
export declare class GetSovereigntyStructuresInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetStatusInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetStatusOk {
    /**
    * Current online player count
    */
    'players': number;
    /**
    * Running version as string
    */
    'serverVersion': string;
    /**
    * Server start timestamp
    */
    'startTime': Date;
    /**
    * If the server is in VIP mode
    */
    'vip': boolean;
}
/**
* 200 ok object
*/
export declare class GetUniverseBloodlines200Ok {
    /**
    * bloodline_id integer
    */
    'bloodlineId': number;
    /**
    * charisma integer
    */
    'charisma': number;
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * description string
    */
    'description': string;
    /**
    * intelligence integer
    */
    'intelligence': number;
    /**
    * memory integer
    */
    'memory': number;
    /**
    * name string
    */
    'name': string;
    /**
    * perception integer
    */
    'perception': number;
    /**
    * race_id integer
    */
    'raceId': number;
    /**
    * ship_type_id integer
    */
    'shipTypeId': number;
    /**
    * willpower integer
    */
    'willpower': number;
}
/**
* Internal server error
*/
export declare class GetUniverseBloodlinesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetUniverseCategoriesCategoryIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetUniverseCategoriesCategoryIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseCategoriesCategoryIdOk {
    /**
    * category_id integer
    */
    'categoryId': number;
    /**
    * groups array
    */
    'groups': Array<number>;
    /**
    * name string
    */
    'name': string;
    /**
    * published boolean
    */
    'published': boolean;
}
/**
* Internal server error
*/
export declare class GetUniverseCategoriesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetUniverseConstellationsConstellationIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetUniverseConstellationsConstellationIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseConstellationsConstellationIdOk {
    /**
    * constellation_id integer
    */
    'constellationId': number;
    /**
    * name string
    */
    'name': string;
    'position': GetUniverseConstellationsConstellationIdPosition;
    /**
    * The region this constellation is in
    */
    'regionId': number;
    /**
    * systems array
    */
    'systems': Array<number>;
}
/**
* position object
*/
export declare class GetUniverseConstellationsConstellationIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* Internal server error
*/
export declare class GetUniverseConstellationsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseFactions200Ok {
    /**
    * corporation_id integer
    */
    'corporationId': number;
    /**
    * description string
    */
    'description': string;
    /**
    * faction_id integer
    */
    'factionId': number;
    /**
    * is_unique boolean
    */
    'isUnique': boolean;
    /**
    * militia_corporation_id integer
    */
    'militiaCorporationId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * size_factor number
    */
    'sizeFactor': number;
    /**
    * solar_system_id integer
    */
    'solarSystemId': number;
    /**
    * station_count integer
    */
    'stationCount': number;
    /**
    * station_system_count integer
    */
    'stationSystemCount': number;
}
/**
* Internal server error
*/
export declare class GetUniverseFactionsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetUniverseGraphicsGraphicIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetUniverseGraphicsGraphicIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseGraphicsGraphicIdOk {
    /**
    * collision_file string
    */
    'collisionFile': string;
    /**
    * graphic_file string
    */
    'graphicFile': string;
    /**
    * graphic_id integer
    */
    'graphicId': number;
    /**
    * icon_folder string
    */
    'iconFolder': string;
    /**
    * sof_dna string
    */
    'sofDna': string;
    /**
    * sof_fation_name string
    */
    'sofFationName': string;
    /**
    * sof_hull_name string
    */
    'sofHullName': string;
    /**
    * sof_race_name string
    */
    'sofRaceName': string;
}
/**
* Internal server error
*/
export declare class GetUniverseGraphicsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetUniverseGroupsGroupIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetUniverseGroupsGroupIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseGroupsGroupIdOk {
    /**
    * category_id number
    */
    'categoryId': number;
    /**
    * group_id integer
    */
    'groupId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * published boolean
    */
    'published': boolean;
    /**
    * types array
    */
    'types': Array<number>;
}
/**
* Internal server error
*/
export declare class GetUniverseGroupsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetUniverseMoonsMoonIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetUniverseMoonsMoonIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseMoonsMoonIdOk {
    /**
    * moon_id integer
    */
    'moonId': number;
    /**
    * name string
    */
    'name': string;
    'position': GetUniverseMoonsMoonIdPosition;
    /**
    * The solar system this moon is in
    */
    'systemId': number;
}
/**
* position object
*/
export declare class GetUniverseMoonsMoonIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* Internal server error
*/
export declare class GetUniversePlanetsPlanetIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetUniversePlanetsPlanetIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniversePlanetsPlanetIdOk {
    /**
    * name string
    */
    'name': string;
    /**
    * planet_id integer
    */
    'planetId': number;
    'position': GetUniversePlanetsPlanetIdPosition;
    /**
    * The solar system this planet is in
    */
    'systemId': number;
    /**
    * type_id integer
    */
    'typeId': number;
}
/**
* position object
*/
export declare class GetUniversePlanetsPlanetIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* 200 ok object
*/
export declare class GetUniverseRaces200Ok {
    /**
    * The alliance generally associated with this race
    */
    'allianceId': number;
    /**
    * description string
    */
    'description': string;
    /**
    * name string
    */
    'name': string;
    /**
    * race_id integer
    */
    'raceId': number;
}
/**
* Internal server error
*/
export declare class GetUniverseRacesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetUniverseRegionsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetUniverseRegionsRegionIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetUniverseRegionsRegionIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseRegionsRegionIdOk {
    /**
    * constellations array
    */
    'constellations': Array<number>;
    /**
    * description string
    */
    'description': string;
    /**
    * name string
    */
    'name': string;
    /**
    * region_id integer
    */
    'regionId': number;
}
/**
* Internal server error
*/
export declare class GetUniverseSchematicsSchematicIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Schematic not found
*/
export declare class GetUniverseSchematicsSchematicIdNotFound {
    /**
    * error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseSchematicsSchematicIdOk {
    /**
    * Time in seconds to process a run
    */
    'cycleTime': number;
    /**
    * schematic_name string
    */
    'schematicName': string;
}
/**
* destination object
*/
export declare class GetUniverseStargatesStargateIdDestination {
    /**
    * The stargate this stargate connects to
    */
    'stargateId': number;
    /**
    * The solar system this stargate connects to
    */
    'systemId': number;
}
/**
* Internal server error
*/
export declare class GetUniverseStargatesStargateIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetUniverseStargatesStargateIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseStargatesStargateIdOk {
    'destination': GetUniverseStargatesStargateIdDestination;
    /**
    * name string
    */
    'name': string;
    'position': GetUniverseStargatesStargateIdPosition;
    /**
    * stargate_id integer
    */
    'stargateId': number;
    /**
    * The solar system this stargate is in
    */
    'systemId': number;
    /**
    * type_id integer
    */
    'typeId': number;
}
/**
* position object
*/
export declare class GetUniverseStargatesStargateIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* Internal server error
*/
export declare class GetUniverseStationsStationIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetUniverseStationsStationIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseStationsStationIdOk {
    /**
    * max_dockable_ship_volume number
    */
    'maxDockableShipVolume': number;
    /**
    * name string
    */
    'name': string;
    /**
    * office_rental_cost number
    */
    'officeRentalCost': number;
    /**
    * ID of the corporation that controls this station
    */
    'owner': number;
    'position': GetUniverseStationsStationIdPosition;
    /**
    * race_id integer
    */
    'raceId': number;
    /**
    * reprocessing_efficiency number
    */
    'reprocessingEfficiency': number;
    /**
    * reprocessing_stations_take number
    */
    'reprocessingStationsTake': number;
    /**
    * services array
    */
    'services': Array<GetUniverseStationsStationIdOk.ServicesEnum>;
    /**
    * station_id integer
    */
    'stationId': number;
    /**
    * The solar system this station is in
    */
    'systemId': number;
    /**
    * type_id integer
    */
    'typeId': number;
}
export declare namespace GetUniverseStationsStationIdOk {
    enum ServicesEnum {
        BountyMissions,
        AssasinationMissions,
        CourierMissions,
        Interbus,
        ReprocessingPlant,
        Refinery,
        Market,
        BlackMarket,
        StockExchange,
        Cloning,
        Surgery,
        DnaTherapy,
        RepairFacilities,
        Factory,
        Labratory,
        Gambling,
        Fitting,
        Paintshop,
        News,
        Storage,
        Insurance,
        Docking,
        OfficeRental,
        JumpCloneFacility,
        LoyaltyPointStore,
        NavyOffices,
        SecurityOffices,
    }
}
/**
* position object
*/
export declare class GetUniverseStationsStationIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* Internal server error
*/
export declare class GetUniverseStructuresInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class GetUniverseStructuresStructureIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetUniverseStructuresStructureIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetUniverseStructuresStructureIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseStructuresStructureIdOk {
    /**
    * The full name of the structure
    */
    'name': string;
    'position': GetUniverseStructuresStructureIdPosition;
    /**
    * solar_system_id integer
    */
    'solarSystemId': number;
    /**
    * type_id integer
    */
    'typeId': number;
}
/**
* Coordinates of the structure in Cartesian space relative to the Sun, in metres.
*/
export declare class GetUniverseStructuresStructureIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* 200 ok object
*/
export declare class GetUniverseSystemJumps200Ok {
    /**
    * ship_jumps integer
    */
    'shipJumps': number;
    /**
    * system_id integer
    */
    'systemId': number;
}
/**
* Internal server error
*/
export declare class GetUniverseSystemJumpsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseSystemKills200Ok {
    /**
    * Number of NPC ships killed in this system
    */
    'npcKills': number;
    /**
    * Number of pods killed in this system
    */
    'podKills': number;
    /**
    * Number of player ships killed in this system
    */
    'shipKills': number;
    /**
    * system_id integer
    */
    'systemId': number;
}
/**
* Internal server error
*/
export declare class GetUniverseSystemKillsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetUniverseSystemsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class GetUniverseSystemsSystemIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetUniverseSystemsSystemIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseSystemsSystemIdOk {
    /**
    * The constellation this solar system is in
    */
    'constellationId': number;
    /**
    * name string
    */
    'name': string;
    /**
    * planets array
    */
    'planets': Array<GetUniverseSystemsSystemIdPlanet>;
    'position': GetUniverseSystemsSystemIdPosition;
    /**
    * security_class string
    */
    'securityClass': string;
    /**
    * security_status number
    */
    'securityStatus': number;
    /**
    * stargates array
    */
    'stargates': Array<number>;
    /**
    * system_id integer
    */
    'systemId': number;
}
/**
* planet object
*/
export declare class GetUniverseSystemsSystemIdPlanet {
    /**
    * moons array
    */
    'moons': Array<number>;
    /**
    * planet_id integer
    */
    'planetId': number;
}
/**
* position object
*/
export declare class GetUniverseSystemsSystemIdPosition {
    /**
    * x number
    */
    'x': number;
    /**
    * y number
    */
    'y': number;
    /**
    * z number
    */
    'z': number;
}
/**
* Internal server error
*/
export declare class GetUniverseTypesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* dogma_attribute object
*/
export declare class GetUniverseTypesTypeIdDogmaAttribute {
    /**
    * attribute_id integer
    */
    'attributeId': number;
    /**
    * value number
    */
    'value': number;
}
/**
* dogma_effect object
*/
export declare class GetUniverseTypesTypeIdDogmaEffect {
    /**
    * effect_id integer
    */
    'effectId': number;
    /**
    * is_default boolean
    */
    'isDefault': boolean;
}
/**
* Internal server error
*/
export declare class GetUniverseTypesTypeIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class GetUniverseTypesTypeIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetUniverseTypesTypeIdOk {
    /**
    * capacity number
    */
    'capacity': number;
    /**
    * description string
    */
    'description': string;
    /**
    * dogma_attributes array
    */
    'dogmaAttributes': Array<GetUniverseTypesTypeIdDogmaAttribute>;
    /**
    * dogma_effects array
    */
    'dogmaEffects': Array<GetUniverseTypesTypeIdDogmaEffect>;
    /**
    * graphic_id integer
    */
    'graphicId': number;
    /**
    * group_id integer
    */
    'groupId': number;
    /**
    * icon_id integer
    */
    'iconId': number;
    /**
    * mass number
    */
    'mass': number;
    /**
    * name string
    */
    'name': string;
    /**
    * portion_size integer
    */
    'portionSize': number;
    /**
    * published boolean
    */
    'published': boolean;
    /**
    * radius number
    */
    'radius': number;
    /**
    * type_id integer
    */
    'typeId': number;
    /**
    * volume number
    */
    'volume': number;
}
/**
* Internal server error
*/
export declare class GetWarsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* The aggressor corporation or alliance that declared this war, only contains either corporation_id or alliance_id
*/
export declare class GetWarsWarIdAggressor {
    /**
    * Alliance ID if and only if the aggressor is an alliance
    */
    'allianceId': number;
    /**
    * Corporation ID if and only if the aggressor is a corporation
    */
    'corporationId': number;
    /**
    * ISK value of ships the aggressor has destroyed
    */
    'iskDestroyed': number;
    /**
    * The number of ships the aggressor has killed
    */
    'shipsKilled': number;
}
/**
* ally object
*/
export declare class GetWarsWarIdAlly {
    /**
    * Alliance ID if and only if this ally is an alliance
    */
    'allianceId': number;
    /**
    * Corporation ID if and only if this ally is a corporation
    */
    'corporationId': number;
}
/**
* The defending corporation or alliance that declared this war, only contains either corporation_id or alliance_id
*/
export declare class GetWarsWarIdDefender {
    /**
    * Alliance ID if and only if the defender is an alliance
    */
    'allianceId': number;
    /**
    * Corporation ID if and only if the defender is a corporation
    */
    'corporationId': number;
    /**
    * ISK value of ships the defender has killed
    */
    'iskDestroyed': number;
    /**
    * The number of ships the defender has killed
    */
    'shipsKilled': number;
}
/**
* Internal server error
*/
export declare class GetWarsWarIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetWarsWarIdKillmails200Ok {
    /**
    * A hash of this killmail
    */
    'killmailHash': string;
    /**
    * ID of this killmail
    */
    'killmailId': number;
}
/**
* Internal server error
*/
export declare class GetWarsWarIdKillmailsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Unprocessable entity
*/
export declare class GetWarsWarIdKillmailsUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class GetWarsWarIdOk {
    'aggressor': GetWarsWarIdAggressor;
    /**
    * allied corporations or alliances, each object contains either corporation_id or alliance_id
    */
    'allies': Array<GetWarsWarIdAlly>;
    /**
    * Time that the war was declared
    */
    'declared': Date;
    'defender': GetWarsWarIdDefender;
    /**
    * Time the war ended and shooting was no longer allowed
    */
    'finished': Date;
    /**
    * ID of the specified war
    */
    'id': number;
    /**
    * Was the war declared mutual by both parties
    */
    'mutual': boolean;
    /**
    * Is the war currently open for allies or not
    */
    'openForAllies': boolean;
    /**
    * Time the war was retracted but both sides could still shoot each other
    */
    'retracted': Date;
    /**
    * Time when the war started and both sides could shoot each other
    */
    'started': Date;
}
/**
* Unprocessable entity
*/
export declare class GetWarsWarIdUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class PostCharactersAffiliation200Ok {
    /**
    * The character's alliance ID, if their corporation is in an alliance
    */
    'allianceId': number;
    /**
    * The character's ID
    */
    'characterId': number;
    /**
    * The character's corporation ID
    */
    'corporationId': number;
    /**
    * The character's faction ID, if their corporation is in a faction
    */
    'factionId': number;
}
/**
* Internal server error
*/
export declare class PostCharactersAffiliationInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Unprocessable entity
*/
export declare class PostCharactersAffiliationUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PostCharactersCharacterIdContactsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PostCharactersCharacterIdContactsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* characters schema
*/
export declare class PostCharactersCharacterIdCspaCharacters {
    /**
    * characters array
    */
    'characters': Array<number>;
}
/**
* 201 created object
*/
export declare class PostCharactersCharacterIdCspaCreated {
    /**
    * cost integer
    */
    'cost': number;
}
/**
* Forbidden
*/
export declare class PostCharactersCharacterIdCspaForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PostCharactersCharacterIdCspaInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* 201 created object
*/
export declare class PostCharactersCharacterIdFittingsCreated {
    /**
    * fitting_id integer
    */
    'fittingId': number;
}
/**
* fitting object
*/
export declare class PostCharactersCharacterIdFittingsFitting {
    /**
    * description string
    */
    'description': string;
    /**
    * items array
    */
    'items': Array<PostCharactersCharacterIdFittingsItem>;
    /**
    * name string
    */
    'name': string;
    /**
    * ship_type_id integer
    */
    'shipTypeId': number;
}
/**
* Forbidden
*/
export declare class PostCharactersCharacterIdFittingsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PostCharactersCharacterIdFittingsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* item object
*/
export declare class PostCharactersCharacterIdFittingsItem {
    /**
    * flag integer
    */
    'flag': number;
    /**
    * quantity integer
    */
    'quantity': number;
    /**
    * type_id integer
    */
    'typeId': number;
}
/**
* Bad request
*/
export declare class PostCharactersCharacterIdMailBadRequest {
    /**
    * Bad request message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PostCharactersCharacterIdMailForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PostCharactersCharacterIdMailInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PostCharactersCharacterIdMailLabelsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PostCharactersCharacterIdMailLabelsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* label object
*/
export declare class PostCharactersCharacterIdMailLabelsLabel {
    /**
    * Hexadecimal string representing label color, in RGB format
    */
    'color': PostCharactersCharacterIdMailLabelsLabel.ColorEnum;
    /**
    * name string
    */
    'name': string;
}
export declare namespace PostCharactersCharacterIdMailLabelsLabel {
    enum ColorEnum {
        Ffffff,
        Ffff01,
        Ff6600,
        Fe0000,
        _9a0000,
        _660066,
        _0000fe,
        _0099ff,
        _01ffff,
        _00ff33,
        _349800,
        _006634,
        _666666,
        _999999,
        E6e6e6,
        Ffffcd,
        _99ffff,
        Ccff9a,
    }
}
/**
* mail schema
*/
export declare class PostCharactersCharacterIdMailMail {
    /**
    * approved_cost integer
    */
    'approvedCost': number;
    /**
    * body string
    */
    'body': string;
    /**
    * recipients array
    */
    'recipients': Array<PostCharactersCharacterIdMailRecipient>;
    /**
    * subject string
    */
    'subject': string;
}
/**
* recipient object
*/
export declare class PostCharactersCharacterIdMailRecipient {
    /**
    * recipient_id integer
    */
    'recipientId': number;
    /**
    * recipient_type string
    */
    'recipientType': PostCharactersCharacterIdMailRecipient.RecipientTypeEnum;
}
export declare namespace PostCharactersCharacterIdMailRecipient {
    enum RecipientTypeEnum {
        Alliance,
        Character,
        Corporation,
        MailingList,
    }
}
/**
* Forbidden
*/
export declare class PostFleetsFleetIdMembersForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PostFleetsFleetIdMembersInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* invitation object
*/
export declare class PostFleetsFleetIdMembersInvitation {
    /**
    * The character you want to invite
    */
    'characterId': number;
    /**
    * - If a character is invited with the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified - If a character is invited with the `wing_commander` role, only `wing_id` should be specified - If a character is invited with the `squad_commander` role, both `wing_id` and `squad_id` should be specified - If a character is invited with the `squad_member` role, `wing_id` and `squad_id` should either both be specified or not specified at all. If they aren’t specified, the invited character will join any squad with available positions
    */
    'role': PostFleetsFleetIdMembersInvitation.RoleEnum;
    /**
    * squad_id integer
    */
    'squadId': number;
    /**
    * wing_id integer
    */
    'wingId': number;
}
export declare namespace PostFleetsFleetIdMembersInvitation {
    enum RoleEnum {
        FleetCommander,
        WingCommander,
        SquadCommander,
        SquadMember,
    }
}
/**
* Not found
*/
export declare class PostFleetsFleetIdMembersNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 422 unprocessable entity object
*/
export declare class PostFleetsFleetIdMembersUnprocessableEntity {
    /**
    * error message
    */
    'error': string;
}
/**
* 201 created object
*/
export declare class PostFleetsFleetIdWingsCreated {
    /**
    * The wing_id of the newly created wing
    */
    'wingId': number;
}
/**
* Forbidden
*/
export declare class PostFleetsFleetIdWingsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PostFleetsFleetIdWingsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class PostFleetsFleetIdWingsNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 201 created object
*/
export declare class PostFleetsFleetIdWingsWingIdSquadsCreated {
    /**
    * The squad_id of the newly created squad
    */
    'squadId': number;
}
/**
* Forbidden
*/
export declare class PostFleetsFleetIdWingsWingIdSquadsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PostFleetsFleetIdWingsWingIdSquadsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class PostFleetsFleetIdWingsWingIdSquadsNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PostUiAutopilotWaypointForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PostUiAutopilotWaypointInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PostUiOpenwindowContractForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PostUiOpenwindowContractInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PostUiOpenwindowInformationForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PostUiOpenwindowInformationInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PostUiOpenwindowMarketdetailsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PostUiOpenwindowMarketdetailsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PostUiOpenwindowNewmailForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PostUiOpenwindowNewmailInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* new_mail object
*/
export declare class PostUiOpenwindowNewmailNewMail {
    /**
    * body string
    */
    'body': string;
    /**
    * recipients array
    */
    'recipients': Array<number>;
    /**
    * subject string
    */
    'subject': string;
    /**
    * to_corp_or_alliance_id integer
    */
    'toCorpOrAllianceId': number;
    /**
    * Corporations, alliances and mailing lists are all types of mailing groups. You may only send to one mailing group, at a time, so you may fill out either this field or the to_corp_or_alliance_ids field
    */
    'toMailingListId': number;
}
/**
* Unprocessable entity
*/
export declare class PostUiOpenwindowNewmailUnprocessableEntity {
    /**
    * Unprocessable entity message
    */
    'error': string;
}
/**
* 200 ok object
*/
export declare class PostUniverseNames200Ok {
    /**
    * category string
    */
    'category': PostUniverseNames200Ok.CategoryEnum;
    /**
    * id integer
    */
    'id': number;
    /**
    * name string
    */
    'name': string;
}
export declare namespace PostUniverseNames200Ok {
    enum CategoryEnum {
        Alliance,
        Character,
        Constellation,
        Corporation,
        InventoryType,
        Region,
        SolarSystem,
        Station,
    }
}
/**
* Internal server error
*/
export declare class PostUniverseNamesInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Not found
*/
export declare class PostUniverseNamesNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PutCharactersCharacterIdCalendarEventIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PutCharactersCharacterIdCalendarEventIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* response schema
*/
export declare class PutCharactersCharacterIdCalendarEventIdResponse {
    /**
    * response string
    */
    'response': PutCharactersCharacterIdCalendarEventIdResponse.ResponseEnum;
}
export declare namespace PutCharactersCharacterIdCalendarEventIdResponse {
    enum ResponseEnum {
        Accepted,
        Declined,
        Tentative,
    }
}
/**
* Forbidden
*/
export declare class PutCharactersCharacterIdContactsForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PutCharactersCharacterIdContactsInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Bad request
*/
export declare class PutCharactersCharacterIdMailMailIdBadRequest {
    /**
    * Bad request message
    */
    'error': string;
}
/**
* contents object
*/
export declare class PutCharactersCharacterIdMailMailIdContents {
    /**
    * Labels to assign to the mail. Pre-existing labels are unassigned.
    */
    'labels': Array<number>;
    /**
    * Whether the mail is flagged as read
    */
    'read': boolean;
}
/**
* Forbidden
*/
export declare class PutCharactersCharacterIdMailMailIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PutCharactersCharacterIdMailMailIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PutCorporationsCorporationIdStructuresStructureIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PutCorporationsCorporationIdStructuresStructureIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* new_schedule object
*/
export declare class PutCorporationsCorporationIdStructuresStructureIdNewSchedule {
    /**
    * Day of the week, zero-indexed to Monday
    */
    'day': number;
    /**
    * Hour of the day evetime, zero-indexed to midnight
    */
    'hour': number;
}
/**
* Bad request
*/
export declare class PutFleetsFleetIdBadRequest {
    /**
    * Bad request message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PutFleetsFleetIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PutFleetsFleetIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PutFleetsFleetIdMembersMemberIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PutFleetsFleetIdMembersMemberIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* movement object
*/
export declare class PutFleetsFleetIdMembersMemberIdMovement {
    /**
    * - If a character is moved to the `fleet_commander` role, neither `wing_id` or `squad_id` should be specified - If a character is moved to the `wing_commander` role, only `wing_id` should be specified - If a character is moved to the `squad_commander` role, both `wing_id` and `squad_id` should be specified - If a character is moved to the `squad_member` role, both `wing_id` and `squad_id` should be specified
    */
    'role': PutFleetsFleetIdMembersMemberIdMovement.RoleEnum;
    /**
    * squad_id integer
    */
    'squadId': number;
    /**
    * wing_id integer
    */
    'wingId': number;
}
export declare namespace PutFleetsFleetIdMembersMemberIdMovement {
    enum RoleEnum {
        FleetCommander,
        WingCommander,
        SquadCommander,
        SquadMember,
    }
}
/**
* Not found
*/
export declare class PutFleetsFleetIdMembersMemberIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* 422 unprocessable entity object
*/
export declare class PutFleetsFleetIdMembersMemberIdUnprocessableEntity {
    /**
    * error message
    */
    'error': string;
}
/**
* new_settings object
*/
export declare class PutFleetsFleetIdNewSettings {
    /**
    * Should free-move be enabled in the fleet
    */
    'isFreeMove': boolean;
    /**
    * New fleet MOTD in CCP flavoured HTML
    */
    'motd': string;
}
/**
* Not found
*/
export declare class PutFleetsFleetIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PutFleetsFleetIdSquadsSquadIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PutFleetsFleetIdSquadsSquadIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* naming object
*/
export declare class PutFleetsFleetIdSquadsSquadIdNaming {
    /**
    * name string
    */
    'name': string;
}
/**
* Not found
*/
export declare class PutFleetsFleetIdSquadsSquadIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
/**
* Forbidden
*/
export declare class PutFleetsFleetIdWingsWingIdForbidden {
    /**
    * Forbidden message
    */
    'error': string;
}
/**
* Internal server error
*/
export declare class PutFleetsFleetIdWingsWingIdInternalServerError {
    /**
    * Internal server error message
    */
    'error': string;
}
/**
* naming object
*/
export declare class PutFleetsFleetIdWingsWingIdNaming {
    /**
    * name string
    */
    'name': string;
}
/**
* Not found
*/
export declare class PutFleetsFleetIdWingsWingIdNotFound {
    /**
    * Not found message
    */
    'error': string;
}
export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: request.Options): void;
}
export declare class HttpBasicAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(requestOptions: request.Options): void;
}
export declare class ApiKeyAuth implements Authentication {
    private location;
    private paramName;
    apiKey: string;
    constructor(location: string, paramName: string);
    applyToRequest(requestOptions: request.Options): void;
}
export declare class OAuth implements Authentication {
    accessToken: string;
    applyToRequest(requestOptions: request.Options): void;
}
export declare class VoidAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(_: request.Options): void;
}
export declare enum AllianceApiApiKeys {
}
export declare class AllianceApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: AllianceApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List all alliances
     * List all active player alliances  ---  Alternate route: &#x60;/v1/alliances/&#x60;  Alternate route: &#x60;/legacy/alliances/&#x60;  Alternate route: &#x60;/dev/alliances/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliances(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get alliance information
     * Public information about an alliance  ---  Alternate route: &#x60;/v2/alliances/{alliance_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param allianceId An Eve alliance ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceId(allianceId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetAlliancesAllianceIdOk;
    }>;
    /**
     * List alliance&#39;s corporations
     * List all current member corporations of an alliance  ---  Alternate route: &#x60;/v1/alliances/{alliance_id}/corporations/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/corporations/&#x60;  Alternate route: &#x60;/dev/alliances/{alliance_id}/corporations/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceIdCorporations(allianceId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get alliance icon
     * Get the icon urls for a alliance  ---  Alternate route: &#x60;/v1/alliances/{alliance_id}/icons/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/icons/&#x60;  Alternate route: &#x60;/dev/alliances/{alliance_id}/icons/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesAllianceIdIcons(allianceId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetAlliancesAllianceIdIconsOk;
    }>;
    /**
     * Get alliance names
     * Resolve a set of alliance IDs to alliance names  ---  Alternate route: &#x60;/v1/alliances/names/&#x60;  Alternate route: &#x60;/legacy/alliances/names/&#x60;  Alternate route: &#x60;/dev/alliances/names/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param allianceIds A comma separated list of alliance IDs
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getAlliancesNames(allianceIds: Array<number>, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetAlliancesNames200Ok>;
    }>;
}
export declare enum AssetsApiApiKeys {
}
export declare class AssetsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: AssetsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get character assets
     * Return a list of the characters assets  ---  Alternate route: &#x60;/v1/characters/{character_id}/assets/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/assets/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/assets/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId Character id of the target character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdAssets(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdAssets200Ok>;
    }>;
}
export declare enum BookmarksApiApiKeys {
}
export declare class BookmarksApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: BookmarksApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List bookmarks
     * List your character&#39;s personal bookmarks  ---  Alternate route: &#x60;/v1/characters/{character_id}/bookmarks/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/bookmarks/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/bookmarks/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdBookmarks(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdBookmarks200Ok>;
    }>;
    /**
     * List bookmark folders
     * List your character&#39;s personal bookmark folders  ---  Alternate route: &#x60;/v1/characters/{character_id}/bookmarks/folders/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/bookmarks/folders/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/bookmarks/folders/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdBookmarksFolders(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdBookmarksFolders200Ok>;
    }>;
}
export declare enum CalendarApiApiKeys {
}
export declare class CalendarApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: CalendarApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List calendar event summaries
     * Get 50 event summaries from the calendar. If no event ID is given, the resource will return the next 50 chronological event summaries from now. If an event ID is specified, it will return the next 50 chronological event summaries from after that event.   ---  Alternate route: &#x60;/v1/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/calendar/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/calendar/&#x60;   ---  This route is cached for up to 5 seconds
     * @param characterId The character to retrieve events from
     * @param datasource The server name you would like data from
     * @param fromEvent The event ID to retrieve events from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCalendar(characterId: number, datasource?: string, fromEvent?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdCalendar200Ok>;
    }>;
    /**
     * Get an event
     * Get all the information for a specific event  ---  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/calendar/{event_id}/&#x60;   ---  This route is cached for up to 5 seconds
     * @param characterId The character id requesting the event
     * @param eventId The id of the event requested
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCalendarEventId(characterId: number, eventId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdCalendarEventIdOk;
    }>;
    /**
     * Respond to an event
     * Set your response status to an event  ---  Alternate route: &#x60;/v3/characters/{character_id}/calendar/{event_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/calendar/{event_id}/&#x60;
     * @param characterId The character ID requesting the event
     * @param eventId The ID of the event requested
     * @param response The response value to set, overriding current value.
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCharactersCharacterIdCalendarEventId(characterId: number, eventId: number, response: PutCharactersCharacterIdCalendarEventIdResponse, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum CharacterApiApiKeys {
}
export declare class CharacterApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: CharacterApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get character&#39;s public information
     * Public information about a character  ---  Alternate route: &#x60;/v4/characters/{character_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterId(characterId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdOk;
    }>;
    /**
     * Get agents research
     * Return a list of agents research information for a character. The formula for finding the current research points with an agent is: currentPoints &#x3D; remainderPoints + pointsPerDay * days(currentTime - researchStartDate)  ---  Alternate route: &#x60;/v1/characters/{character_id}/agents_research/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/agents_research/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/agents_research/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdAgentsResearch(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdAgentsResearch200Ok>;
    }>;
    /**
     * Get chat channels
     * Return chat channels that a character is the owner or an operator of  ---  Alternate route: &#x60;/v1/characters/{character_id}/chat_channels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/chat_channels/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/chat_channels/&#x60;   ---  This route is cached for up to 300 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdChatChannels(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdChatChannels200Ok>;
    }>;
    /**
     * Get corporation history
     * Get a list of all the corporations a character has been a member of  ---  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/corporationhistory/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdCorporationhistory(characterId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdCorporationhistory200Ok>;
    }>;
    /**
     * Get medals
     * Return a list of medals the character has  ---  Alternate route: &#x60;/v1/characters/{character_id}/medals/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/medals/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/medals/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMedals(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdMedals200Ok>;
    }>;
    /**
     * Get character portraits
     * Get portrait urls for a character  ---  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/portrait/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdPortrait(characterId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdPortraitOk;
    }>;
    /**
     * Get standings
     * Return character standings from agents, NPC corporations, and factions  ---  Alternate route: &#x60;/v1/characters/{character_id}/standings/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/standings/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/standings/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdStandings(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdStandings200Ok>;
    }>;
    /**
     * Get character names
     * Resolve a set of character IDs to character names  ---  Alternate route: &#x60;/v1/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/dev/characters/names/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterIds A comma separated list of character IDs
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersNames(characterIds: Array<number>, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersNames200Ok>;
    }>;
    /**
     * Character affiliation
     * Bulk lookup of character IDs to corporation, alliance and faction  ---  Alternate route: &#x60;/v1/characters/affiliation/&#x60;  Alternate route: &#x60;/legacy/characters/affiliation/&#x60;  Alternate route: &#x60;/dev/characters/affiliation/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characters The character IDs to fetch affiliations for
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersAffiliation(characters: Array<number>, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<PostCharactersAffiliation200Ok>;
    }>;
    /**
     * Calculate a CSPA charge cost
     * Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  ---  Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/cspa/&#x60;
     * @param characterId An EVE character ID
     * @param characters The target characters to calculate the charge for
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdCspa(characterId: number, characters: PostCharactersCharacterIdCspaCharacters, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: PostCharactersCharacterIdCspaCreated;
    }>;
}
export declare enum ClonesApiApiKeys {
}
export declare class ClonesApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: ClonesApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get clones
     * A list of the character&#39;s clones  ---  Alternate route: &#x60;/v2/characters/{character_id}/clones/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/clones/&#x60;   ---  This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdClones(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdClonesOk;
    }>;
}
export declare enum ContactsApiApiKeys {
}
export declare class ContactsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: ContactsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Delete contacts
     * Bulk delete contacts  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;
     * @param characterId ID for a character
     * @param contactIds A list of contacts to edit
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Get contacts
     * Return contacts of a character  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;   ---  This route is cached for up to 300 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param page page integer
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContacts(characterId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdContacts200Ok>;
    }>;
    /**
     * Get contact labels
     * Return custom labels for contacts the character defined  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/labels/&#x60;   ---  This route is cached for up to 300 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdContactsLabels(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdContactsLabels200Ok>;
    }>;
    /**
     * Add contacts
     * Bulk add contacts with same settings  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;
     * @param characterId ID for a character
     * @param contactIds A list of contacts to add
     * @param standing Standing for the new contact
     * @param datasource The server name you would like data from
     * @param labelId Add a custom label to the new contact
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param watched Whether the new contact should be watched, note this is only effective on characters
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, standing: number, datasource?: string, labelId?: number, token?: string, userAgent?: string, watched?: boolean, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Edit contacts
     * Bulk edit contacts with same settings  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;
     * @param characterId ID for a character
     * @param contactIds A list of contacts to edit
     * @param standing Standing for the contact
     * @param datasource The server name you would like data from
     * @param labelId Add a custom label to the contact, use 0 for clearing label
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param watched Whether the contact should be watched, note this is only effective on characters
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, standing: number, datasource?: string, labelId?: number, token?: string, userAgent?: string, watched?: boolean, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum CorporationApiApiKeys {
}
export declare class CorporationApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: CorporationApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get corporation information
     * Public information about a corporation  ---  Alternate route: &#x60;/v3/corporations/{corporation_id}/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId An Eve corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationId(corporationId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCorporationsCorporationIdOk;
    }>;
    /**
     * Get alliance history
     * Get a list of all the alliances a corporation has been a member of  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/alliancehistory/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdAlliancehistory(corporationId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdAlliancehistory200Ok>;
    }>;
    /**
     * Get corporation icon
     * Get the icon urls for a corporation  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/icons/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdIcons(corporationId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCorporationsCorporationIdIconsOk;
    }>;
    /**
     * Get corporation members
     * Read the current list of members if the calling character is a member.  ---  Alternate route: &#x60;/v2/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/members/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId A corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdMembers(corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdMembers200Ok>;
    }>;
    /**
     * Get corporation member roles
     * Return the roles of all members if the character has the personnel manager role or any grantable role.  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/roles/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId A corporation ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdRoles(corporationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdRoles200Ok>;
    }>;
    /**
     * Get corporation structures
     * Get a list of corporation structures  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/structures/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/structures/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/structures/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId A corporation ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param page Which page to query, 250 structures per page
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsCorporationIdStructures(corporationId: number, datasource?: string, language?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsCorporationIdStructures200Ok>;
    }>;
    /**
     * Get corporation names
     * Resolve a set of corporation IDs to corporation names  ---  Alternate route: &#x60;/v1/corporations/names/&#x60;  Alternate route: &#x60;/legacy/corporations/names/&#x60;  Alternate route: &#x60;/dev/corporations/names/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationIds A comma separated list of corporation IDs
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsNames(corporationIds: Array<number>, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCorporationsNames200Ok>;
    }>;
    /**
     * Get npc corporations
     * Get a list of npc corporations  ---  Alternate route: &#x60;/v1/corporations/npccorps/&#x60;  Alternate route: &#x60;/legacy/corporations/npccorps/&#x60;  Alternate route: &#x60;/dev/corporations/npccorps/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCorporationsNpccorps(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Update structure vulnerability schedule
     * Update the vulnerability window schedule of a corporation structure  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/structures/{structure_id}/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/structures/{structure_id}/&#x60;
     * @param corporationId A corporation ID
     * @param newSchedule New vulnerability window schedule for the structure
     * @param structureId A structure ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCorporationsCorporationIdStructuresStructureId(corporationId: number, newSchedule: Array<PutCorporationsCorporationIdStructuresStructureIdNewSchedule>, structureId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum DogmaApiApiKeys {
}
export declare class DogmaApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: DogmaApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get attributes
     * Get a list of dogma attribute ids  ---  Alternate route: &#x60;/v1/dogma/attributes/&#x60;  Alternate route: &#x60;/legacy/dogma/attributes/&#x60;  Alternate route: &#x60;/dev/dogma/attributes/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaAttributes(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get attribute information
     * Get information on a dogma attribute  ---  Alternate route: &#x60;/v1/dogma/attributes/{attribute_id}/&#x60;  Alternate route: &#x60;/legacy/dogma/attributes/{attribute_id}/&#x60;  Alternate route: &#x60;/dev/dogma/attributes/{attribute_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param attributeId A dogma attribute ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaAttributesAttributeId(attributeId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetDogmaAttributesAttributeIdOk;
    }>;
    /**
     * Get effects
     * Get a list of dogma effect ids  ---  Alternate route: &#x60;/v1/dogma/effects/&#x60;  Alternate route: &#x60;/legacy/dogma/effects/&#x60;  Alternate route: &#x60;/dev/dogma/effects/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaEffects(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get effect information
     * Get information on a dogma effect  ---  Alternate route: &#x60;/v1/dogma/effects/{effect_id}/&#x60;  Alternate route: &#x60;/legacy/dogma/effects/{effect_id}/&#x60;  Alternate route: &#x60;/dev/dogma/effects/{effect_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param effectId A dogma effect ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getDogmaEffectsEffectId(effectId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetDogmaEffectsEffectIdOk;
    }>;
}
export declare enum FittingsApiApiKeys {
}
export declare class FittingsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: FittingsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Delete fitting
     * Delete a fitting from a character  ---  Alternate route: &#x60;/v1/characters/{character_id}/fittings/{fitting_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fittings/{fitting_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/fittings/{fitting_id}/&#x60;
     * @param characterId ID for a character
     * @param fittingId ID for a fitting of this character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdFittingsFittingId(characterId: number, fittingId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Get fittings
     * Return fittings of a character  ---  Alternate route: &#x60;/v1/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/fittings/&#x60;   ---  This route is cached for up to 300 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdFittings(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdFittings200Ok>;
    }>;
    /**
     * Create fitting
     * Save a new fitting for a character  ---  Alternate route: &#x60;/v1/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/fittings/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/fittings/&#x60;
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param fitting Details about the new fitting
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdFittings(characterId: number, datasource?: string, fitting?: PostCharactersCharacterIdFittingsFitting, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: PostCharactersCharacterIdFittingsCreated;
    }>;
}
export declare enum FleetsApiApiKeys {
}
export declare class FleetsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: FleetsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Kick fleet member
     * Kick a fleet member  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param memberId The character ID of a member in this fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteFleetsFleetIdMembersMemberId(fleetId: number, memberId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Delete fleet squad
     * Delete a fleet squad, only empty squads can be deleted  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param squadId The squad to delete
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteFleetsFleetIdSquadsSquadId(fleetId: number, squadId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Delete fleet wing
     * Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param wingId The wing to delete
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteFleetsFleetIdWingsWingId(fleetId: number, wingId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Get fleet information
     * Return details about a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60;   ---  This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFleetsFleetId(fleetId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetFleetsFleetIdOk;
    }>;
    /**
     * Get fleet members
     * Return information about fleet members  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60;   ---  This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFleetsFleetIdMembers(fleetId: number, datasource?: string, language?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetFleetsFleetIdMembers200Ok>;
    }>;
    /**
     * Get fleet wings
     * Return information about wings in a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60;   ---  This route is cached for up to 5 seconds
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getFleetsFleetIdWings(fleetId: number, datasource?: string, language?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetFleetsFleetIdWings200Ok>;
    }>;
    /**
     * Create fleet invitation
     * Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60;
     * @param fleetId ID for a fleet
     * @param invitation Details of the invitation
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postFleetsFleetIdMembers(fleetId: number, invitation: PostFleetsFleetIdMembersInvitation, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Create fleet wing
     * Create a new wing in a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60;
     * @param fleetId ID for a fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postFleetsFleetIdWings(fleetId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: PostFleetsFleetIdWingsCreated;
    }>;
    /**
     * Create fleet squad
     * Create a new squad in a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;
     * @param fleetId ID for a fleet
     * @param wingId The wing_id to create squad in
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postFleetsFleetIdWingsWingIdSquads(fleetId: number, wingId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: PostFleetsFleetIdWingsWingIdSquadsCreated;
    }>;
    /**
     * Update fleet
     * Update settings about a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param newSettings What to update for this fleet
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetId(fleetId: number, newSettings: PutFleetsFleetIdNewSettings, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Move fleet member
     * Move a fleet member around  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param memberId The character ID of a member in this fleet
     * @param movement Details of the invitation
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetIdMembersMemberId(fleetId: number, memberId: number, movement: PutFleetsFleetIdMembersMemberIdMovement, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Rename fleet squad
     * Rename a fleet squad  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param naming New name of the squad
     * @param squadId The squad to rename
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetIdSquadsSquadId(fleetId: number, naming: PutFleetsFleetIdSquadsSquadIdNaming, squadId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Rename fleet wing
     * Rename a fleet wing  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60;
     * @param fleetId ID for a fleet
     * @param naming New name of the wing
     * @param wingId The wing to rename
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putFleetsFleetIdWingsWingId(fleetId: number, naming: PutFleetsFleetIdWingsWingIdNaming, wingId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum IncursionsApiApiKeys {
}
export declare class IncursionsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: IncursionsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List incursions
     * Return a list of current incursions  ---  Alternate route: &#x60;/v1/incursions/&#x60;  Alternate route: &#x60;/legacy/incursions/&#x60;  Alternate route: &#x60;/dev/incursions/&#x60;   ---  This route is cached for up to 300 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getIncursions(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetIncursions200Ok>;
    }>;
}
export declare enum IndustryApiApiKeys {
}
export declare class IndustryApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: IndustryApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List industry facilities
     * Return a list of industry facilities  ---  Alternate route: &#x60;/v1/industry/facilities/&#x60;  Alternate route: &#x60;/legacy/industry/facilities/&#x60;  Alternate route: &#x60;/dev/industry/facilities/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getIndustryFacilities(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetIndustryFacilities200Ok>;
    }>;
    /**
     * List solar system cost indices
     * Return cost indices for solar systems  ---  Alternate route: &#x60;/v1/industry/systems/&#x60;  Alternate route: &#x60;/legacy/industry/systems/&#x60;  Alternate route: &#x60;/dev/industry/systems/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getIndustrySystems(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetIndustrySystems200Ok>;
    }>;
}
export declare enum InsuranceApiApiKeys {
}
export declare class InsuranceApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: InsuranceApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List insurance levels
     * Return available insurance levels for all ship types  ---  Alternate route: &#x60;/v1/insurance/prices/&#x60;  Alternate route: &#x60;/legacy/insurance/prices/&#x60;  Alternate route: &#x60;/dev/insurance/prices/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getInsurancePrices(datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetInsurancePrices200Ok>;
    }>;
}
export declare enum KillmailsApiApiKeys {
}
export declare class KillmailsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: KillmailsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List kills and losses
     * Return a list of character&#39;s recent kills and losses  ---  Alternate route: &#x60;/v1/characters/{character_id}/killmails/recent/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/killmails/recent/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/killmails/recent/&#x60;   ---  This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param maxCount How many killmails to return at maximum
     * @param maxKillId Only return killmails with ID smaller than this.
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdKillmailsRecent(characterId: number, datasource?: string, maxCount?: number, maxKillId?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdKillmailsRecent200Ok>;
    }>;
    /**
     * Get a single killmail
     * Return a single killmail from its ID and hash  ---  Alternate route: &#x60;/v1/killmails/{killmail_id}/{killmail_hash}/&#x60;  Alternate route: &#x60;/legacy/killmails/{killmail_id}/{killmail_hash}/&#x60;  Alternate route: &#x60;/dev/killmails/{killmail_id}/{killmail_hash}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param killmailHash The killmail hash for verification
     * @param killmailId The killmail ID to be queried
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getKillmailsKillmailIdKillmailHash(killmailHash: string, killmailId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetKillmailsKillmailIdKillmailHashOk;
    }>;
}
export declare enum LocationApiApiKeys {
}
export declare class LocationApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: LocationApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get character location
     * Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable.  ---  Alternate route: &#x60;/v1/characters/{character_id}/location/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/location/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/location/&#x60;   ---  This route is cached for up to 5 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdLocation(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdLocationOk;
    }>;
    /**
     * Get current ship
     * Get the current ship type, name and id  ---  Alternate route: &#x60;/v1/characters/{character_id}/ship/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/ship/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/ship/&#x60;   ---  This route is cached for up to 5 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdShip(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdShipOk;
    }>;
}
export declare enum LoyaltyApiApiKeys {
}
export declare class LoyaltyApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: LoyaltyApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get loyalty points
     * Return a list of loyalty points for all corporations the character has worked for  ---  Alternate route: &#x60;/v1/characters/{character_id}/loyalty/points/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/loyalty/points/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/loyalty/points/&#x60;
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdLoyaltyPoints(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdLoyaltyPoints200Ok>;
    }>;
    /**
     * List loyalty store offers
     * Return a list of offers from a specific corporation&#39;s loyalty store  ---  Alternate route: &#x60;/v1/loyalty/stores/{corporation_id}/offers/&#x60;  Alternate route: &#x60;/legacy/loyalty/stores/{corporation_id}/offers/&#x60;  Alternate route: &#x60;/dev/loyalty/stores/{corporation_id}/offers/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param corporationId ID of a corporation
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getLoyaltyStoresCorporationIdOffers(corporationId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetLoyaltyStoresCorporationIdOffers200Ok>;
    }>;
}
export declare enum MailApiApiKeys {
}
export declare class MailApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: MailApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Delete a mail label
     * Delete a mail label  ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/labels/{label_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/labels/{label_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/{label_id}/&#x60;
     * @param characterId An EVE character ID
     * @param labelId An EVE label id
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdMailLabelsLabelId(characterId: number, labelId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Delete a mail
     * Delete a mail  ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;
     * @param characterId An EVE character ID
     * @param mailId An EVE mail ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    deleteCharactersCharacterIdMailMailId(characterId: number, mailId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Return mail headers
     * Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60;   ---  This route is cached for up to 30 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param labels Fetch only mails that match one or more of the given labels
     * @param lastMailId List only mail with an ID lower than the given ID, if present
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMail(characterId: number, datasource?: string, labels?: Array<number>, lastMailId?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdMail200Ok>;
    }>;
    /**
     * Get mail labels and unread counts
     * Return a list of the users mail labels, unread counts for each label and a total unread count.  ---  Alternate route: &#x60;/v3/characters/{character_id}/mail/labels/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60;   ---  This route is cached for up to 30 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMailLabels(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdMailLabelsOk;
    }>;
    /**
     * Return mailing list subscriptions
     * Return all mailing lists that the character is subscribed to   ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/lists/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/lists/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/lists/&#x60;   ---  This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMailLists(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdMailLists200Ok>;
    }>;
    /**
     * Return a mail
     * Return the contents of an EVE mail  ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;   ---  This route is cached for up to 30 seconds
     * @param characterId An EVE character ID
     * @param mailId An EVE mail ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdMailMailId(characterId: number, mailId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdMailMailIdOk;
    }>;
    /**
     * Send a new mail
     * Create and send a new mail  ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/&#x60;
     * @param characterId The sender&#39;s character ID
     * @param mail The mail to send
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdMail(characterId: number, mail: PostCharactersCharacterIdMailMail, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: number;
    }>;
    /**
     * Create a mail label
     * Create a mail label  ---  Alternate route: &#x60;/v2/characters/{character_id}/mail/labels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/labels/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/labels/&#x60;
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param label Label to create
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postCharactersCharacterIdMailLabels(characterId: number, datasource?: string, label?: PostCharactersCharacterIdMailLabelsLabel, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: number;
    }>;
    /**
     * Update metadata about a mail
     * Update metadata about a mail  ---  Alternate route: &#x60;/v1/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/mail/{mail_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/mail/{mail_id}/&#x60;
     * @param characterId An EVE character ID
     * @param contents Data used to update the mail
     * @param mailId An EVE mail ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    putCharactersCharacterIdMailMailId(characterId: number, contents: PutCharactersCharacterIdMailMailIdContents, mailId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum MarketApiApiKeys {
}
export declare class MarketApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: MarketApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get item groups
     * Get a list of item groups  ---  Alternate route: &#x60;/v1/markets/groups/&#x60;  Alternate route: &#x60;/legacy/markets/groups/&#x60;  Alternate route: &#x60;/dev/markets/groups/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsGroups(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get item group information
     * Get information on an item group  ---  Alternate route: &#x60;/v1/markets/groups/{market_group_id}/&#x60;  Alternate route: &#x60;/legacy/markets/groups/{market_group_id}/&#x60;  Alternate route: &#x60;/dev/markets/groups/{market_group_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param marketGroupId An Eve item group ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsGroupsMarketGroupId(marketGroupId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetMarketsGroupsMarketGroupIdOk;
    }>;
    /**
     * List market prices
     * Return a list of prices  ---  Alternate route: &#x60;/v1/markets/prices/&#x60;  Alternate route: &#x60;/legacy/markets/prices/&#x60;  Alternate route: &#x60;/dev/markets/prices/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsPrices(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetMarketsPrices200Ok>;
    }>;
    /**
     * List historical market statistics in a region
     * Return a list of historical market statistics for the specified type in a region  ---  Alternate route: &#x60;/v1/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/dev/markets/{region_id}/history/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param regionId Return statistics in this region
     * @param typeId Return statistics for this type
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsRegionIdHistory(regionId: number, typeId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetMarketsRegionIdHistory200Ok>;
    }>;
    /**
     * List orders in a region
     * Return a list of orders in a region  ---  Alternate route: &#x60;/v1/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/dev/markets/{region_id}/orders/&#x60;   ---  This route is cached for up to 300 seconds
     * @param orderType Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders.
     * @param regionId Return orders in this region
     * @param datasource The server name you would like data from
     * @param page Which page to query, only used for querying without type_id. Starting at 1
     * @param typeId Return orders only for this type
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsRegionIdOrders(orderType: string, regionId: number, datasource?: string, page?: number, typeId?: number, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetMarketsRegionIdOrders200Ok>;
    }>;
    /**
     * List orders in a structure
     * Return all orders in a structure  ---  Alternate route: &#x60;/v1/markets/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/markets/structures/{structure_id}/&#x60;  Alternate route: &#x60;/dev/markets/structures/{structure_id}/&#x60;   ---  This route is cached for up to 300 seconds
     * @param structureId Return orders in this structure
     * @param datasource The server name you would like data from
     * @param page Which page to query, starting at 1
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getMarketsStructuresStructureId(structureId: number, datasource?: string, page?: number, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetMarketsStructuresStructureId200Ok>;
    }>;
}
export declare enum OpportunitiesApiApiKeys {
}
export declare class OpportunitiesApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: OpportunitiesApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get a character&#39;s completed tasks
     * Return a list of tasks finished by a character  ---  Alternate route: &#x60;/v1/characters/{character_id}/opportunities/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/opportunities/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/opportunities/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param characterId ID for a character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdOpportunities(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdOpportunities200Ok>;
    }>;
    /**
     * Get opportunities groups
     * Return a list of opportunities groups  ---  Alternate route: &#x60;/v1/opportunities/groups/&#x60;  Alternate route: &#x60;/legacy/opportunities/groups/&#x60;  Alternate route: &#x60;/dev/opportunities/groups/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesGroups(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get opportunities group
     * Return information of an opportunities group  ---  Alternate route: &#x60;/v1/opportunities/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/opportunities/groups/{group_id}/&#x60;  Alternate route: &#x60;/dev/opportunities/groups/{group_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param groupId ID of an opportunities group
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesGroupsGroupId(groupId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetOpportunitiesGroupsGroupIdOk;
    }>;
    /**
     * Get opportunities tasks
     * Return a list of opportunities tasks  ---  Alternate route: &#x60;/v1/opportunities/tasks/&#x60;  Alternate route: &#x60;/legacy/opportunities/tasks/&#x60;  Alternate route: &#x60;/dev/opportunities/tasks/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesTasks(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get opportunities task
     * Return information of an opportunities task  ---  Alternate route: &#x60;/v1/opportunities/tasks/{task_id}/&#x60;  Alternate route: &#x60;/legacy/opportunities/tasks/{task_id}/&#x60;  Alternate route: &#x60;/dev/opportunities/tasks/{task_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param taskId ID of an opportunities task
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getOpportunitiesTasksTaskId(taskId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetOpportunitiesTasksTaskIdOk;
    }>;
}
export declare enum PlanetaryInteractionApiApiKeys {
}
export declare class PlanetaryInteractionApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: PlanetaryInteractionApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get colonies
     * Returns a list of all planetary colonies owned by a character.  ---  Alternate route: &#x60;/v1/characters/{character_id}/planets/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/planets/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/planets/&#x60;   ---  This route is cached for up to 600 seconds
     * @param characterId Character id of the target character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdPlanets(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdPlanets200Ok>;
    }>;
    /**
     * Get colony layout
     * Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information on this endpoint will not update until this criteria is met.  ---  Alternate route: &#x60;/v2/characters/{character_id}/planets/{planet_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/planets/{planet_id}/&#x60;   ---  This route is cached for up to 600 seconds
     * @param characterId Character id of the target character
     * @param planetId Planet id of the target planet
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdPlanetsPlanetId(characterId: number, planetId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdPlanetsPlanetIdOk;
    }>;
    /**
     * Get schematic information
     * Get information on a planetary factory schematic  ---  Alternate route: &#x60;/v1/universe/schematics/{schematic_id}/&#x60;  Alternate route: &#x60;/legacy/universe/schematics/{schematic_id}/&#x60;  Alternate route: &#x60;/dev/universe/schematics/{schematic_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param schematicId A PI schematic ID
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSchematicsSchematicId(schematicId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseSchematicsSchematicIdOk;
    }>;
}
export declare enum RoutesApiApiKeys {
}
export declare class RoutesApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: RoutesApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get route
     * Get the systems between origin and destination  ---  Alternate route: &#x60;/legacy/route/{origin}/{destination}/&#x60;  Alternate route: &#x60;/dev/route/{origin}/{destination}/&#x60;  Alternate route: &#x60;/v1/route/{origin}/{destination}/&#x60;   ---  This route is cached for up to 86400 seconds
     * @param destination destination solar system ID
     * @param origin origin solar system ID
     * @param avoid avoid solar system ID(s)
     * @param connections connected solar system pairs
     * @param datasource The server name you would like data from
     * @param flag route security preference
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getRouteOriginDestination(destination: number, origin: number, avoid?: Array<number>, connections?: Array<Array<number>>, datasource?: string, flag?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
}
export declare enum SearchApiApiKeys {
}
export declare class SearchApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: SearchApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Search on a string
     * Search for entities that match a given sub-string.  ---  Alternate route: &#x60;/v2/characters/{character_id}/search/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param categories Type of entities to search for
     * @param characterId An EVE character ID
     * @param search The string to search on
     * @param datasource The server name you would like data from
     * @param language Search locale
     * @param strict Whether the search should be a strict match
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdSearch(categories: Array<string>, characterId: number, search: string, datasource?: string, language?: string, strict?: boolean, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdSearchOk;
    }>;
    /**
     * Search on a string
     * Search for entities that match a given sub-string.  ---  Alternate route: &#x60;/v1/search/&#x60;  Alternate route: &#x60;/legacy/search/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param categories Type of entities to search for
     * @param search The string to search on
     * @param datasource The server name you would like data from
     * @param language Search locale
     * @param strict Whether the search should be a strict match
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSearch(categories: Array<string>, search: string, datasource?: string, language?: string, strict?: boolean, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetSearchOk;
    }>;
}
export declare enum SkillsApiApiKeys {
}
export declare class SkillsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: SkillsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get character&#39;s skill queue
     * List the configured skill queue for the given character  ---  Alternate route: &#x60;/v2/characters/{character_id}/skillqueue/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/skillqueue/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/skillqueue/&#x60;   ---  This route is cached for up to 120 seconds
     * @param characterId Character id of the target character
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdSkillqueue(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdSkillqueue200Ok>;
    }>;
    /**
     * Get character skills
     * List all trained skills for the given character  ---  Alternate route: &#x60;/v3/characters/{character_id}/skills/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/skills/&#x60;   ---  This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdSkills(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetCharactersCharacterIdSkillsOk;
    }>;
}
export declare enum SovereigntyApiApiKeys {
}
export declare class SovereigntyApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: SovereigntyApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List sovereignty campaigns
     * Shows sovereignty data for campaigns.  ---  Alternate route: &#x60;/v1/sovereignty/campaigns/&#x60;  Alternate route: &#x60;/legacy/sovereignty/campaigns/&#x60;  Alternate route: &#x60;/dev/sovereignty/campaigns/&#x60;   ---  This route is cached for up to 5 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSovereigntyCampaigns(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetSovereigntyCampaigns200Ok>;
    }>;
    /**
     * List sovereignty of systems
     * Shows sovereignty information for solar systems  ---  Alternate route: &#x60;/v1/sovereignty/map/&#x60;  Alternate route: &#x60;/legacy/sovereignty/map/&#x60;  Alternate route: &#x60;/dev/sovereignty/map/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSovereigntyMap(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetSovereigntyMap200Ok>;
    }>;
    /**
     * List sovereignty structures
     * Shows sovereignty data for structures.  ---  Alternate route: &#x60;/v1/sovereignty/structures/&#x60;  Alternate route: &#x60;/legacy/sovereignty/structures/&#x60;  Alternate route: &#x60;/dev/sovereignty/structures/&#x60;   ---  This route is cached for up to 120 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getSovereigntyStructures(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetSovereigntyStructures200Ok>;
    }>;
}
export declare enum StatusApiApiKeys {
}
export declare class StatusApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: StatusApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Retrieve the uptime and player counts
     * EVE Server status  ---  Alternate route: &#x60;/v1/status/&#x60;  Alternate route: &#x60;/legacy/status/&#x60;  Alternate route: &#x60;/dev/status/&#x60;   ---  This route is cached for up to 30 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getStatus(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetStatusOk;
    }>;
}
export declare enum UniverseApiApiKeys {
}
export declare class UniverseApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: UniverseApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Get bloodlines
     * Get a list of bloodlines  ---  Alternate route: &#x60;/v1/universe/bloodlines/&#x60;  Alternate route: &#x60;/legacy/universe/bloodlines/&#x60;  Alternate route: &#x60;/dev/universe/bloodlines/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseBloodlines(datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetUniverseBloodlines200Ok>;
    }>;
    /**
     * Get item categories
     * Get a list of item categories  ---  Alternate route: &#x60;/v1/universe/categories/&#x60;  Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/dev/universe/categories/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseCategories(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get item category information
     * Get information of an item category  ---  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/dev/universe/categories/{category_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param categoryId An Eve item category ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseCategoriesCategoryId(categoryId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseCategoriesCategoryIdOk;
    }>;
    /**
     * Get constellations
     * Get a list of constellations  ---  Alternate route: &#x60;/v1/universe/constellations/&#x60;  Alternate route: &#x60;/legacy/universe/constellations/&#x60;  Alternate route: &#x60;/dev/universe/constellations/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseConstellations(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get constellation information
     * Get information on a constellation  ---  Alternate route: &#x60;/v1/universe/constellations/{constellation_id}/&#x60;  Alternate route: &#x60;/legacy/universe/constellations/{constellation_id}/&#x60;  Alternate route: &#x60;/dev/universe/constellations/{constellation_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param constellationId constellation_id integer
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseConstellationsConstellationId(constellationId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseConstellationsConstellationIdOk;
    }>;
    /**
     * Get factions
     * Get a list of factions  ---  Alternate route: &#x60;/v1/universe/factions/&#x60;  Alternate route: &#x60;/legacy/universe/factions/&#x60;  Alternate route: &#x60;/dev/universe/factions/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseFactions(datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetUniverseFactions200Ok>;
    }>;
    /**
     * Get graphics
     * Get a list of graphics  ---  Alternate route: &#x60;/v1/universe/graphics/&#x60;  Alternate route: &#x60;/legacy/universe/graphics/&#x60;  Alternate route: &#x60;/dev/universe/graphics/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGraphics(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get graphic information
     * Get information on a graphic  ---  Alternate route: &#x60;/v1/universe/graphics/{graphic_id}/&#x60;  Alternate route: &#x60;/legacy/universe/graphics/{graphic_id}/&#x60;  Alternate route: &#x60;/dev/universe/graphics/{graphic_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param graphicId graphic_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGraphicsGraphicId(graphicId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseGraphicsGraphicIdOk;
    }>;
    /**
     * Get item groups
     * Get a list of item groups  ---  Alternate route: &#x60;/v1/universe/groups/&#x60;  Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/dev/universe/groups/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param page Which page to query
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGroups(datasource?: string, page?: number, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get item group information
     * Get information on an item group  ---  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/dev/universe/groups/{group_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param groupId An Eve item group ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseGroupsGroupId(groupId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseGroupsGroupIdOk;
    }>;
    /**
     * Get moon information
     * Get information on a moon  ---  Alternate route: &#x60;/v1/universe/moons/{moon_id}/&#x60;  Alternate route: &#x60;/legacy/universe/moons/{moon_id}/&#x60;  Alternate route: &#x60;/dev/universe/moons/{moon_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param moonId moon_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseMoonsMoonId(moonId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseMoonsMoonIdOk;
    }>;
    /**
     * Get planet information
     * Get information on a planet  ---  Alternate route: &#x60;/v1/universe/planets/{planet_id}/&#x60;  Alternate route: &#x60;/legacy/universe/planets/{planet_id}/&#x60;  Alternate route: &#x60;/dev/universe/planets/{planet_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param planetId planet_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniversePlanetsPlanetId(planetId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniversePlanetsPlanetIdOk;
    }>;
    /**
     * Get character races
     * Get a list of character races  ---  Alternate route: &#x60;/v1/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/dev/universe/races/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseRaces(datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetUniverseRaces200Ok>;
    }>;
    /**
     * Get regions
     * Get a list of regions  ---  Alternate route: &#x60;/v1/universe/regions/&#x60;  Alternate route: &#x60;/legacy/universe/regions/&#x60;  Alternate route: &#x60;/dev/universe/regions/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseRegions(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get region information
     * Get information on a region  ---  Alternate route: &#x60;/v1/universe/regions/{region_id}/&#x60;  Alternate route: &#x60;/legacy/universe/regions/{region_id}/&#x60;  Alternate route: &#x60;/dev/universe/regions/{region_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param regionId region_id integer
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseRegionsRegionId(regionId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseRegionsRegionIdOk;
    }>;
    /**
     * Get stargate information
     * Get information on a stargate  ---  Alternate route: &#x60;/v1/universe/stargates/{stargate_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stargates/{stargate_id}/&#x60;  Alternate route: &#x60;/dev/universe/stargates/{stargate_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param stargateId stargate_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStargatesStargateId(stargateId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseStargatesStargateIdOk;
    }>;
    /**
     * Get station information
     * Get information on a station  ---  Alternate route: &#x60;/v2/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/dev/universe/stations/{station_id}/&#x60;   ---  This route is cached for up to 300 seconds
     * @param stationId station_id integer
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStationsStationId(stationId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseStationsStationIdOk;
    }>;
    /**
     * List all public structures
     * List all public structures  ---  Alternate route: &#x60;/v1/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;  Alternate route: &#x60;/dev/universe/structures/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStructures(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get structure information
     * Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  ---  Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/dev/universe/structures/{structure_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param structureId An Eve structure ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseStructuresStructureId(structureId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseStructuresStructureIdOk;
    }>;
    /**
     * Get system jumps
     * Get the number of jumps in solar systems within the last hour, excluding wormhole space. Only systems with jumps will be listed  ---  Alternate route: &#x60;/v1/universe/system_jumps/&#x60;  Alternate route: &#x60;/legacy/universe/system_jumps/&#x60;  Alternate route: &#x60;/dev/universe/system_jumps/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystemJumps(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetUniverseSystemJumps200Ok>;
    }>;
    /**
     * Get system kills
     * Get the number of ship, pod and NPC kills per solar system within the last hour, excluding wormhole space. Only systems with kills will be listed  ---  Alternate route: &#x60;/v1/universe/system_kills/&#x60;  Alternate route: &#x60;/legacy/universe/system_kills/&#x60;  Alternate route: &#x60;/dev/universe/system_kills/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystemKills(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetUniverseSystemKills200Ok>;
    }>;
    /**
     * Get solar systems
     * Get a list of solar systems  ---  Alternate route: &#x60;/v1/universe/systems/&#x60;  Alternate route: &#x60;/legacy/universe/systems/&#x60;  Alternate route: &#x60;/dev/universe/systems/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystems(datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get solar system information
     * Get information on a solar system  ---  Alternate route: &#x60;/v2/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/dev/universe/systems/{system_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param systemId system_id integer
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseSystemsSystemId(systemId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseSystemsSystemIdOk;
    }>;
    /**
     * Get types
     * Get a list of type ids  ---  Alternate route: &#x60;/v1/universe/types/&#x60;  Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/dev/universe/types/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param page Which page to query
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseTypes(datasource?: string, page?: number, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get type information
     * Get information on a type  ---  Alternate route: &#x60;/v2/universe/types/{type_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param typeId An Eve item type ID
     * @param datasource The server name you would like data from
     * @param language Language to use in the response
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getUniverseTypesTypeId(typeId: number, datasource?: string, language?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetUniverseTypesTypeIdOk;
    }>;
    /**
     * Get names and categories for a set of ID&#39;s
     * Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  ---  Alternate route: &#x60;/v2/universe/names/&#x60;  Alternate route: &#x60;/dev/universe/names/&#x60;
     * @param ids The ids to resolve
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUniverseNames(ids: Array<number>, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<PostUniverseNames200Ok>;
    }>;
}
export declare enum UserInterfaceApiApiKeys {
}
export declare class UserInterfaceApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: UserInterfaceApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * Set Autopilot Waypoint
     * Set a solar system as autopilot waypoint  ---  Alternate route: &#x60;/v2/ui/autopilot/waypoint/&#x60;  Alternate route: &#x60;/dev/ui/autopilot/waypoint/&#x60;
     * @param addToBeginning Whether this solar system should be added to the beginning of all waypoints
     * @param clearOtherWaypoints Whether clean other waypoints beforing adding this one
     * @param destinationId The destination to travel to, can be solar system, station or structure&#39;s id
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiAutopilotWaypoint(addToBeginning: boolean, clearOtherWaypoints: boolean, destinationId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Open Contract Window
     * Open the contract window inside the client  ---  Alternate route: &#x60;/v1/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/dev/ui/openwindow/contract/&#x60;
     * @param contractId The contract to open
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowContract(contractId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Open Information Window
     * Open the information window for a character, corporation or alliance inside the client  ---  Alternate route: &#x60;/v1/ui/openwindow/information/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/information/&#x60;  Alternate route: &#x60;/dev/ui/openwindow/information/&#x60;
     * @param targetId The target to open
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowInformation(targetId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Open Market Details
     * Open the market details window for a specific typeID inside the client  ---  Alternate route: &#x60;/v1/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/dev/ui/openwindow/marketdetails/&#x60;
     * @param typeId The item type to open in market window
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowMarketdetails(typeId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Open New Mail Window
     * Open the New Mail window, according to settings from the request if applicable  ---  Alternate route: &#x60;/v1/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/dev/ui/openwindow/newmail/&#x60;
     * @param newMail The details of mail to create
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    postUiOpenwindowNewmail(newMail: PostUiOpenwindowNewmailNewMail, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum WalletApiApiKeys {
}
export declare class WalletApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: WalletApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List wallets and balances
     * List your wallets and their balances. Characters typically have only one wallet, with wallet_id 1000 being the master wallet.  ---  Alternate route: &#x60;/v1/characters/{character_id}/wallets/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/wallets/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/wallets/&#x60;   ---  This route is cached for up to 120 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param token Access token to use, if preferred over a header
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getCharactersCharacterIdWallets(characterId: number, datasource?: string, token?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetCharactersCharacterIdWallets200Ok>;
    }>;
}
export declare enum WarsApiApiKeys {
}
export declare class WarsApi {
    protected basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
        'evesso': OAuth;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    setApiKey(key: WarsApiApiKeys, value: string): void;
    accessToken: string;
    /**
     * List wars
     * Return a list of wars  ---  Alternate route: &#x60;/v1/wars/&#x60;  Alternate route: &#x60;/legacy/wars/&#x60;  Alternate route: &#x60;/dev/wars/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param datasource The server name you would like data from
     * @param maxWarId Only return wars with ID smaller than this.
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getWars(datasource?: string, maxWarId?: number, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<number>;
    }>;
    /**
     * Get war information
     * Return details about a war  ---  Alternate route: &#x60;/v1/wars/{war_id}/&#x60;  Alternate route: &#x60;/legacy/wars/{war_id}/&#x60;  Alternate route: &#x60;/dev/wars/{war_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param warId ID for a war
     * @param datasource The server name you would like data from
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getWarsWarId(warId: number, datasource?: string, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: GetWarsWarIdOk;
    }>;
    /**
     * List kills for a war
     * Return a list of kills related to a war  ---  Alternate route: &#x60;/v1/wars/{war_id}/killmails/&#x60;  Alternate route: &#x60;/legacy/wars/{war_id}/killmails/&#x60;  Alternate route: &#x60;/dev/wars/{war_id}/killmails/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param warId A valid war ID
     * @param datasource The server name you would like data from
     * @param page Which page to query, starting at 1, 2000 killmails per page.
     * @param userAgent Client identifier, takes precedence over headers
     * @param xUserAgent Client identifier, takes precedence over User-Agent
     */
    getWarsWarIdKillmails(warId: number, datasource?: string, page?: number, userAgent?: string, xUserAgent?: string): Promise<{
        response: http.ClientResponse;
        body: Array<GetWarsWarIdKillmails200Ok>;
    }>;
}
